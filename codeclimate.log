== karma.conf.js (1 issue) ==
4-63: Function `exports` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== lib/arel/visitors/oracle12_hack.rb (9 issues) ==
7: Arel::Visitors#strip_order_from_select doesn't depend on instance state (maybe move it to another class?) [reek]
7: Arel::Visitors#strip_order_from_select has the parameter name 'o' [reek]
14: Arel::Visitors#visit_Arel_Nodes_In has the name 'visit_Arel_Nodes_In' [reek]
14: Arel::Visitors#visit_Arel_Nodes_In has the parameter name 'o' [reek]
14-30: Arel::Visitors takes parameters ['collector', 'o'] to 3 methods [reek]
20: Arel::Visitors#visit_Arel_Nodes_NotIn has the parameter name 'o' [reek]
20: Arel::Visitors#visit_Arel_Nodes_NotIn has the name 'visit_Arel_Nodes_NotIn' [reek]
30: Arel::Visitors#visit_Arel_Nodes_Equality has the name 'visit_Arel_Nodes_Equality' [reek]
30: Arel::Visitors#visit_Arel_Nodes_Equality has the parameter name 'o' [reek]

== lib/deadlock_retry.rb (8 issues) ==
46-66: Method `transaction` has a Cognitive Complexity of 13 (exceeds 5 allowed). Consider refactoring. [structure]
46: DeadlockRetry::ClassMethods#transaction has approx 13 statements [reek]
90-110: Method `check_innodb_status_available` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
90: DeadlockRetry::ClassMethods#check_innodb_status_available has approx 9 statements [reek]
91: DeadlockRetry::ClassMethods#check_innodb_status_available performs a nil-check [reek]
93-101: DeadlockRetry::ClassMethods#check_innodb_status_available calls 'self.connection' 3 times [reek]
105-108: DeadlockRetry::ClassMethods#check_innodb_status_available calls 'DeadlockRetry.innodb_status_cmd = false' 2 times [reek]
120: DeadlockRetry::ClassMethods#log_innodb_status has the variable name 'e' [reek]

== lib/developer_portal/app/assets/javascripts/plans_widget.js (88 issues) ==
1-59: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2: Missing space before function parentheses. [eslint]
2: Identifier 'application_id' is not in camel case. [eslint]
2: Missing space before opening brace. [eslint]
3: 'previewBox' is defined but never used. [eslint]
3: Extra semicolon. [eslint]
4: Multiple spaces found before '('. [eslint]
4: Identifier 'application_id' is not in camel case. [eslint]
4: Identifier 'application_id' is not in camel case. [eslint]
4: Extra semicolon. [eslint]
6: Extra semicolon. [eslint]
7: Extra semicolon. [eslint]
8: Identifier 'application_id' is not in camel case. [eslint]
8: Extra semicolon. [eslint]
10: Strings must use singlequote. [eslint]
10: Expected '===' and instead saw '=='. [eslint]
11: Strings must use singlequote. [eslint]
12: Extra semicolon. [eslint]
13: Extra semicolon. [eslint]
14: Extra semicolon. [eslint]
16: Extra semicolon. [eslint]
18: Missing space before function parentheses. [eslint]
19: Strings must use singlequote. [eslint]
19: Extra semicolon. [eslint]
20: Extra semicolon. [eslint]
21: Extra semicolon. [eslint]
22: Extra semicolon. [eslint]
26: Missing space before function parentheses. [eslint]
26: Missing space before opening brace. [eslint]
27: Extra semicolon. [eslint]
29: Extra semicolon. [eslint]
30: Strings must use singlequote. [eslint]
30: Extra semicolon. [eslint]
31: Strings must use singlequote. [eslint]
31: Extra semicolon. [eslint]
33: Missing space before opening brace. [eslint]
34: Strings must use singlequote. [eslint]
34: Extra semicolon. [eslint]
35: Strings must use singlequote. [eslint]
35: Extra semicolon. [eslint]
37: Extra semicolon. [eslint]
41: Missing space before function parentheses. [eslint]
41: Missing space before opening brace. [eslint]
42: Extra semicolon. [eslint]
43: Extra semicolon. [eslint]
46: Missing space before function parentheses. [eslint]
46: Missing space before opening brace. [eslint]
47: Extra semicolon. [eslint]
49: Expected space(s) after "if". [eslint]
49: Unary word operator 'typeof' must be followed by whitespace. [eslint]
49: Expected '===' and instead saw '=='. [eslint]
49: Missing space before opening brace. [eslint]
50: Extra semicolon. [eslint]
53: Extra semicolon. [eslint]
54: Infix operators must be spaced. [eslint]
54: Infix operators must be spaced. [eslint]
54: Extra semicolon. [eslint]
56: Extra semicolon. [eslint]
57: Infix operators must be spaced. [eslint]
57: Infix operators must be spaced. [eslint]
57: Extra semicolon. [eslint]
59: Extra semicolon. [eslint]
61-87: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
62: Strings must use singlequote. [eslint]
62: Extra semicolon. [eslint]
64: Missing space before function parentheses. [eslint]
64: Missing space before opening brace. [eslint]
65: Extra semicolon. [eslint]
66: Extra semicolon. [eslint]
69: Strings must use singlequote. [eslint]
69: Missing space before function parentheses. [eslint]
69: Missing space before opening brace. [eslint]
70: Extra semicolon. [eslint]
71: Extra semicolon. [eslint]
72: Extra semicolon. [eslint]
73: Extra semicolon. [eslint]
74: Extra semicolon. [eslint]
77: Missing space before function parentheses. [eslint]
77: Missing space before opening brace. [eslint]
78: Extra semicolon. [eslint]
79: Extra semicolon. [eslint]
81: Extra semicolon. [eslint]
83: Missing space before function parentheses. [eslint]
83: Missing space before opening brace. [eslint]
84: Extra semicolon. [eslint]
85: Extra semicolon. [eslint]
86: Extra semicolon. [eslint]
87: Extra semicolon. [eslint]

== lib/developer_portal/app/assets/javascripts/plans_widget_v2.js (2 issues) ==
9-70: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
72-99: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== lib/developer_portal/app/controllers/developer_portal/access_codes_controller.rb (1 issue) ==
20-21: DeveloperPortal::AccessCodesController#show calls 'params[access_code_param]' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/accounts/invitee_signups_controller.rb (6 issues) ==
1: DeveloperPortal::Accounts::InviteeSignupsController assumes too much for instance variable '@user' [reek]
1: DeveloperPortal::Accounts::InviteeSignupsController assumes too much for instance variable '@invitation' [reek]
17: DeveloperPortal::Accounts::InviteeSignupsController#sso_create has approx 15 statements [reek]
47: DeveloperPortal::Accounts::InviteeSignupsController#create has approx 8 statements [reek]
111: DeveloperPortal::Accounts::InviteeSignupsController has missing safe method 'check_invitation!' [reek]
112-114: DeveloperPortal::Accounts::InviteeSignupsController#check_invitation! calls '@invitation.blank?' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/activations_controller.rb (2 issues) ==
2: DeveloperPortal::ActivationsController assumes too much for instance variable '@user' [reek]
8-25: Method `create` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]

== lib/developer_portal/app/controllers/developer_portal/admin/account/account_plans_controller.rb (1 issue) ==
2: DeveloperPortal::Admin::Account::AccountPlansController assumes too much for instance variable '@plan' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/account/adyen12_controller.rb (3 issues) ==
2: DeveloperPortal::Admin::Account::Adyen12Controller assumes too much for instance variable '@payment_result' [reek]
29: DeveloperPortal::Admin::Account::Adyen12Controller#authorize_recurring_and_store_card_details has the variable name 'e' [reek]
38: DeveloperPortal::Admin::Account::Adyen12Controller#adyen_error_message calls 'gateway_client.authorize_response' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/account/authorize_net_controller.rb (6 issues) ==
2: DeveloperPortal::Admin::Account::AuthorizeNetController assumes too much for instance variable '@payment_result' [reek]
2: DeveloperPortal::Admin::Account::AuthorizeNetController has at least 5 instance variables [reek]
8: DeveloperPortal::Admin::Account::AuthorizeNetController#show has the variable name 'e' [reek]
24: DeveloperPortal::Admin::Account::AuthorizeNetController has missing safe method 'update_user_and_perform_action!' [reek]
50-51: DeveloperPortal::Admin::Account::AuthorizeNetController#assign_token calls 'site_account.payment_gateway.options' 2 times [reek]
50-51: DeveloperPortal::Admin::Account::AuthorizeNetController#assign_token calls 'site_account.payment_gateway' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/account/braintree_blue_controller.rb (5 issues) ==
2: DeveloperPortal::Admin::Account::BraintreeBlueController assumes too much for instance variable '@errors' [reek]
2: DeveloperPortal::Admin::Account::BraintreeBlueController assumes too much for instance variable '@payment_result' [reek]
20: DeveloperPortal::Admin::Account::BraintreeBlueController#hosted_success has approx 8 statements [reek]
23: DeveloperPortal::Admin::Account::BraintreeBlueController#hosted_success performs a nil-check [reek]
35: DeveloperPortal::Admin::Account::BraintreeBlueController has missing safe method 'update_user_and_perform_action!' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/account/invitations_controller.rb (1 issue) ==
2: DeveloperPortal::Admin::Account::InvitationsController assumes too much for instance variable '@invitation' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/account/ogone_controller.rb (2 issues) ==
2: DeveloperPortal::Admin::Account::OgoneController assumes too much for instance variable '@payment_result' [reek]
14-16: DeveloperPortal::Admin::Account::OgoneController#hosted_success calls 'request.params' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/account/passwords_controller.rb (3 issues) ==
3: DeveloperPortal::Admin::Account::PasswordsController assumes too much for instance variable '@provider' [reek]
3: DeveloperPortal::Admin::Account::PasswordsController assumes too much for instance variable '@token' [reek]
3: DeveloperPortal::Admin::Account::PasswordsController assumes too much for instance variable '@user' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/account/payment_details_base_controller.rb (1 issue) ==
1: DeveloperPortal::Admin::Account::PaymentDetailsBaseController assumes too much for instance variable '@payment_result' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/account/personal_details_controller.rb (1 issue) ==
17: DeveloperPortal::Admin::Account::PersonalDetailsController#update has approx 8 statements [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/account/plan_changes_controller.rb (2 issues) ==
41: DeveloperPortal::Admin::Account::PlanChangesController has missing safe method 'remember_plan_change!' [reek]
45: DeveloperPortal::Admin::Account::PlanChangesController has missing safe method 'forget_plan_change!' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/account/stripe_controller.rb (1 issue) ==
2: DeveloperPortal::Admin::Account::StripeController assumes too much for instance variable '@payment_result' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/account/users_controller.rb (3 issues) ==
1: DeveloperPortal::Admin::Account::UsersController assumes too much for instance variable '@user' [reek]
24: DeveloperPortal::Admin::Account::UsersController#update has approx 8 statements [reek]
56-59: DeveloperPortal::Admin::Account::UsersController#update_resource refers to 'user' more than self (maybe move it to another class?) [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/accounts_controller.rb (3 issues) ==
20: DeveloperPortal::Admin::AccountsController#update has approx 11 statements [reek]
26-29: DeveloperPortal::Admin::AccountsController#update calls 'format.html' 2 times [reek]
27-30: DeveloperPortal::Admin::AccountsController#update calls 'format.js' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/applications/access_details_controller.rb (1 issue) ==
1: DeveloperPortal::Admin::Applications::AccessDetailsController assumes too much for instance variable '@cinstance' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/applications/alerts_controller.rb (3 issues) ==
1: DeveloperPortal::Admin::Applications::AlertsController assumes too much for instance variable '@alert' [reek]
1: DeveloperPortal::Admin::Applications::AlertsController assumes too much for instance variable '@alerts' [reek]
1: DeveloperPortal::Admin::Applications::AlertsController assumes too much for instance variable '@cinstance' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/applications/keys_controller.rb (9 issues) ==
1: DeveloperPortal::Admin::Applications::KeysController assumes too much for instance variable '@remove' [reek]
1: DeveloperPortal::Admin::Applications::KeysController has at least 5 instance variables [reek]
1: DeveloperPortal::Admin::Applications::KeysController assumes too much for instance variable '@cinstance' [reek]
1: DeveloperPortal::Admin::Applications::KeysController assumes too much for instance variable '@service' [reek]
1: DeveloperPortal::Admin::Applications::KeysController assumes too much for instance variable '@key' [reek]
10-11: DeveloperPortal::Admin::Applications::KeysController#new refers to 'format' more than self (maybe move it to another class?) [reek]
15: DeveloperPortal::Admin::Applications::KeysController#create has approx 8 statements [reek]
16-26: DeveloperPortal::Admin::Applications::KeysController#create calls '@cinstance.application_keys' 2 times [reek]
34: DeveloperPortal::Admin::Applications::KeysController#destroy has approx 8 statements [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/applications/referrer_filters_controller.rb (8 issues) ==
1: DeveloperPortal::Admin::Applications::ReferrerFiltersController assumes too much for instance variable '@error' [reek]
1: DeveloperPortal::Admin::Applications::ReferrerFiltersController assumes too much for instance variable '@service' [reek]
1: DeveloperPortal::Admin::Applications::ReferrerFiltersController assumes too much for instance variable '@referrer_filter' [reek]
1: DeveloperPortal::Admin::Applications::ReferrerFiltersController assumes too much for instance variable '@cinstance' [reek]
6-25: Method `create` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
6-22: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
10-18: DeveloperPortal::Admin::Applications::ReferrerFiltersController#create calls 'request.xhr?' 2 times [reek]
10-31: DeveloperPortal::Admin::Applications::ReferrerFiltersController tests 'request.xhr?' at least 3 times [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/applications/user_keys_controller.rb (1 issue) ==
1: DeveloperPortal::Admin::Applications::UserKeysController assumes too much for instance variable '@cinstance' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/applications_controller.rb (10 issues) ==
3-180: Class `ApplicationsController` has 21 methods (exceeds 20 allowed). Consider refactoring. [structure]
3: DeveloperPortal::Admin::ApplicationsController has at least 21 methods [reek]
3: DeveloperPortal::Admin::ApplicationsController assumes too much for instance variable '@services' [reek]
56: DeveloperPortal::Admin::ApplicationsController#update has approx 11 statements [reek]
69-73: DeveloperPortal::Admin::ApplicationsController#update calls 'respond_with(application)' 2 times [reek]
69-73: DeveloperPortal::Admin::ApplicationsController#update has the variable name 'f' [reek]
70-74: DeveloperPortal::Admin::ApplicationsController#update calls 'f.js' 2 times [reek]
79: DeveloperPortal::Admin::ApplicationsController#create has approx 8 statements [reek]
82-86: DeveloperPortal::Admin::ApplicationsController#create refers to 'application' more than self (maybe move it to another class?) [reek]
117-119: DeveloperPortal::Admin::ApplicationsController#service calls 'site_account.services' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/contracts/service_plans_controller.rb (1 issue) ==
2: DeveloperPortal::Admin::Contracts::ServicePlansController assumes too much for instance variable '@contract' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/contracts_controller.rb (1 issue) ==
18-20: DeveloperPortal::Admin::ContractsController#redirect_on_plan_changes calls 'admin_application_path(application)' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/messages/inbox_controller.rb (1 issue) ==
1: DeveloperPortal::Admin::Messages::InboxController assumes too much for instance variable '@message' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/messages/outbox_controller.rb (2 issues) ==
2: DeveloperPortal::Admin::Messages::OutboxController assumes too much for instance variable '@message' [reek]
2: DeveloperPortal::Admin::Messages::OutboxController assumes too much for instance variable '@notice' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/messages/trash_controller.rb (1 issue) ==
1: DeveloperPortal::Admin::Messages::TrashController assumes too much for instance variable '@message' [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/plans_widget_controller.rb (6 issues) ==
1: DeveloperPortal::Admin::PlansWidgetController has at least 5 instance variables [reek]
1: DeveloperPortal::Admin::PlansWidgetController assumes too much for instance variable '@application' [reek]
1: DeveloperPortal::Admin::PlansWidgetController assumes too much for instance variable '@plan' [reek]
1: DeveloperPortal::Admin::PlansWidgetController assumes too much for instance variable '@service' [reek]
1: DeveloperPortal::Admin::PlansWidgetController assumes too much for instance variable '@plans' [reek]
6-7: DeveloperPortal::Admin::PlansWidgetController#index calls 'params[:application_id]' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/admin/service_contracts_controller.rb (12 issues) ==
1: DeveloperPortal::Admin::ServiceContractsController has at least 5 instance variables [reek]
1: DeveloperPortal::Admin::ServiceContractsController assumes too much for instance variable '@service_contract' [reek]
1: DeveloperPortal::Admin::ServiceContractsController assumes too much for instance variable '@service' [reek]
1: DeveloperPortal::Admin::ServiceContractsController assumes too much for instance variable '@provider' [reek]
1: DeveloperPortal::Admin::ServiceContractsController assumes too much for instance variable '@plan' [reek]
1: DeveloperPortal::Admin::ServiceContractsController assumes too much for instance variable '@plans' [reek]
27-28: DeveloperPortal::Admin::ServiceContractsController#create calls 'params[:service_contract]' 2 times [reek]
48-65: Method `find_plans` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
59: DeveloperPortal::Admin::ServiceContractsController#find_plans manually dispatches method call [reek]
59-60: DeveloperPortal::Admin::ServiceContractsController#find_plans calls '@plans.default' 2 times [reek]
71-72: DeveloperPortal::Admin::ServiceContractsController#find_service calls 'params[:service_id]' 2 times [reek]
80-81: DeveloperPortal::Admin::ServiceContractsController#find_plan calls 'params[:plan_ids]' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/api_docs/account_data_controller.rb (1 issue) ==
1: DeveloperPortal::ApiDocs::AccountDataController assumes too much for instance variable '@data' [reek]

== lib/developer_portal/app/controllers/developer_portal/buyer/account_contracts_controller.rb (2 issues) ==
1: DeveloperPortal::Buyer::AccountContractsController assumes too much for instance variable '@contract' [reek]
1: DeveloperPortal::Buyer::AccountContractsController assumes too much for instance variable '@plan' [reek]

== lib/developer_portal/app/controllers/developer_portal/buyer/stats_controller.rb (2 issues) ==
47-48: DeveloperPortal::Buyer::StatsController#metrics calls 'application.plan' 2 times [reek]
54-55: DeveloperPortal::Buyer::StatsController#methods calls 'application.plan' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/cms/new_content_controller.rb (2 issues) ==
27: DeveloperPortal::CMS::NewContentController#show has approx 9 statements [reek]
36-40: DeveloperPortal::CMS::NewContentController#show calls 'attachment.content_type' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/login_controller.rb (4 issues) ==
3: DeveloperPortal::LoginController assumes too much for instance variable '@user' [reek]
3: DeveloperPortal::LoginController assumes too much for instance variable '@strategy' [reek]
26-40: Method `create` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
26: DeveloperPortal::LoginController#create has approx 9 statements [reek]

== lib/developer_portal/app/controllers/developer_portal/search_controller.rb (1 issue) ==
8: DeveloperPortal::SearchController#index has approx 9 statements [reek]

== lib/developer_portal/app/controllers/developer_portal/settings_controller.rb (2 issues) ==
3: DeveloperPortal::SettingsController assumes too much for instance variable '@service' [reek]
3: DeveloperPortal::SettingsController assumes too much for instance variable '@settings' [reek]

== lib/developer_portal/app/controllers/developer_portal/signup_controller.rb (14 issues) ==
4: DeveloperPortal::SignupController assumes too much for instance variable '@provider' [reek]
4: DeveloperPortal::SignupController has at least 6 instance variables [reek]
4: DeveloperPortal::SignupController assumes too much for instance variable '@user' [reek]
4: DeveloperPortal::SignupController assumes too much for instance variable '@strategy' [reek]
4: DeveloperPortal::SignupController assumes too much for instance variable '@signup_result' [reek]
4: DeveloperPortal::SignupController assumes too much for instance variable '@buyer' [reek]
4: DeveloperPortal::SignupController assumes too much for instance variable '@plans' [reek]
32-59: Method `create` has a Cognitive Complexity of 13 (exceeds 5 allowed). Consider refactoring. [structure]
32: DeveloperPortal::SignupController#create has approx 11 statements [reek]
47-57: DeveloperPortal::SignupController#create calls 'render :show' 2 times [reek]
54: DeveloperPortal::SignupController#create calls 'Rails.env' 2 times [reek]
70: DeveloperPortal::SignupController has missing safe method 'signup_user!' [reek]
133-134: DeveloperPortal::SignupController#convert_legacy_params calls 'params[:plans]' 2 times [reek]
134: DeveloperPortal::SignupController#convert_legacy_params calls 'params[type]' 2 times [reek]

== lib/developer_portal/app/controllers/developer_portal/swagger/spec_controller.rb (4 issues) ==
29-30: DeveloperPortal::Swagger::SpecController#show calls 'active_doc.specification' 2 times [reek]
44-45: DeveloperPortal::Swagger::SpecController#swagger_spec_for refers to 'service' more than self (maybe move it to another class?) [reek]
44: DeveloperPortal::Swagger::SpecController#swagger_spec_for calls 'service.description' 2 times [reek]
44: DeveloperPortal::Swagger::SpecController#swagger_spec_for performs a nil-check [reek]

== lib/developer_portal/app/mailers/invitation_mailer.rb (7 issues) ==
1: InvitationMailer assumes too much for instance variable '@invitation' [reek]
1: InvitationMailer assumes too much for instance variable '@url' [reek]
1: InvitationMailer assumes too much for instance variable '@name' [reek]
7: InvitationMailer#invitation has approx 10 statements [reek]
11-34: InvitationMailer#invitation calls 'from_address(@invitation)' 2 times [reek]
14-32: InvitationMailer#invitation calls '@invitation.account.org_name' 2 times [reek]
14-32: InvitationMailer#invitation calls '@invitation.account' 6 times [reek]

== lib/developer_portal/app/mailers/user_mailer.rb (14 issues) ==
8-40: Method `signup_notification` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
8-40: Method `signup_notification` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8: UserMailer#signup_notification has approx 8 statements [reek]
9-30: UserMailer#signup_notification calls 'user.account' 5 times [reek]
9-30: UserMailer#signup_notification calls 'user.account.provider_account' 2 times [reek]
11-19: UserMailer#signup_notification calls 'user.account.provider?' 2 times [reek]
11-28: UserMailer#signup_notification calls 'account_name(user)' 2 times [reek]
14-38: UserMailer#signup_notification calls 'from_address(user)' 2 times [reek]
18-22: UserMailer#signup_notification calls 'user.activation_code' 3 times [reek]
20-27: UserMailer#signup_notification calls 'domain(user)' 3 times [reek]
44-54: UserMailer#lost_password calls 'user.account' 2 times [reek]
49-69: UserMailer#lost_password calls 'from_address(user)' 2 times [reek]
55-57: UserMailer#lost_password calls 'user.lost_password_token' 2 times [reek]
55-62: UserMailer#lost_password calls 'domain(user)' 3 times [reek]

== lib/developer_portal/lib/access_code_protection.rb (1 issue) ==
29: AccessCodeProtection#access_code_valid? calls 'request.format' 2 times [reek]

== lib/developer_portal/lib/cms/handler/base.rb (1 issue) ==
13: CMS::Handler::Base#convert has unused parameter 'markup' [reek]

== lib/developer_portal/lib/cms/handler/markdown.rb (1 issue) ==
11: CMS::Handler::Markdown#convert doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/cms/handler/textile.rb (1 issue) ==
6: CMS::Handler::Textile#convert doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/cms/renderer.rb (2 issues) ==
41-51: CMS::Renderer#parse refers to 'record' more than self (maybe move it to another class?) [reek]
65: CMS::Renderer#raise_exceptions? calls 'Rails.env' 2 times [reek]

== lib/developer_portal/lib/cms/toolbar.rb (11 issues) ==
15: CMS::Toolbar::Renderer assumes too much for instance variable '@layout' [reek]
15: CMS::Toolbar::Renderer assumes too much for instance variable '@page' [reek]
17: CMS::Toolbar::Renderer#layout is a writable attribute [reek]
45: CMS::Toolbar::Renderer#assigns has the variable name 't' [reek]
59-63: CMS::Toolbar#handle_cms_token calls 'Rails.logger' 2 times [reek]
73-85: Method `cms_toolbar_enabled?` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring. [structure]
73: CMS::Toolbar#cms_toolbar_enabled? has approx 8 statements [reek]
77: CMS::Toolbar#cms_toolbar_enabled? performs a nil-check [reek]
77: CMS::Toolbar#cms_toolbar_enabled? calls 'response.content_type' 2 times [reek]
82: Avoid too many `return` statements within this method. [structure]
84: Avoid too many `return` statements within this method. [structure]

== lib/developer_portal/lib/developer_portal/controller_methods/plan_changes_methods.rb (1 issue) ==
33-35: DeveloperPortal::ControllerMethods::PlanChangesMethods::PlanChangesStore#save calls 'session[:plan_changes]' 2 times [reek]

== lib/developer_portal/lib/liquid/assigns.rb (11 issues) ==
8-48: Method `assign_drops` has a Cognitive Complexity of 21 (exceeds 5 allowed). Consider refactoring. [structure]
8-48: Method `assign_drops` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8: Liquid::Assigns#assign_drops has approx 13 statements [reek]
12-38: Liquid::Assigns#assign_drops refers to 'drop' more than self (maybe move it to another class?) [reek]
12: Liquid::Assigns#assign_drops performs a nil-check [reek]
14-23: Liquid::Assigns#assign_drops manually dispatches method call [reek]
14-23: Liquid::Assigns#assign_drops calls 'drop.respond_to?(:to_liquid)' 2 times [reek]
22-38: Liquid::Assigns#assign_drops calls 'drop.class' 3 times [reek]
24-35: Liquid::Assigns#assign_drops calls 'assigns[name] = drop' 2 times [reek]
25-27: Liquid::Assigns#assign_drops calls 'Rails.logger' 2 times [reek]
25-27: Liquid::Assigns#assign_drops calls 'drop.inspect' 2 times [reek]

== lib/developer_portal/lib/liquid/docs.rb (3 issues) ==
31: Liquid::Docs::Lines#to_markdown refers to 'item' more than self (maybe move it to another class?) [reek]
31: Liquid::Docs::Lines#to_markdown manually dispatches method call [reek]
35: Liquid::Docs::Text inherits from core class 'String' [reek]

== lib/developer_portal/lib/liquid/docs/dsl.rb (2 issues) ==
30: Liquid::Docs::DSL#nodoc! manually dispatches method call [reek]
156: Liquid::Docs::DSL#last refers to 'values' more than self (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/docs/dsl/base.rb (4 issues) ==
17-20: Liquid::Docs::DSL::Base::Example#initialize calls 'args.length' 2 times [reek]
18-22: Liquid::Docs::DSL::Base::Example#initialize calls 'args.first' 2 times [reek]
43: Liquid::Docs::DSL::Base#deprecated has unused parameter 'message' [reek]
65: Liquid::Docs::DSL::Base#method_added manually dispatches method call [reek]

== lib/developer_portal/lib/liquid/docs/dsl/drops.rb (3 issues) ==
29: Liquid::Docs::DSL::Drops::Documentation#add_method has the variable name 'm' [reek]
29: Liquid::Docs::DSL::Drops::Documentation#add_method has the variable name 'i' [reek]
30-32: Liquid::Docs::DSL::Drops::Documentation#add_method calls 'self.methods' 2 times [reek]

== lib/developer_portal/lib/liquid/docs/dsl/tags.rb (1 issue) ==
24: Liquid::Docs::DSL::Tags::Documentation#to_markdown has the variable name 'e' [reek]

== lib/developer_portal/lib/liquid/docs/generator.rb (7 issues) ==
13: Liquid::Docs::Generator#to_html has approx 10 statements [reek]
22-39: Liquid::Docs::Generator#to_html calls 'toc.level' 2 times [reek]
22-40: Liquid::Docs::Generator#to_html refers to 'toc' more than self (maybe move it to another class?) [reek]
23: Liquid::Docs::Generator#to_html contains iterators nested 2 deep [reek]
23: Liquid::Docs::Generator#to_html has the variable name 't' [reek]
34-40: Liquid::Docs::Generator#to_html calls 'toc.parent_header' 2 times [reek]
48: Liquid::Docs::Generator#<< manually dispatches method call [reek]

== lib/developer_portal/lib/liquid/docs/registration.rb (1 issue) ==
30: Liquid::Docs::Registration#registered is a writable attribute [reek]

== lib/developer_portal/lib/liquid/drops.rb (1 issue) ==
5: Liquid::Drops#documentation doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/drops/account.rb (10 issues) ==
1-338: File `account.rb` has 271 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
3-336: Class `Account` has 45 methods (exceeds 20 allowed). Consider refactoring. [structure]
3: Liquid::Drops::Account assumes too much for instance variable '@unread_messages' [reek]
3: Liquid::Drops::Account assumes too much for instance variable '@model' [reek]
3: Liquid::Drops::Account assumes too much for instance variable '@latest_messages' [reek]
3: Liquid::Drops::Account has at least 45 methods [reek]
202-203: Liquid::Drops::Account#extra_fields_plain_text calls '@model.extra_fields' 2 times [reek]
204-205: Liquid::Drops::Account#extra_fields_plain_text calls '@model.field(name)' 2 times [reek]
217-218: Liquid::Drops::Account#fields_plain_text calls '@model.defined_fields' 2 times [reek]
219-220: Liquid::Drops::Account#fields_plain_text calls 'field.name' 3 times [reek]

== lib/developer_portal/lib/liquid/drops/account_plan.rb (2 issues) ==
3: Liquid::Drops::AccountPlan assumes too much for instance variable '@plan' [reek]
18-19: Liquid::Drops::AccountPlan#setup_fee calls '@plan.setup_fee' 2 times [reek]

== lib/developer_portal/lib/liquid/drops/alert.rb (1 issue) ==
3: Liquid::Drops::Alert assumes too much for instance variable '@model' [reek]

== lib/developer_portal/lib/liquid/drops/application.rb (4 issues) ==
3-297: Class `Application` has 40 methods (exceeds 20 allowed). Consider refactoring. [structure]
3: Liquid::Drops::Application assumes too much for instance variable '@contract' [reek]
3: Liquid::Drops::Application assumes too much for instance variable '@model' [reek]
3: Liquid::Drops::Application has at least 40 methods [reek]

== lib/developer_portal/lib/liquid/drops/application_key.rb (1 issue) ==
2-24: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== lib/developer_portal/lib/liquid/drops/application_plan.rb (1 issue) ==
3: Liquid::Drops::ApplicationPlan assumes too much for instance variable '@plan' [reek]

== lib/developer_portal/lib/liquid/drops/base.rb (2 issues) ==
24-26: Liquid::Drops::Base::ModuleProxy#include calls '@base.instance_methods' 2 times [reek]
52: Liquid::Drops::Base#wrap manually dispatches method call [reek]

== lib/developer_portal/lib/liquid/drops/billing_address.rb (6 issues) ==
11: Liquid::Drops::BillingAddress#address1 has the name 'address1' [reek]
15: Liquid::Drops::BillingAddress#address2 has the name 'address2' [reek]
32-35: Liquid::Drops::BillingAddress#country calls '@account.billing_address' 2 times [reek]
32: Liquid::Drops::BillingAddress#country has the variable name 'c' [reek]
32-35: Liquid::Drops::BillingAddress#country calls '@account.billing_address.country' 2 times [reek]
49-56: Liquid::Drops::BillingAddress#fields calls '@account.billing_address' 8 times [reek]

== lib/developer_portal/lib/liquid/drops/billing_address_field.rb (1 issue) ==
21: Liquid::Drops::BillingAddressField#choices refers to 'country' more than self (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/drops/buyer.rb (1 issue) ==
8: Liquid::Drops::Buyer#initialize has unused parameter 'options' [reek]

== lib/developer_portal/lib/liquid/drops/collection.rb (10 issues) ==
8: Liquid::Drops::Collection inherits from core class 'Array' [reek]
13-15: Liquid::Drops::Collection#initialize calls 'self.class' 2 times [reek]
13-15: Liquid::Drops::Collection#initialize calls 'self.class.drop' 2 times [reek]
26: Liquid::Drops::Collection#[] has the variable name 'o' [reek]
26: Liquid::Drops::Collection#[] manually dispatches method call [reek]
26: Liquid::Drops::Collection#[] is controlled by argument 'key' [reek]
30: Liquid::Drops::Collection#has_key? manually dispatches method call [reek]
30: Liquid::Drops::Collection#has_key? has the variable name 'o' [reek]
30: Liquid::Drops::Collection#has_key? refers to 'o' more than self (maybe move it to another class?) [reek]
35-51: Liquid::Drops::Collection tests 'drop' at least 3 times [reek]

== lib/developer_portal/lib/liquid/drops/content_of.rb (1 issue) ==
3: Liquid::Drops::ContentOf assumes too much for instance variable '@context' [reek]

== lib/developer_portal/lib/liquid/drops/country.rb (1 issue) ==
3: Liquid::Drops::Country assumes too much for instance variable '@model' [reek]

== lib/developer_portal/lib/liquid/drops/country_field.rb (3 issues) ==
3: Liquid::Drops::CountryField assumes too much for instance variable '@object' [reek]
10: Liquid::Drops::CountryField#choices refers to 'c' more than self (maybe move it to another class?) [reek]
10: Liquid::Drops::CountryField#choices has the variable name 'c' [reek]

== lib/developer_portal/lib/liquid/drops/current_user.rb (1 issue) ==
5: Liquid::Drops::CurrentUser assumes too much for instance variable '@user' [reek]

== lib/developer_portal/lib/liquid/drops/deprecated.rb (5 issues) ==
28: Liquid::Drops::Deprecated has the variable name 'm' [reek]
37-38: Liquid::Drops::Deprecated::DeprecationError#initialize refers to 'args' more than self (maybe move it to another class?) [reek]
57: Liquid::Drops::Deprecated#method_missing manually dispatches method call [reek]
74: Liquid::Drops::Deprecated#notify? doesn't depend on instance state (maybe move it to another class?) [reek]
97: Liquid::Drops::Deprecated#allowed_name? has unused parameter 'name' [reek]

== lib/developer_portal/lib/liquid/drops/field.rb (3 issues) ==
17: Liquid::Drops::Field#value manually dispatches method call [reek]
122: Liquid::Drops::Field#choices has the variable name 'c' [reek]
126: Liquid::Drops::Field#== is controlled by argument 'other' [reek]

== lib/developer_portal/lib/liquid/drops/fields.rb (3 issues) ==
15: Liquid::Drops::Fields#self.builtin_fields has the variable name 'f' [reek]
23: Liquid::Drops::Fields#self.extra_fields has the variable name 'f' [reek]
36-39: Liquid::Drops::Fields#drops calls 'field.name' 4 times [reek]

== lib/developer_portal/lib/liquid/drops/forum.rb (1 issue) ==
3: Liquid::Drops::Forum assumes too much for instance variable '@latest' [reek]

== lib/developer_portal/lib/liquid/drops/i18n.rb (1 issue) ==
45: Liquid::Drops::I18n#default_time doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/drops/invitation.rb (2 issues) ==
63: Liquid::Drops::Invitation#sent_at calls '@invitation.sent_at' 2 times [reek]
63: Liquid::Drops::Invitation#sent_at performs a nil-check [reek]

== lib/developer_portal/lib/liquid/drops/invoice.rb (2 issues) ==
3-180: Class `Invoice` has 24 methods (exceeds 20 allowed). Consider refactoring. [structure]
3: Liquid::Drops::Invoice has at least 24 methods [reek]

== lib/developer_portal/lib/liquid/drops/message.rb (3 issues) ==
4: Liquid::Drops::Message assumes too much for instance variable '@model' [reek]
34-39: Liquid::Drops::Message#url calls '@model.id' 3 times [reek]
61-64: Liquid::Drops::Message#recipients calls '@model.recipients' 2 times [reek]

== lib/developer_portal/lib/liquid/drops/new_signup.rb (1 issue) ==
42: Liquid::Drops::NewSignup#services has the variable name 's' [reek]

== lib/developer_portal/lib/liquid/drops/pagination.rb (9 issues) ==
109: Liquid::Drops::Pagination::PartsRenderer assumes too much for instance variable '@collection' [reek]
138: Liquid::Drops::Pagination::PartsRenderer#make_url manually dispatches method call [reek]
138: Liquid::Drops::Pagination::PartsRenderer#make_url refers to 'params' more than self (maybe move it to another class?) [reek]
148-149: Liquid::Drops::Pagination::PartsRenderer#previous_page calls '@collection.current_page - 1' 2 times [reek]
148-149: Liquid::Drops::Pagination::PartsRenderer#previous_page calls '@collection.current_page' 3 times [reek]
157-158: Liquid::Drops::Pagination::PartsRenderer#next_page calls '@collection.current_page + 1' 2 times [reek]
157-158: Liquid::Drops::Pagination::PartsRenderer#next_page calls '@collection.current_page' 3 times [reek]
172-174: Liquid::Drops::Pagination::PartsRenderer#page_number calls '@items.current_page' 3 times [reek]
185: Liquid::Drops::Part assumes too much for instance variable '@current' [reek]

== lib/developer_portal/lib/liquid/drops/plan.rb (2 issues) ==
3: Liquid::Drops::Plan has at least 16 methods [reek]
141-142: Liquid::Drops::Plan#flat_cost calls '@plan.cost_per_month' 2 times [reek]

== lib/developer_portal/lib/liquid/drops/post.rb (1 issue) ==
3: Liquid::Drops::Post assumes too much for instance variable '@model' [reek]

== lib/developer_portal/lib/liquid/drops/provider.rb (2 issues) ==
5-226: Class `Provider` has 24 methods (exceeds 20 allowed). Consider refactoring. [structure]
5: Liquid::Drops::Provider has at least 24 methods [reek]

== lib/developer_portal/lib/liquid/drops/referrer_filter.rb (1 issue) ==
2-24: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== lib/developer_portal/lib/liquid/drops/search.rb (4 issues) ==
77: Liquid::Drops::Search::Result::Base#highlight is controlled by argument 'object' [reek]
81: Liquid::Drops::Search::Result::Post assumes too much for instance variable '@result' [reek]
99: Liquid::Drops::Search::Result::Topic assumes too much for instance variable '@result' [reek]
118: Liquid::Drops::Search::Result::Page assumes too much for instance variable '@result' [reek]

== lib/developer_portal/lib/liquid/drops/service.rb (2 issues) ==
3-213: Class `Service` has 21 methods (exceeds 20 allowed). Consider refactoring. [structure]
3: Liquid::Drops::Service has at least 21 methods [reek]

== lib/developer_portal/lib/liquid/drops/service_contract.rb (2 issues) ==
3: Liquid::Drops::ServiceContract assumes too much for instance variable '@model' [reek]
30: Liquid::Drops::ServiceContract#service has the variable name 's' [reek]

== lib/developer_portal/lib/liquid/drops/service_plan.rb (1 issue) ==
3: Liquid::Drops::ServicePlan assumes too much for instance variable '@plan' [reek]

== lib/developer_portal/lib/liquid/drops/topic.rb (1 issue) ==
3: Liquid::Drops::Topic assumes too much for instance variable '@model' [reek]

== lib/developer_portal/lib/liquid/drops/urls.rb (3 issues) ==
7-199: Class `Urls` has 33 methods (exceeds 20 allowed). Consider refactoring. [structure]
7: Liquid::Drops::Urls assumes too much for instance variable '@strategy' [reek]
7: Liquid::Drops::Urls has at least 33 methods [reek]

== lib/developer_portal/lib/liquid/drops/user.rb (5 issues) ==
5-268: Class `User` has 24 methods (exceeds 20 allowed). Consider refactoring. [structure]
5: Liquid::Drops::User has at least 24 methods [reek]
5: Liquid::Drops::User assumes too much for instance variable '@model' [reek]
170: Liquid::Drops::User#roles_collection doesn't depend on instance state (maybe move it to another class?) [reek]
177: Liquid::Drops::User#roles_collection calls '::User.current' 2 times [reek]

== lib/developer_portal/lib/liquid/filters/form_helpers.rb (2 issues) ==
13: Liquid::Filters::FormHelpers#error_class doesn't depend on instance state (maybe move it to another class?) [reek]
25: Liquid::Filters::FormHelpers#inline_errors refers to 'error' more than self (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/filters/google_analytics.rb (1 issue) ==
6: Liquid::Filters::GoogleAnalytics#embed_google_tracker doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/filters/param_filter.rb (4 issues) ==
17-22: Liquid::Filters::ParamFilter#to_param refers to 'drop' more than self (maybe move it to another class?) [reek]
18-20: Liquid::Filters::ParamFilter#to_param calls 'drop.id' 2 times [reek]
21: Liquid::Filters::ParamFilter#to_param manually dispatches method call [reek]
22: Liquid::Filters::ParamFilter#to_param has the variable name 'd' [reek]

== lib/developer_portal/lib/liquid/filters/rails_helpers.rb (9 issues) ==
27: Liquid::Filters::RailsHelpers#group_by doesn't depend on instance state (maybe move it to another class?) [reek]
80: Liquid::Filters::RailsHelpers#mail_to doesn't depend on instance state (maybe move it to another class?) [reek]
85: Liquid::Filters::RailsHelpers#html_safe doesn't depend on instance state (maybe move it to another class?) [reek]
86: Liquid::Filters::RailsHelpers#html_safe manually dispatches method call [reek]
94: Liquid::Filters::RailsHelpers#pluralize doesn't depend on instance state (maybe move it to another class?) [reek]
110-191: Liquid::Filters::RailsHelpers takes parameters ['html_options', 'title', 'url'] to 6 methods [reek]
110-268: Liquid::Filters::RailsHelpers takes parameters ['title', 'url'] to 8 methods [reek]
205: Liquid::Filters::RailsHelpers#link_to doesn't depend on instance state (maybe move it to another class?) [reek]
268: Liquid::Filters::RailsHelpers#button has 4 parameters [reek]

== lib/developer_portal/lib/liquid/forms.rb (3 issues) ==
16-38: Method `find_class_by_name` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
16: Liquid::Forms#self.find_class_by_name has approx 10 statements [reek]
33-37: Liquid::Forms#self.find_class_by_name calls 'raise NotFoundError, "Unknown form '#{form_name}'"' 2 times [reek]

== lib/developer_portal/lib/liquid/forms/application.rb (2 issues) ==
9: Liquid::Forms::Application::Create#object_param_name has unused parameter 'model' [reek]
27: Liquid::Forms::Application::Update#object_param_name has unused parameter 'model' [reek]

== lib/developer_portal/lib/liquid/forms/base.rb (1 issue) ==
40: Liquid::Forms::Base#object_param_name doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/forms/contract.rb (1 issue) ==
7: Liquid::Forms::Contract::Create assumes too much for instance variable '@object' [reek]

== lib/developer_portal/lib/liquid/forms/signup.rb (2 issues) ==
3: Liquid::Forms::Signup assumes too much for instance variable '@context' [reek]
10: Liquid::Forms::Signup#object_param_name is controlled by argument 'model' [reek]

== lib/developer_portal/lib/liquid/forms/user.rb (1 issue) ==
36: Liquid::Forms::User::PersonalDetails#origin_tag calls 'controller.params' 2 times [reek]

== lib/developer_portal/lib/liquid/tags.rb (1 issue) ==
6: Liquid::Tags#register doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/active_docs.rb (3 issues) ==
17: Liquid::Tags::ActiveDocs#initialize is controlled by argument 'params' [reek]
19: Liquid::Tags::ActiveDocs#initialize performs a nil-check [reek]
28: Liquid::Tags::ActiveDocs#render has the variable name 'e' [reek]

== lib/developer_portal/lib/liquid/tags/adyen12_form.rb (1 issue) ==
4: Liquid::Tags::Adyen12Form assumes too much for instance variable '@text' [reek]

== lib/developer_portal/lib/liquid/tags/authorize_net_form.rb (1 issue) ==
4: Liquid::Tags::AuthorizeNetForm assumes too much for instance variable '@text' [reek]

== lib/developer_portal/lib/liquid/tags/base.rb (4 issues) ==
20: Liquid::Tags::Base#surround_by_comments has 4 parameters [reek]
21: Liquid::Tags::Base#surround_by_comments calls 'page(ctx)' 2 times [reek]
36-39: Liquid::Tags::Base#render_rails refers to 'context' more than self (maybe move it to another class?) [reek]
36-39: Liquid::Tags::Base#render_rails calls 'context.registers' 2 times [reek]

== lib/developer_portal/lib/liquid/tags/common.rb (2 issues) ==
8-9: Liquid::Tags::Common#flash calls 'controller.flash' 2 times [reek]
8-9: Liquid::Tags::Common#flash refers to 'controller' more than self (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/container.rb (1 issue) ==
24: Liquid::Tags::Container#initialize calls 'markup.strip' 2 times [reek]

== lib/developer_portal/lib/liquid/tags/content.rb (1 issue) ==
10: Liquid::Tags::Content#render refers to 'context' more than self (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/content_for.rb (3 issues) ==
9: Liquid::Tags::ContentFor#initialize is controlled by argument 'markup' [reek]
26: Liquid::Tags::ContentFor::ContentFor#stylesheets doesn't depend on instance state (maybe move it to another class?) [reek]
30: Liquid::Tags::ContentFor::ContentFor#javascripts doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/csrf.rb (1 issue) ==
14: Liquid::Tags::CSRF#render doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/debug.rb (12 issues) ==
31-37: Liquid::Tags::Debug#render_help refers to 'output' more than self (maybe move it to another class?) [reek]
32-36: Liquid::Tags::Debug#render_help calls 'output << "    ================================"' 2 times [reek]
42-69: Method `help` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
42: Liquid::Tags::Debug#help doesn't depend on instance state (maybe move it to another class?) [reek]
42: Liquid::Tags::Debug#help has approx 12 statements [reek]
44-61: Liquid::Tags::Debug#help calls 'assigns.map' 2 times [reek]
46: Liquid::Tags::Debug#help manually dispatches method call [reek]
58-65: Liquid::Tags::Debug#help calls 'value[:label]' 2 times [reek]
71: Liquid::Tags::Debug#assigns doesn't depend on instance state (maybe move it to another class?) [reek]
75: Liquid::Tags::Debug#assigns contains iterators nested 2 deep [reek]
77: Liquid::Tags::Debug#assigns manually dispatches method call [reek]
85: Liquid::Tags::Debug#html_comment doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/email.rb (26 issues) ==
2: Liquid::Tags::Email assumes too much for instance variable '@from' [reek]
2: Liquid::Tags::Email assumes too much for instance variable '@reply_to' [reek]
2: Liquid::Tags::Email assumes too much for instance variable '@do_not_send' [reek]
2: Liquid::Tags::Email assumes too much for instance variable '@cc' [reek]
2: Liquid::Tags::Email assumes too much for instance variable '@bcc' [reek]
2: Liquid::Tags::Email has at least 7 instance variables [reek]
2: Liquid::Tags::Email assumes too much for instance variable '@subject' [reek]
54: Liquid::Tags::Email#headers is a writable attribute [reek]
62-63: Liquid::Tags::Email#render calls 'context.registers' 2 times [reek]
73: Liquid::Tags::Email#unknown_tag has approx 8 statements [reek]
77-74: Liquid::Tags::Email#unknown_tag is controlled by argument 'name' [reek]
81-91: Liquid::Tags::Email#unknown_tag calls 'unquote($2)' 4 times [reek]
85-87: Liquid::Tags::Email#unknown_tag calls 'params.scan(AssignSyntax)' 2 times [reek]
85-87: Liquid::Tags::Email#unknown_tag calls 'unquote_array( params.scan(AssignSyntax) )' 2 times [reek]
100: Liquid::Tags::Email#unquote is controlled by argument 'content' [reek]
105: Liquid::Tags::Email#unquote_array manually dispatches method call [reek]
105: Liquid::Tags::Email#unquote_array has the variable name 'v' [reek]
109-137: Liquid::Tags::Email tests '@subject' at least 3 times [reek]
111-138: Liquid::Tags::Email tests '@bcc' at least 3 times [reek]
112-139: Liquid::Tags::Email tests '@cc' at least 3 times [reek]
114-140: Liquid::Tags::Email tests '@from' at least 3 times [reek]
115-141: Liquid::Tags::Email tests '@reply_to' at least 3 times [reek]
119: Liquid::Tags::Email#assign_to_message has approx 8 statements [reek]
119-133: Method `assign_to_message` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
122-131: Liquid::Tags::Email#assign_to_message calls 'message.headers' 6 times [reek]
136-146: Method `assign_to_mail` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]

== lib/developer_portal/lib/liquid/tags/footer.rb (1 issue) ==
8: Liquid::Tags::Footer#render doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/form.rb (5 issues) ==
3: Liquid::Tags::Form assumes too much for instance variable '@nodelist' [reek]
94-114: Method `initialize` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring. [structure]
120: Liquid::Tags::Form#render has approx 8 statements [reek]
122: Liquid::Tags::Form#render has the variable name 'k' [reek]
122: Liquid::Tags::Form#render has the variable name 'v' [reek]

== lib/developer_portal/lib/liquid/tags/include_with_comments.rb (2 issues) ==
4: Liquid::Tags::IncludeWithComments assumes too much for instance variable '@template_name' [reek]
31-32: Liquid::Tags::IncludeWithComments#render calls 'context.registers' 2 times [reek]

== lib/developer_portal/lib/liquid/tags/internal_error.rb (1 issue) ==
9: Liquid::Tags::InternalError#render doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/menu.rb (1 issue) ==
5: Liquid::Tags::Menu#render doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/ogone_form.rb (1 issue) ==
4: Liquid::Tags::OgoneForm assumes too much for instance variable '@text' [reek]

== lib/developer_portal/lib/liquid/tags/page_section.rb (1 issue) ==
14: Liquid::Tags::PageSection#render doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/page_sub_section.rb (1 issue) ==
16: Liquid::Tags::PageSubSection#render doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/payment_gateway_base_form.rb (1 issue) ==
7: Liquid::Tags::PaymentGatewayBaseForm#initialize refers to 'text' more than self (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/tags/plan_widget.rb (4 issues) ==
3: Liquid::Tags::PlanWidget assumes too much for instance variable '@wizard' [reek]
3: Liquid::Tags::PlanWidget assumes too much for instance variable '@variable_name' [reek]
47-48: Liquid::Tags::PlanWidget#parse_variables calls 'Regexp.last_match[1]' 2 times [reek]
47-48: Liquid::Tags::PlanWidget#parse_variables calls 'Regexp.last_match' 3 times [reek]

== lib/developer_portal/lib/liquid/tags/portlet.rb (1 issue) ==
11: Liquid::Tags::Portlet#initialize calls 'markup.strip' 2 times [reek]

== lib/developer_portal/lib/liquid/tags/sort_link.rb (2 issues) ==
25: Liquid::Tags::SortLink#initialize is controlled by argument 'params' [reek]
38: Liquid::Tags::SortLink#render manually dispatches method call [reek]

== lib/developer_portal/lib/liquid/tags/stripe_form.rb (1 issue) ==
4: Liquid::Tags::StripeForm assumes too much for instance variable '@text' [reek]

== lib/developer_portal/lib/liquid/tags/theme_stylesheet.rb (1 issue) ==
8: Liquid::Tags::ThemeStylesheet#render doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/template/fallback_resolver.rb (6 issues) ==
9: Method `find_templates` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
9: Liquid::Template::FallbackResolver#find_templates has 5 parameters [reek]
9: Liquid::Template::FallbackResolver#find_templates has boolean parameter 'outside_app_allowed' [reek]
34: Liquid::Template::FallbackResolverNoPrefix#find_templates has boolean parameter 'outside_app_allowed' [reek]
34: Method `find_templates` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
34: Liquid::Template::FallbackResolverNoPrefix#find_templates has 5 parameters [reek]

== lib/developer_portal/lib/liquid/template/handler.rb (2 issues) ==
12: Liquid::Template::Handler#render has approx 8 statements [reek]
13-15: Liquid::Template::Handler#render calls '@view.controller' 2 times [reek]

== lib/developer_portal/lib/liquid/template/resolver.rb (5 issues) ==
5: Liquid::Template::Resolver#cms is a writable attribute [reek]
15-17: Liquid::Template::Resolver declares the class variable '@@cache' [reek]
25: Liquid::Template::Resolver#find_templates has boolean parameter '_outside_app_allowed' [reek]
25: Method `find_templates` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
25: Liquid::Template::Resolver#find_templates has 5 parameters [reek]

== lib/developer_portal/lib/liquid/template/view.rb (2 issues) ==
40-41: Liquid::Template::View#render calls 'view.controller' 2 times [reek]
40: Liquid::Template::View#render manually dispatches method call [reek]

== lib/developer_portal/lib/liquid/template/without_liquid_resolver.rb (1 issue) ==
11: Liquid::Template::WithoutLiquidResolver#build_query refers to 'details' more than self (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/url_helper_hacks.rb (2 issues) ==
10-12: Liquid::UrlHelperHacks#current_page? calls 'request.request_uri' 2 times [reek]
10-16: Liquid::UrlHelperHacks#current_page? refers to 'request' more than self (maybe move it to another class?) [reek]

== lib/developer_portal/lib/liquid/wrapper.rb (1 issue) ==
38: Liquid::Wrapper#selected? calls 'plan.id' 2 times [reek]

== lib/developer_portal/lib/liquid/xss_protection.rb (3 issues) ==
18-32: Method `render` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
22: Liquid::XssProtection#self.enable! manually dispatches method call [reek]
22: Liquid::XssProtection#self.enable!#render manually dispatches method call [reek]

== lib/developer_portal/test/dummy/app/assets/javascripts/application.js (3 issues) ==
13: Expected space or tab after '//' in comment. [eslint]
14: Expected space or tab after '//' in comment. [eslint]
15: Expected space or tab after '//' in comment. [eslint]

== lib/exception_reporting.rb (2 issues) ==
3: Kernel#report_and_supress_exceptions doesn't depend on instance state (maybe move it to another class?) [reek]
4: Kernel#report_and_supress_exceptions calls 'Rails.env' 2 times [reek]

== lib/gitlab/testing/request_blocker_middleware.rb (4 issues) ==
36-98: Gitlab::Testing::RequestBlockerMiddleware declares the class variable '@@num_active_requests' [reek]
37-82: Gitlab::Testing::RequestBlockerMiddleware declares the class variable '@@block_requests' [reek]
38-86: Gitlab::Testing::RequestBlockerMiddleware declares the class variable '@@slow_requests' [reek]
89: Gitlab::Testing::RequestBlockerMiddleware#block_request has unused parameter 'env' [reek]

== lib/gitlab/testing/request_inspector_middleware.rb (10 issues) ==
36-61: Gitlab::Testing::RequestInspectorMiddleware declares the class variable '@@log_requests' [reek]
37-101: Gitlab::Testing::RequestInspectorMiddleware declares the class variable '@@logged_requests' [reek]
38-64: Gitlab::Testing::RequestInspectorMiddleware declares the class variable '@@inject_headers' [reek]
60: Gitlab::Testing::RequestInspectorMiddleware#call has approx 11 statements [reek]
61-66: Gitlab::Testing::RequestInspectorMiddleware#call calls '@app.call(env)' 2 times [reek]
69: Gitlab::Testing::RequestInspectorMiddleware#call has the variable name 'b' [reek]
86-88: Gitlab::Testing::RequestInspectorMiddleware#env_http_headers has the variable name 'k' [reek]
86-88: Gitlab::Testing::RequestInspectorMiddleware#env_http_headers has the variable name 'v' [reek]
95-96: Gitlab::Testing::RequestInspectorMiddleware#http_headers_env has the variable name 'k' [reek]
95-96: Gitlab::Testing::RequestInspectorMiddleware#http_headers_env has the variable name 'v' [reek]

== lib/migration/finance.rb (10 issues) ==
6-53: Method `freeze_closed_invoices_raw` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
49-52: Migration::Finance#self.freeze_closed_invoices_raw calls 'Invoice.connection' 2 times [reek]
59-118: Method `freeze_closed_invoices` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
59: Migration::Finance#self.freeze_closed_invoices has approx 38 statements [reek]
59-118: Method `freeze_closed_invoices` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
68-80: Migration::Finance#self.freeze_closed_invoices calls 'invoice.provider' 2 times [reek]
71-106: Migration::Finance#self.freeze_closed_invoices calls 'invoice.id' 2 times [reek]
77-103: Migration::Finance#self.freeze_closed_invoices calls 'invoice.vat_rate = buyer.vat_rate' 2 times [reek]
77-103: Migration::Finance#self.freeze_closed_invoices calls 'buyer.vat_rate' 2 times [reek]
105: Migration::Finance#self.freeze_closed_invoices has the variable name 'e' [reek]

== lib/progress_counter.rb (1 issue) ==
9: ProgressCounter#initialize has the variable name 'e' [reek]

== lib/system/database.rb (8 issues) ==
44: Possible SQL injection [brakeman]
88-109: Method `ready?` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
88: System::Database#ready? has approx 15 statements [reek]
197-198: stat calls 'c.owner' 2 times [reek]
197-199: stat calls 'c.in_use?' 3 times [reek]
197-198: stat calls 'c.owner.alive?' 2 times [reek]
197-199: stat calls '@connections.count' 3 times [reek]
197-199: stat has the variable name 'c' [reek]

== lib/system/database/definitions/mysql.rb (1 issue) ==
3-588: File `mysql.rb` has 494 lines of code (exceeds 250 allowed). Consider refactoring. [structure]

== lib/system/database/definitions/oracle.rb (2 issues) ==
3-617: File `oracle.rb` has 519 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
5-568: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== lib/system/database/definitions/postgres.rb (2 issues) ==
3-617: File `postgres.rb` has 520 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
5-567: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== lib/tasks/provider_stats.rb (4 issues) ==
3: days_since doesn't depend on instance state (maybe move it to another class?) [reek]
4: days_since performs a nil-check [reek]
8: last_admin_access_of doesn't depend on instance state (maybe move it to another class?) [reek]
9: last_admin_access_of has the variable name 'u' [reek]

== lib/three_scale/lazy_initialization.rb (1 issue) ==
34: ThreeScale::LazyInitialization::ClassMethods#lazy_initialization_for has approx 8 statements [reek]

== lib/three_scale/middleware/multitenant.rb (15 issues) ==
11: ThreeScale::Middleware::Multitenant::TenantChecker assumes too much for instance variable '@master' [reek]
11: ThreeScale::Middleware::Multitenant::TenantChecker assumes too much for instance variable '@users' [reek]
11: ThreeScale::Middleware::Multitenant::TenantChecker assumes too much for instance variable '@session' [reek]
33-73: Method `verify!` has a Cognitive Complexity of 16 (exceeds 5 allowed). Consider refactoring. [structure]
33: ThreeScale::Middleware::Multitenant::TenantChecker#verify! has approx 17 statements [reek]
33: ThreeScale::Middleware::Multitenant::TenantChecker has missing safe method 'verify!' [reek]
38: ThreeScale::Middleware::Multitenant::TenantChecker#verify! manually dispatches method call [reek]
48: ThreeScale::Middleware::Multitenant::TenantChecker#verify! calls 'object.class' 2 times [reek]
52: ThreeScale::Middleware::Multitenant::TenantChecker#verify! performs a nil-check [reek]
66-67: ThreeScale::Middleware::Multitenant::TenantChecker#verify! calls '@users[user_id]' 2 times [reek]
67: Avoid too many `return` statements within this method. [structure]
70: Avoid too many `return` statements within this method. [structure]
79-82: ThreeScale::Middleware::Multitenant::TenantChecker#find_cookie_store refers to 'app' more than self (maybe move it to another class?) [reek]
97: ThreeScale::Middleware::Multitenant::EnforceTenant#enforce_tenant! performs a nil-check [reek]
112-115: ThreeScale::Middleware::Multitenant#_call calls 'Thread.current' 2 times [reek]

== lib/three_scale/sidekiq_logging_middleware.rb (1 issue) ==
5: ThreeScale::SidekiqLoggingMiddleware#call doesn't depend on instance state (maybe move it to another class?) [reek]

== lib/three_scale/sidekiq_retry_support.rb (3 issues) ==
9: ThreeScale::SidekiqRetrySupport::Worker#retry_attempt is a writable attribute [reek]
52: ThreeScale::SidekiqRetrySupport::Middleware#call doesn't depend on instance state (maybe move it to another class?) [reek]
53: ThreeScale::SidekiqRetrySupport::Middleware#call manually dispatches method call [reek]

== lib/three_scale/upgrades/from_21_to_22.rb (5 issues) ==
18: ThreeScale::Upgrades::From21To22 has the name 'From21To22' [reek]
34: ThreeScale::Upgrades::From21To22#run has approx 8 statements [reek]
48: ThreeScale::Upgrades::From21To22#create_master_admin_user has approx 12 statements [reek]
76-80: ThreeScale::Upgrades::From21To22#create_master_default_metrics calls 'master_service.metrics' 2 times [reek]
122: ThreeScale::Upgrades::From21To22#update_master_service has approx 8 statements [reek]

== lib/time_hacks.rb (5 issues) ==
25-29: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
34-38: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
49: TimeHacks#cycle_base is controlled by argument 'cycle' [reek]
50-51: TimeHacks#cycle_base calls '1.minute' 2 times [reek]
51-52: TimeHacks#cycle_base calls '1.hour' 2 times [reek]

== lib/tracking_notifications.rb (10 issues) ==
36: TrackingNotifications#current_user doesn't depend on instance state (maybe move it to another class?) [reek]
64: TrackingNotifications#raise_exceptions? doesn't depend on instance state (maybe move it to another class?) [reek]
65: TrackingNotifications#raise_exceptions? calls 'Rails.env' 2 times [reek]
76-172: Method `provider_request` has a Cognitive Complexity of 50 (exceeds 5 allowed). Consider refactoring. [structure]
76-172: Method `provider_request` has 75 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
76: TrackingNotifications#provider_request has approx 37 statements [reek]
84-109: TrackingNotifications tests 'flash[:notice]' at least 4 times [reek]
84-109: TrackingNotifications#provider_request calls 'flash[:notice]' 5 times [reek]
154-157: TrackingNotifications#provider_request calls 'params["settings"]' 2 times [reek]
169-171: TrackingNotifications#provider_request calls 'Rails.logger' 3 times [reek]

== openshift/system/entrypoint.sh (2 issues) ==
22: Exporting an expansion rather than a variable. [shellcheck]
22: Double quote to prevent globbing and word splitting. [shellcheck]

== portafly/src/components/AppHeaderTools.tsx (3 issues) ==
20-105: Function `AppHeaderTools` has 80 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
49-53: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
54-58: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/AppLayout.tsx (2 issues) ==
32-167: Function `AppLayout` has a Cognitive Complexity of 18 (exceeds 5 allowed). Consider refactoring. [structure]
98-103: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/AppNavGroup.tsx (1 issue) ==
16: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/pages/Login.tsx (1 issue) ==
61-93: Function `Login` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== portafly/src/components/pages/Overview.tsx (3 issues) ==
41-64: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
95-138: Function `DataListTable` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
140-214: Function `Overview` has 68 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== portafly/src/components/pages/accounts/AccountOverviewLink.tsx (1 issue) ==
10-24: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== portafly/src/components/pages/accounts/AccountsIndexPage.tsx (3 issues) ==
21-51: Function `AccountsIndexPage` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
30-34: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
44-48: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/pages/accounts/AccountsTable.tsx (3 issues) ==
21-98: Function `AccountsTable` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
62-73: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
75-97: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/pages/accounts/CreateAccountButton.tsx (1 issue) ==
5-18: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/pages/applications/ApplicationPageLink.tsx (1 issue) ==
10-24: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== portafly/src/components/pages/applications/ApplicationsIndexPage.tsx (2 issues) ==
34-38: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
45-49: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/pages/applications/ApplicationsTable.tsx (2 issues) ==
75-86: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
88-110: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/pages/applications/CreateApplicationButton.tsx (1 issue) ==
5-18: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/pages/plans/PlanOverviewLink.tsx (1 issue) ==
10-24: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== portafly/src/components/shared/data-list/BulkSelectorWidget.tsx (1 issue) ==
16-78: Function `BulkSelectorWidget` has 52 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== portafly/src/components/shared/data-list/PaginationWidget.tsx (2 issues) ==
20-27: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
29-36: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/shared/data-list/SearchWidget.tsx (1 issue) ==
136-214: Function `SearchWidget` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]

== portafly/src/components/shared/data-list/modals/ChangeStateModal.tsx (1 issue) ==
39-51: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/shared/data-list/modals/SendEmailModal.tsx (1 issue) ==
38-50: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/shared/data-list/modals/dataListModal.scss (2 issues) ==
1: Selector `portafly-data-list-modal` should match regex /^(([A-Z][a-z]*)+$|(([A-Z][a-z]*)+|u|is|js)(-|--)([a-z]+([a-z]|[A-Z])*)+|(([A-Z][a-z]*)+|u|is|js)(-|--)([a-z]+([a-z]|[A-Z])*)+(--[a-z]+([a-z]|[A-Z])*)+)|[ng]-(\w)+(-(\w)*)*$/ [scss-lint]
2: Selector `pf-c-title` should match regex /^(([A-Z][a-z]*)+$|(([A-Z][a-z]*)+|u|is|js)(-|--)([a-z]+([a-z]|[A-Z])*)+|(([A-Z][a-z]*)+|u|is|js)(-|--)([a-z]+([a-z]|[A-Z])*)+(--[a-z]+([a-z]|[A-Z])*)+)|[ng]-(\w)+(-(\w)*)*$/ [scss-lint]

== portafly/src/components/shared/data-list/modals/submitButton.scss (2 issues) ==
1: Selector `portafly-submit-button` should match regex /^(([A-Z][a-z]*)+$|(([A-Z][a-z]*)+|u|is|js)(-|--)([a-z]+([a-z]|[A-Z])*)+|(([A-Z][a-z]*)+|u|is|js)(-|--)([a-z]+([a-z]|[A-Z])*)+(--[a-z]+([a-z]|[A-Z])*)+)|[ng]-(\w)+(-(\w)*)*$/ [scss-lint]
2: Selector `pf-c-spinner` should match regex /^(([A-Z][a-z]*)+$|(([A-Z][a-z]*)+|u|is|js)(-|--)([a-z]+([a-z]|[A-Z])*)+|(([A-Z][a-z]*)+|u|is|js)(-|--)([a-z]+([a-z]|[A-Z])*)+(--[a-z]+([a-z]|[A-Z])*)+)|[ng]-(\w)+(-(\w)*)*$/ [scss-lint]

== portafly/src/components/shared/data-list/reducers/BulkActionsReducer.ts (1 issue) ==
45-48: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/shared/data-list/reducers/DataReducer.ts (1 issue) ==
14-16: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/shared/data-list/reducers/FiltersReducer.ts (2 issues) ==
16-18: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
24-27: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/shared/data-list/reducers/PaginationReducer.ts (1 issue) ==
35-38: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/shared/data-list/reducers/TableReducer.ts (2 issues) ==
20-34: Function `sorter` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
96-99: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/components/shared/data-list/searchWidget.scss (1 issue) ==
1: Selector `pf-c-select__toggle-wrapper` should match regex /^(([A-Z][a-z]*)+$|(([A-Z][a-z]*)+|u|is|js)(-|--)([a-z]+([a-z]|[A-Z])*)+|(([A-Z][a-z]*)+|u|is|js)(-|--)([a-z]+([a-z]|[A-Z])*)+(--[a-z]+([a-z]|[A-Z])*)+)|[ng]-(\w)+(-(\w)*)*$/ [scss-lint]

== portafly/src/dal/accounts/bulkActions.ts (2 issues) ==
4-8: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
13-17: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/AppLayout.test.tsx (2 issues) ==
6-36: Function `makeAppLayout` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
52-55: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/SwitchWith404.test.tsx (2 issues) ==
10-14: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
26-30: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/pages/accounts/AccountOverviewLink.test.tsx (3 issues) ==
8-12: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
19-22: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
24-27: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/pages/accounts/AccountsIndexPage.test.tsx (2 issues) ==
36-42: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
44-50: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/pages/accounts/AccountsTable.test.tsx (1 issue) ==
38-42: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/pages/accounts/utils/accountsTableDataFactory.test.tsx (1 issue) ==
7-10: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/pages/applications/ApplicationPageLink.test.tsx (3 issues) ==
8-12: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
19-22: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
24-27: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/pages/applications/ApplicationsIndexPage.test.tsx (2 issues) ==
22-28: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
30-36: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/pages/applications/ApplicationsTable.test.tsx (2 issues) ==
33-37: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
70-74: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/pages/applications/utils/applicationsTableDataFactory.test.ts (1 issue) ==
4-7: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/pages/plans/PlanOverviewLink.test.tsx (3 issues) ==
8-12: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
19-22: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
24-27: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/shared/data-list/BulkSelectorWidget.test.tsx (3 issues) ==
47-51: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
56-60: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
65-69: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/shared/data-list/DataListTable.test.tsx (9 issues) ==
134-146: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
166-172: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
209-215: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
217-224: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
246-258: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
260-266: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
268-275: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
290-295: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
303-306: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/shared/data-list/SearchWidget.test.tsx (2 issues) ==
8-31: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
46-49: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== portafly/src/tests/components/shared/data-list/examples/DataListTable.tsx (1 issue) ==
27-131: Function `DataListTable` has 87 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== portafly/src/tests/components/util/FormatDate.test.tsx (4 issues) ==
24-36: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
38-50: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
74-86: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
88-100: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/action_cable-5454023407ffec0d29137c7110917e1e745525ae9afbc05f52104c4cd6597429.js (7 issues) ==
1-598: File `action_cable-5454023407ffec0d29137c7110917e1e745525ae9afbc05f52104c4cd6597429.js` has 519 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
66-195: Function `ConnectionMonitor` has 106 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
202: Identical blocks of code found in 6 locations. Consider refactoring. [duplication]
206: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
208-374: Function `Connection` has 149 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
380-505: Function `Subscriptions` has 112 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
509-554: Function `Subscription` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/active-docs/api-docs-8bf49dd146b25d7ddb74028bbde2d5f0902c6c9c0f701b8e610bc9e410c4c125.js (3 issues) ==
5-13: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
15-22: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
29-45: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/active-docs/application-d5059e2724e3cc21d13637236836663bbd884cf8473637203346c699bf093886.js (167 issues) ==
1-12788: File `application-d5059e2724e3cc21d13637236836663bbd884cf8473637203346c699bf093886.js` has 8328 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
16-11009: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
176-243: Function `extend` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
222-228: Avoid deeply nested control flow statements. [structure]
234-236: Avoid deeply nested control flow statements. [structure]
329: Avoid too many `return` statements within this function. [structure]
591-2714: Function `Sizzle` has 1387 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
773-905: Function `Sizzle` has 81 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
807-834: Avoid deeply nested control flow statements. [structure]
837-847: Avoid deeply nested control flow statements. [structure]
839: Avoid too many `return` statements within this function. [structure]
846: Avoid too many `return` statements within this function. [structure]
866-870: Avoid deeply nested control flow statements. [structure]
876-878: Avoid deeply nested control flow statements. [structure]
891: Avoid too many `return` statements within this function. [structure]
894-896: Avoid deeply nested control flow statements. [structure]
904: Avoid too many `return` statements within this function. [structure]
1073-1437: Function `setDocument` has 218 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1375-1377: Avoid too many `return` statements within this function. [structure]
1380: Avoid too many `return` statements within this function. [structure]
1452-1468: Consider simplifying this complex logical expression. [structure]
1714: Function `CHILD` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1714-1841: Function `CHILD` has 80 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1741-1746: Avoid deeply nested control flow statements. [structure]
1757-1834: Consider simplifying this complex logical expression. [structure]
1811-1831: Avoid deeply nested control flow statements. [structure]
2098-2163: Function `tokenize` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2175-2231: Function `addCombinator` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2223-2225: Avoid deeply nested control flow statements. [structure]
2256: Function `condense` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2277: Function `setMatcher` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2277-2368: Function `setMatcher` has 66 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2335-2338: Avoid deeply nested control flow statements. [structure]
2370-2426: Function `matcherFromTokens` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2401-2420: Consider simplifying this complex logical expression. [structure]
2405-2407: Avoid deeply nested control flow statements. [structure]
2428-2537: Function `matcherFromGroupMatchers` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2431-2532: Function `superMatcher` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2431: Function `superMatcher` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2504-2506: Avoid deeply nested control flow statements. [structure]
2578-2647: Function `select` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2591-2605: Consider simplifying this complex logical expression. [structure]
2626-2629: Avoid deeply nested control flow statements. [structure]
2867-2980: Function `init` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2909-2919: Avoid deeply nested control flow statements. [structure]
2934-2936: Avoid deeply nested control flow statements. [structure]
2950: Avoid too many `return` statements within this function. [structure]
2955: Avoid too many `return` statements within this function. [structure]
2962: Avoid too many `return` statements within this function. [structure]
2967-2971: Avoid too many `return` statements within this function. [structure]
2979: Avoid too many `return` statements within this function. [structure]
3190-3382: Function `Callbacks` has 121 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3387-3478: Function `Deferred` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3481-3533: Function `when` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3622-3687: Function `promise` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3830-3920: Function `internalData` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3852-3855: Consider simplifying this complex logical expression. [structure]
3922-4011: Function `internalRemoveData` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3956-3960: Avoid deeply nested control flow statements. [structure]
4050-4101: Function `data` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4069-4075: Avoid deeply nested control flow statements. [structure]
4315-4371: Function `adjustCSS` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4329-4355: Consider simplifying this complex logical expression. [structure]
4376-4430: Function `access` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4376: Function `access` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4600: Function `buildFragment` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4600-4730: Function `buildFragment` has 78 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4658-4664: Avoid deeply nested control flow statements. [structure]
4776: Function `on` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4776-4835: Function `on` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4845: Function `add` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4845-4962: Function `add` has 75 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4965: Function `remove` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4965-5040: Function `remove` has 54 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5003-5016: Consider simplifying this complex logical expression. [structure]
5042-5185: Function `trigger` has 93 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5187-5245: Function `dispatch` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5230-5233: Avoid deeply nested control flow statements. [structure]
5247-5298: Function `handlers` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5259-5290: Consider simplifying this complex logical expression. [structure]
5276-5280: Avoid deeply nested control flow statements. [structure]
5281-5283: Avoid deeply nested control flow statements. [structure]
5300-5344: Function `fix` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5374-5385: Consider simplifying this complex logical expression. [structure]
5714-5752: Function `setup` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5822-5857: Function `off` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5942-6008: Function `fixCloneNodeIssues` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6010-6105: Function `domManip` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6059-6064: Avoid deeply nested control flow statements. [structure]
6079-6095: Avoid deeply nested control flow statements. [structure]
6134-6190: Function `clone` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6192-6243: Function `cleanData` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6208-6216: Avoid deeply nested control flow statements. [structure]
6228-6236: Avoid deeply nested control flow statements. [structure]
6338-6379: Function `html` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6351-6373: Consider simplifying this complex logical expression. [structure]
6608-6689: Function `computeStyleTests` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6630-6661: Consider simplifying this complex logical expression. [structure]
6882-6937: Function `showHide` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6948: Function `augmentWidthOrHeight` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6992-7036: Function `getWidthOrHeight` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7081-7152: Function `style` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7222-7269: Consider simplifying this complex logical expression. [structure]
7375: Function `Tween` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
7382: Function `init` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
7541-7684: Function `defaultPrefilter` has 105 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7686-7721: Function `propFilter` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7723-7837: Function `Animation` has 92 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7940-7991: Function `stop` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7992-8032: Function `finish` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8194-8258: Function `val` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8396-8441: Function `attr` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8430: Avoid too many `return` statements within this function. [structure]
8434: Avoid too many `return` statements within this function. [structure]
8440: Avoid too many `return` statements within this function. [structure]
8702: Avoid too many `return` statements within this function. [structure]
8809-8845: Function `addClass` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8830-8832: Avoid deeply nested control flow statements. [structure]
8847-8891: Function `removeClass` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8876-8878: Avoid deeply nested control flow statements. [structure]
8893-8949: Function `toggleClass` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9199-9251: Function `ajaxHandleResponses` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9256-9350: Function `ajaxConvert` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9302-9325: Avoid deeply nested control flow statements. [structure]
9332-9343: Avoid deeply nested control flow statements. [structure]
9445-9869: Function `ajax` has 248 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9602-9609: Consider simplifying this complex logical expression. [structure]
9754-9866: Function `done` has 67 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10203-10334: Function `send` has 66 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10271-10273: Avoid deeply nested control flow statements. [structure]
10281-10283: Avoid deeply nested control flow statements. [structure]
10300-10306: Avoid deeply nested control flow statements. [structure]
10586-10648: Function `load` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10692-10738: Function `setOffset` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10742-10777: Function `offset` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11010-11026: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
11037-11074: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
11075: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
11086-11560: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
11194-11228: Function `tmpl` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11392-11437: Function `buildTmplFn` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11456-11520: Function `storeTmplItems` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11468-11519: Function `processItemKey` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11569-11570: Identical blocks of code found in 5 locations. Consider refactoring. [duplication]
11571-11582: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
11584-11639: Function `xml` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11584-11639: Function `xml` has a Cognitive Complexity of 32 (exceeds 5 allowed). Consider refactoring. [structure]
11584-11640: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
11642-11668: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
11643: Consider simplifying this complex logical expression. [structure]
11648: Avoid deeply nested control flow statements. [structure]
11665-11666: Consider simplifying this complex logical expression. [structure]
11669-11680: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
11681-11694: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
11701-11709: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
11711-11718: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
11725-11741: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
11761-11785: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
11786-11807: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
11808-11964: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
11833-11960: Function `fetch` has 82 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11965-12083: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
12084-12157: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
12158-12205: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
12206-12333: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
12334-12417: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
12418-12773: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/active-docs/classes/doc-2daa496d0ecc03f5a491a532a142242e5804bc2a5b8ff37a8ed95707560ed906.js (1 issue) ==
1-84: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/active-docs/classes/messenger-00069573d5971ba85d6ea09f6448bce7546cd979d298be689f8c91ed1e8677bf.js (1 issue) ==
1-128: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/active-docs/classes/operation-01619c46c22c9c96e8e46e1e1775b0bb533d5b3375874000aaf380963e95ede7.js (1 issue) ==
1-74: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/active-docs/classes/param-8f6c73e14af54bf91527dc966f1a15e39a215fc67423118d884cd52a452740e5.js (1 issue) ==
1-119: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/active-docs/classes/resource-f1514278a3f67c7c1bd63c606c3e445bd43b4128df25210955b642936d2ccece.js (1 issue) ==
1-48: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/active-docs/classes/resources_controller-d70292dc399ab120c7aef89e01e6483189f500d0fd12ce086064571e2a914793.js (2 issues) ==
1-157: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
26-153: Function `fetch` has 82 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/active-docs/classes/storage-4b692d3bdf9de384b1b2a7c7ec249236e2fac04a44a804cf3cedf0d8bd35838a.js (1 issue) ==
1-22: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/active-docs/form_handler-1596de4b2fd71cdb4930f0dfc592dd2a220aa4c421a4ec7571442137ef08c1ca.js (1 issue) ==
1-356: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/active-docs/jquery.cookie-7d3b8fd25e21348c9a4ec2c41b708e904860f4a902c55764e5802c607a4a92e3.js (1 issue) ==
11-48: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/active-docs/jquery.tmpl-aa84918b5789c26ea2ed7e2e39630543cc41940c6a1ec8681a15d014d775a803.js (5 issues) ==
1-486: File `jquery.tmpl-aa84918b5789c26ea2ed7e2e39630543cc41940c6a1ec8681a15d014d775a803.js` has 356 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
119-153: Function `tmpl` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
317-362: Function `buildTmplFn` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
381-445: Function `storeTmplItems` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
393-444: Function `processItemKey` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/active-docs/jquery.wiggle.min-91623d30e0d7ec2de4424027131d16f73e6c916a4cd863e86fde4f2752ba305c.js (1 issue) ==
9-10: Identical blocks of code found in 5 locations. Consider refactoring. [duplication]

== public/assets/active-docs/prettify-xml-4519547ff42cf82ea39abc5d02592a70c4d542ae481f56fb9134ac2820f12dc9.js (4 issues) ==
1-12: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
14-70: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
14-69: Function `xml` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
14-69: Function `xml` has a Cognitive Complexity of 33 (exceeds 5 allowed). Consider refactoring. [structure]

== public/assets/active-docs/pubsub-fa40df67493997f4b06a6d53b789967d2294479cccb90cf183aa99d77f7f97bd.js (1 issue) ==
1-12: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/active-docs/serialize_object-d527ec6bc0e452a0fe3667158573bb4063fe9e78b2fc9d8c61bd1d13ce0764c5.js (1 issue) ==
1-14: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/active-docs/tip_descriptions-bac8bfc5f0efc07b31cba3aaaa1cd32a8218db6b859b4bb89309f51b7219e85b.js (1 issue) ==
1-25: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/active-docs/vendor-b64ee18d967f4a44366d2dd014b0cd2bd1fda0842fce9b11bfd40629b823e55c.js (154 issues) ==
1-11697: File `vendor-b64ee18d967f4a44366d2dd014b0cd2bd1fda0842fce9b11bfd40629b823e55c.js` has 7581 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
16-11009: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
176-243: Function `extend` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
222-228: Avoid deeply nested control flow statements. [structure]
234-236: Avoid deeply nested control flow statements. [structure]
329: Avoid too many `return` statements within this function. [structure]
591-2714: Function `Sizzle` has 1387 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
773-905: Function `Sizzle` has 81 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
807-834: Avoid deeply nested control flow statements. [structure]
837-847: Avoid deeply nested control flow statements. [structure]
839: Avoid too many `return` statements within this function. [structure]
846: Avoid too many `return` statements within this function. [structure]
866-870: Avoid deeply nested control flow statements. [structure]
876-878: Avoid deeply nested control flow statements. [structure]
891: Avoid too many `return` statements within this function. [structure]
894-896: Avoid deeply nested control flow statements. [structure]
904: Avoid too many `return` statements within this function. [structure]
1073-1437: Function `setDocument` has 218 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1375-1377: Avoid too many `return` statements within this function. [structure]
1380: Avoid too many `return` statements within this function. [structure]
1452-1468: Consider simplifying this complex logical expression. [structure]
1714-1841: Function `CHILD` has 80 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1714: Function `CHILD` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1741-1746: Avoid deeply nested control flow statements. [structure]
1757-1834: Consider simplifying this complex logical expression. [structure]
1811-1831: Avoid deeply nested control flow statements. [structure]
2098-2163: Function `tokenize` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2175-2231: Function `addCombinator` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2223-2225: Avoid deeply nested control flow statements. [structure]
2256: Function `condense` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2277: Function `setMatcher` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2277-2368: Function `setMatcher` has 66 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2335-2338: Avoid deeply nested control flow statements. [structure]
2370-2426: Function `matcherFromTokens` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2401-2420: Consider simplifying this complex logical expression. [structure]
2405-2407: Avoid deeply nested control flow statements. [structure]
2428-2537: Function `matcherFromGroupMatchers` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2431: Function `superMatcher` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2431-2532: Function `superMatcher` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2504-2506: Avoid deeply nested control flow statements. [structure]
2578-2647: Function `select` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2591-2605: Consider simplifying this complex logical expression. [structure]
2626-2629: Avoid deeply nested control flow statements. [structure]
2867-2980: Function `init` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2909-2919: Avoid deeply nested control flow statements. [structure]
2934-2936: Avoid deeply nested control flow statements. [structure]
2950: Avoid too many `return` statements within this function. [structure]
2955: Avoid too many `return` statements within this function. [structure]
2962: Avoid too many `return` statements within this function. [structure]
2967-2971: Avoid too many `return` statements within this function. [structure]
2979: Avoid too many `return` statements within this function. [structure]
3190-3382: Function `Callbacks` has 121 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3387-3478: Function `Deferred` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3481-3533: Function `when` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3622-3687: Function `promise` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3830-3920: Function `internalData` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3852-3855: Consider simplifying this complex logical expression. [structure]
3922-4011: Function `internalRemoveData` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3956-3960: Avoid deeply nested control flow statements. [structure]
4050-4101: Function `data` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4069-4075: Avoid deeply nested control flow statements. [structure]
4315-4371: Function `adjustCSS` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4329-4355: Consider simplifying this complex logical expression. [structure]
4376-4430: Function `access` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4376: Function `access` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4600-4730: Function `buildFragment` has 78 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4600: Function `buildFragment` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4658-4664: Avoid deeply nested control flow statements. [structure]
4776: Function `on` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4776-4835: Function `on` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4845-4962: Function `add` has 75 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4845: Function `add` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4965-5040: Function `remove` has 54 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4965: Function `remove` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
5003-5016: Consider simplifying this complex logical expression. [structure]
5042-5185: Function `trigger` has 93 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5187-5245: Function `dispatch` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5230-5233: Avoid deeply nested control flow statements. [structure]
5247-5298: Function `handlers` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5259-5290: Consider simplifying this complex logical expression. [structure]
5276-5280: Avoid deeply nested control flow statements. [structure]
5281-5283: Avoid deeply nested control flow statements. [structure]
5300-5344: Function `fix` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5374-5385: Consider simplifying this complex logical expression. [structure]
5714-5752: Function `setup` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5822-5857: Function `off` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5942-6008: Function `fixCloneNodeIssues` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6010-6105: Function `domManip` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6059-6064: Avoid deeply nested control flow statements. [structure]
6079-6095: Avoid deeply nested control flow statements. [structure]
6134-6190: Function `clone` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6192-6243: Function `cleanData` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6208-6216: Avoid deeply nested control flow statements. [structure]
6228-6236: Avoid deeply nested control flow statements. [structure]
6338-6379: Function `html` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6351-6373: Consider simplifying this complex logical expression. [structure]
6608-6689: Function `computeStyleTests` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6630-6661: Consider simplifying this complex logical expression. [structure]
6882-6937: Function `showHide` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6948: Function `augmentWidthOrHeight` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6992-7036: Function `getWidthOrHeight` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7081-7152: Function `style` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7222-7269: Consider simplifying this complex logical expression. [structure]
7375: Function `Tween` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
7382: Function `init` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
7541-7684: Function `defaultPrefilter` has 105 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7686-7721: Function `propFilter` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7723-7837: Function `Animation` has 92 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7940-7991: Function `stop` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7992-8032: Function `finish` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8194-8258: Function `val` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8396-8441: Function `attr` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8430: Avoid too many `return` statements within this function. [structure]
8434: Avoid too many `return` statements within this function. [structure]
8440: Avoid too many `return` statements within this function. [structure]
8702: Avoid too many `return` statements within this function. [structure]
8809-8845: Function `addClass` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8830-8832: Avoid deeply nested control flow statements. [structure]
8847-8891: Function `removeClass` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8876-8878: Avoid deeply nested control flow statements. [structure]
8893-8949: Function `toggleClass` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9199-9251: Function `ajaxHandleResponses` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9256-9350: Function `ajaxConvert` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9302-9325: Avoid deeply nested control flow statements. [structure]
9332-9343: Avoid deeply nested control flow statements. [structure]
9445-9869: Function `ajax` has 248 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9602-9609: Consider simplifying this complex logical expression. [structure]
9754-9866: Function `done` has 67 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10203-10334: Function `send` has 66 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10271-10273: Avoid deeply nested control flow statements. [structure]
10281-10283: Avoid deeply nested control flow statements. [structure]
10300-10306: Avoid deeply nested control flow statements. [structure]
10586-10648: Function `load` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10692-10738: Function `setOffset` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10742-10777: Function `offset` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11010-11026: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
11037-11074: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
11075: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
11086-11560: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
11194-11228: Function `tmpl` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11392-11437: Function `buildTmplFn` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11456-11520: Function `storeTmplItems` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11468-11519: Function `processItemKey` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11569-11570: Identical blocks of code found in 5 locations. Consider refactoring. [duplication]
11571-11582: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
11584-11640: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
11584-11639: Function `xml` has a Cognitive Complexity of 32 (exceeds 5 allowed). Consider refactoring. [structure]
11584-11639: Function `xml` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11642-11668: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
11643: Consider simplifying this complex logical expression. [structure]
11648: Avoid deeply nested control flow statements. [structure]
11665-11666: Consider simplifying this complex logical expression. [structure]
11669-11680: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
11681-11694: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/ajax_events-491d1bd355fd0bd88c7bb644c25f5af7adee13b581eb00d19598fd41c8083490.js (1 issue) ==
1-13: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/ajax_upload-793f79f5d8c3d963f521c9b150f9660ccac0acd9a4a3f6a45d7e3213c39f7e58.js (1 issue) ==
3-70: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/application-695c23241ab45a820c1513676ce7863d64b4dc076b2ac4c87f0f9dc99b417ed4.js (2 issues) ==
1-255: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
28-106: Function `disableInterface` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/autosubmit-3abe47303b126979288d87a5932a462e333d35958377ae21d4cd4959f41cc6f9.js (1 issue) ==
1-11: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/bulk_operations-b6bbda4f36ce0756bd33efe7ffd0e108fb8c5848d38887731fa9b8630b678588.js (3 issues) ==
1-130: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
3-48: Function `handle_checkboxes` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
50-92: Function `prepare_operations` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/buyer/1/3scale-999f8011bb22447a1e60d9ae47b33cf0dd31e4989f38eab6ab886f0856388a9b.js (24 issues) ==
1-1983: File `3scale-999f8011bb22447a1e60d9ae47b33cf0dd31e4989f38eab6ab886f0856388a9b.js` has 1415 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
1: Function `hljs` has a Cognitive Complexity of 267 (exceeds 5 allowed). Consider refactoring. [structure]
1: Function `django` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
1: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
8-1107: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
303-381: Function `slideshow` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
384-467: Function `launch` has 54 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
471-520: Function `appendHTML` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
523-584: Function `addBindings` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
639-738: Function `position` has 73 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
740-778: Function `resize` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
780-912: Function `prep` has 101 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
914-1039: Function `load` has 91 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1226-1288: Function `handleRemote` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1485: Avoid too many `return` statements within this function. [structure]
1505-1507: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1509-1511: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1522-1562: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
1563-1600: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
1621-1688: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
1689-1699: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
1700-1713: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1717-1971: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1744-1822: Function `disableInterface` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror-ce134e372d984fe4e9e1548e3442b5f4caf908f610337dd20f97392a8bce3551.js (120 issues) ==
1-8923: File `codemirror-ce134e372d984fe4e9e1548e3442b5f4caf908f610337dd20f97392a8bce3551.js` has 7135 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
10-8922: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
62-129: Function `CodeMirror` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
137-233: Function `Display` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
420-455: Function `update` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
677-747: Function `updateDisplayIfNeeded` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
686-690: Consider simplifying this complex logical expression. [structure]
717-719: Consider simplifying this complex logical expression. [structure]
851-891: Function `patchDisplay` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
972-1010: Function `updateLineGutter` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1043: Function `insertLineWidgetsFor` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1104-1149: Function `applyTextInput` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1104: Function `applyTextInput` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1239-1318: Function `init` has 64 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1419-1467: Function `poll` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1425-1428: Consider simplifying this complex logical expression. [structure]
1466: Avoid too many `return` statements within this function. [structure]
1478-1553: Function `onContextMenu` has 60 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1574-1660: Function `init` has 75 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1623-1657: Function `onCopyCut` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1674-1711: Function `showPrimarySelection` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1678-1681: Consider simplifying this complex logical expression. [structure]
1784-1834: Function `pollContent` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1913-1966: Function `locateNodeInLineView` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1962: Avoid too many `return` statements within this function. [structure]
1968-2007: Function `domTextBetween` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1968: Function `domTextBetween` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1971-2000: Function `walk` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2247: Function `skipAtomicInner` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2247-2277: Function `skipAtomicInner` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2255-2258: Avoid deeply nested control flow statements. [structure]
2264-2265: Avoid deeply nested control flow statements. [structure]
2266-2267: Avoid deeply nested control flow statements. [structure]
2280: Function `skipAtomic` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2301: Avoid too many `return` statements within this function. [structure]
2349-2421: Function `drawSelectionRange` has 66 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2364-2398: Function `drawForLine` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2445-2481: Function `highlightWorker` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2454-2470: Consider simplifying this complex logical expression. [structure]
2632: Function `measureCharPrepared` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2654-2689: Function `nodeAndOffsetInLineMap` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2691-2746: Function `measureCharInner` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2725-2731: Consider simplifying this complex logical expression. [structure]
2829: Function `charCoords` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2837: Function `cursorCoords` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2837-2865: Function `cursorCoords` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2913-2964: Function `coordsCharInner` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2913: Function `coordsCharInner` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2942-2950: Consider simplifying this complex logical expression. [structure]
3147-3191: Function `endOperation_finish` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3262-3323: Function `regChange` has 56 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3297-3302: Avoid deeply nested control flow statements. [structure]
3306-3313: Avoid deeply nested control flow statements. [structure]
3419-3523: Function `registerEventHandlers` has 88 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3586-3625: Function `onMouseDown` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3644-3650: Consider simplifying this complex logical expression. [structure]
3684: Function `leftButtonSelect` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3684-3826: Function `leftButtonSelect` has 128 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3738-3779: Function `extendTo` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3861-3918: Function `onDrop` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4021-4094: Function `onScrollWheel` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4076-4092: Consider simplifying this complex logical expression. [structure]
4229: Consider simplifying this complex logical expression. [structure]
4421-4483: Function `makeChangeFromHistory` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4536-4593: Function `makeChangeSingleDocInEditor` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4595: Function `replaceRange` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4650: Function `scrollIntoView` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4660: Function `calculateScrollPos` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4734-4791: Function `indentLine` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4839-4886: Function `findPosH` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4839: Function `findPosH` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4863-4882: Consider simplifying this complex logical expression. [structure]
5135: Function `addWidget` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
5135-5168: Function `addWidget` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5897: Avoid too many `return` statements within this function. [structure]
5927-5980: Function `fromTextArea` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6082-6122: Function `clear` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6192: Function `markText` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6192-6259: Function `markText` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6285: Function `markTextShared` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6366-6369: Consider simplifying this complex logical expression. [structure]
6377-6381: Consider simplifying this complex logical expression. [structure]
6392-6450: Function `stretchSpansOverChange` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6425: Avoid deeply nested control flow statements. [structure]
6480: Avoid deeply nested control flow statements. [structure]
6571: Function `conflictingCollapsedRange` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6581-6583: Consider simplifying this complex logical expression. [structure]
6650-6653: Consider simplifying this complex logical expression. [structure]
6818: Function `runMode` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6818-6853: Function `runMode` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6859-6895: Function `highlightLine` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6940-6995: Function `buildLineContent` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7006: Function `buildToken` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
7006-7062: Function `buildToken` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7053-7060: Consider simplifying this complex logical expression. [structure]
7109-7175: Function `insertLineContent` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7128-7142: Consider simplifying this complex logical expression. [structure]
7129-7132: Avoid deeply nested control flow statements. [structure]
7133: Avoid deeply nested control flow statements. [structure]
7134: Avoid deeply nested control flow statements. [structure]
7135: Avoid deeply nested control flow statements. [structure]
7136: Avoid deeply nested control flow statements. [structure]
7137: Avoid deeply nested control flow statements. [structure]
7138-7139: Avoid deeply nested control flow statements. [structure]
7140-7142: Avoid deeply nested control flow statements. [structure]
7145: Avoid deeply nested control flow statements. [structure]
7188-7236: Function `updateDoc` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7654-7658: Consider simplifying this complex logical expression. [structure]
7951-7991: Function `addChangeToHistory` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7956-7983: Consider simplifying this complex logical expression. [structure]
8013-8019: Consider simplifying this complex logical expression. [structure]
8078-8083: Avoid deeply nested control flow statements. [structure]
8295: Function `countColumn` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
8732: Avoid too many `return` statements within this function. [structure]
8770-8915: Function `bidiOrdering` has 100 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8780: Avoid too many `return` statements within this function. [structure]
8781: Avoid too many `return` statements within this function. [structure]
8782: Avoid too many `return` statements within this function. [structure]
8890: Avoid deeply nested control flow statements. [structure]
8892: Avoid deeply nested control flow statements. [structure]

== public/assets/codemirror/addons/comment/comment-31dbf5b9459ff55f2f27e806ad8a7157963764775367aade65ba9648e13569ae.js (2 issues) ==
185: Avoid too many `return` statements within this function. [structure]
201: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/addons/comment/continuecomment-6a43140b00139d6eed50624c5ee12c01151f51864cbf7b1d03dc38f5b7bb3890.js (2 issues) ==
17-62: Function `continueComment` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
37: Avoid deeply nested control flow statements. [structure]

== public/assets/codemirror/addons/display/panel-cbf5e5f1e8852f6c713e477234c3fca398ecdb1b7940f0884254d34359d9bacf.js (1 issue) ==
68-100: Function `initPanels` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/addons/edit/closebrackets-0ddf2216bcf5b14ff517ba589e22c2cf01b0698399960cc74c1fb2ff1a059fef.js (5 issues) ==
59-63: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
76-80: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
99-167: Function `handleChar` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
123-136: Consider simplifying this complex logical expression. [structure]
138: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/addons/edit/closetag-8d18a793e36dace8385b7079da1a599a5e3a7c4b2adc57aa97bff5a4ffdfe0bd.js (5 issues) ==
29-170: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]
54-96: Function `autoCloseGT` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
71-77: Consider simplifying this complex logical expression. [structure]
98-134: Function `autoCloseCurrent` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
152: Function `closingTagExists` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]

== public/assets/codemirror/addons/edit/continuelist-e519f9aa686aa580ec98b0922f7c04009e7e32307b57996b6d39e71a162595e5.js (1 issue) ==
18-50: Function `newlineAndIndentContinueMarkdownList` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/addons/edit/matchbrackets-163645f77d865488e02cc7024ee91d66e61214a6c788b9d5f443f9e249f2131d.js (3 issues) ==
40: Function `scanForBracket` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
75: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
77: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/edit/matchtags-68a03604c53100863790d2b399887150530288d2ffb3fa85df3231bd13ac9e6f.js (1 issue) ==
4-66: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/fold/brace-fold-ff34d62474be858497f47d12d6f1dd01d1b876254aae2d5d61c11515feba705c.js (2 issues) ==
66: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
90: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/fold/comment-fold-3aacc40f898d5542a10e2e09e6e115b744a5d8019d0701da394d15f9f7038a93.js (1 issue) ==
55-56: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/addons/fold/foldcode-1da473e411cd029cf8893f6ff500e976bcd7b12a054cf68cca81e349c132384a.js (5 issues) ==
14-59: Function `doFold` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
97-102: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
103-108: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
113-116: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
122-125: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/fold/foldgutter-14eafb76a0497ee648769dc009d9a0f3ca68ab6640054890f4284f80f4b119ab.js (4 issues) ==
4-146: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]
122-135: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
126-129: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
130-133: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/fold/indent-fold-73b5e9c8f8aec0c843fe1914969cc165228e9938af11113932a8de9c073631f8.js (1 issue) ==
38-41: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/fold/markdown-fold-4796215562e6a6695cd013ac35311eb29c18fff27147c48f2a16623d6656c4d4.js (1 issue) ==
43-46: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/fold/xml-fold-0f1f2f2e915b9eaab6465805d21529b2f94b50d67782d99305fc4ca4df6976b5.js (3 issues) ==
98-101: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
124-127: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
162: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/addons/hint/anyword-hint-02eb642fe30783246510ec2b3cc1edc5a2a14f414aea11cc52c68a8c3cc1bb56.js (1 issue) ==
39: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/hint/css-hint-3735565b4e1be05d6246f5b8bbc0fa4c31e853a5afe3e298da0c58f6b8ccf29f.js (2 issues) ==
4-60: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]
54-58: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/hint/html-hint-3d80302b25e3d32cfa49868bbaeb5ad1d6f5aa8c8b20474510a176a54dce94fc.js (2 issues) ==
1-349: File `html-hint-3d80302b25e3d32cfa49868bbaeb5ad1d6f5aa8c8b20474510a176a54dce94fc.js` has 340 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
4-348: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/hint/javascript-hint-668c5ebfefb04cbe2207f6b505ba69927a35818f55a349453524aa9fc19c50c2.js (2 issues) ==
41-44: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
100-145: Function `getCompletions` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/addons/hint/show-hint-b92af6c2a5eb1e8653ab3fe78da7d7c5737af1e2d83771a316bf0368cc2a268a.js (4 issues) ==
1-438: File `show-hint-b92af6c2a5eb1e8653ab3fe78da7d7c5737af1e2d83771a316bf0368cc2a268a.js` has 376 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
99-107: Consider simplifying this complex logical expression. [structure]
160-193: Function `buildKeyMap` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
202-306: Function `Widget` has 92 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/addons/hint/sql-hint-d7040867fda791b0eeab95b31428288e97572ae92ab80ccd9022839672228967.js (4 issues) ==
4-271: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]
107-170: Function `nameCompletion` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
181-227: Function `findTableByAlias` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
247-250: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/hint/xml-hint-513f82582a0ed66c9e89c21973488dd735b7363f92e64e13ee0ee39ee9bd54d8.js (5 issues) ==
16-107: Function `getHints` has 87 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
21-24: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
41-101: Consider simplifying this complex logical expression. [structure]
52-53: Avoid deeply nested control flow statements. [structure]
102-106: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/addons/lint/css-lint-8d7fd5e3f0a6c53241ae923a57ce5a7fa27e4c36d1abfdbda7c3ab605bb3fa2d.js (2 issues) ==
24: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
25-30: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/lint/html-lint-dc9fcc50ee45e92338393d9f0679b112a4b01afaefad1c399ad58abe7508b42a.js (3 issues) ==
8-46: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]
36: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
37-42: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/lint/javascript-lint-326a2be9902636980be33a70dcb5819a53796c88353266e2c9b61baa046ad718.js (3 issues) ==
72-135: Function `parseErrors` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
97-101: Avoid deeply nested control flow statements. [structure]
108: Avoid deeply nested control flow statements. [structure]

== public/assets/codemirror/addons/merge/merge-6b950116361f5e6f1bf4b01f7528eba6109655f5e2209574ac6660cd99c3eddc.js (21 issues) ==
1-774: File `merge-6b950116361f5e6f1bf4b01f7528eba6109655f5e2209574ac6660cd99c3eddc.js` has 678 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
72-126: Function `registerUpdate` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
137-177: Function `syncScroll` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
209: Function `updateMarks` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
212-225: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
217-220: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
221-224: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
229: Function `markChanges` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
229-272: Function `markChanges` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
290-292: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
391-426: Function `drawConnectorsForChunk` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
391: Function `drawConnectorsForChunk` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
430: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
431: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
437-493: Function `MergeView` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
617-618: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
620-621: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
682: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
683: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
732: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
733: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/mode/multiplex-5e031101ea20c99902e5f97568a27ef501ee126d7ae16492c2c23100939caaa9.js (5 issues) ==
14-121: Function `multiplexingMode` has 94 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
44-89: Function `token` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
53: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
87: Avoid too many `return` statements within this function. [structure]
107: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/mode/overlay-326efdb76f2106cf17f39b5e74cb0dd6d8be3df7c5505351b1f9b370787d9f3c.js (2 issues) ==
13-85: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
23-83: Function `overlayMode` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/addons/mode/simple-aa2b7afe9f920768230fd903dff388fdb30b4492758fc74bdb8f5d4f0d63654d.js (7 issues) ==
20-59: Function `simpleMode` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
94-153: Function `tokenFunction` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
139-140: Avoid deeply nested control flow statements. [structure]
144: Avoid too many `return` statements within this function. [structure]
146: Avoid too many `return` statements within this function. [structure]
151: Avoid too many `return` statements within this function. [structure]
202: Avoid deeply nested control flow statements. [structure]

== public/assets/codemirror/addons/runmode/colorize-89b7ebd01e86983873c02941c2b3a03c16702f42567576b91971998c040620e3.js (1 issue) ==
4-40: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/runmode/runmode-f6f4993f6f5684410d6311d5c4c0924d228502c1cc74857ec599f0b573f3eacd.js (4 issues) ==
14-70: Function `runMode` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
33-47: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
49-55: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
60-69: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/runmode/runmode-standalone-fa748646f4ed7aa33790a863675fa9056b358caace8d1635682828602c722859.js (6 issues) ==
77-81: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
83-91: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
104-156: Function `runMode` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
119-133: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
135-141: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
146-155: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/runmode/runmode.node-c18787a709e0ce028b199fe59c9803b8dd3272ee82676e8a6017b9c368a3318f.js (9 issues) ==
11: Function `countColumn` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
11-24: Function `countColumn` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
75-89: Function `match` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
104-108: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
116-124: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
126-132: Function `copyObj` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
142-161: Function `getMode` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
164-177: Function `runMode` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring. [structure]
167-176: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/scroll/annotatescrollbar-6814a2002e92444cd251a86f5cdad0dceb88364e0740996201e4a728c85082de.js (1 issue) ==
66-109: Function `redraw` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/addons/scroll/simplescrollbars-d8841af4b5f6d5db9eb72e252a4636e489ae73d8705e5ab5e9eeeca5195593c6.js (3 issues) ==
14-60: Function `Bar` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
46: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
48: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/search/jump-to-line-ce88c27ceff049c07d32954ddeb9c611cfb8b1f04a28c3c96548bc67ec44705a.js (3 issues) ==
6-49: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]
16: Function `dialog` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
16-19: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/search/match-highlighter-1e398de5b72af2cd59b7544276b015568941e42819e9eb5ee46432a8c21863f7.js (3 issues) ==
22-146: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]
118-122: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
123-127: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/search/matchesonscrollbar-908b6f637a1358c61484582c7160e54bfc9b37e5d6f8e7a002bb9034c09d41fb.js (3 issues) ==
4-97: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]
70: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
71: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/search/search-f48786ba882aa5a1758743b443c421c4cfe6c389f9eeb70a58361ee76606c8d9.js (6 issues) ==
12-249: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]
60: Function `persistentDialog` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
70: Function `dialog` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
70-73: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
116-162: Function `doSearch` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
202-238: Function `replace` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/addons/search/searchcursor-9e0a71319ec6b284a47e35b3aadee38592d3ea713fa803483ab204d229ba0bff.js (13 issues) ==
15-116: Function `SearchCursor` has 91 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
28-59: Function `matches` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
29-54: Consider simplifying this complex logical expression. [structure]
76-79: Avoid deeply nested control flow statements. [structure]
83-86: Avoid deeply nested control flow statements. [structure]
99: Avoid deeply nested control flow statements. [structure]
102: Avoid too many `return` statements within this function. [structure]
104: Avoid too many `return` statements within this function. [structure]
106: Avoid too many `return` statements within this function. [structure]
109: Avoid too many `return` statements within this function. [structure]
109: Avoid deeply nested control flow statements. [structure]
110: Avoid too many `return` statements within this function. [structure]
111: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/addons/selection/mark-selection-9faa2bb0845b0f13ad0adde7b87019693d29a736b7bde145ba129d41eaf26fe6.js (1 issue) ==
78-117: Function `update` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/addons/selection/selection-pointer-edb05fcfacba82a7ee1257ceb6c8d172a62ac09b2bb03529f2b6b49a4b3b8581.js (1 issue) ==
90-92: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/addons/tern/tern-6d805e6eefe35d1c377fb60ce186d10bc71880c0245fe702d5c6a482acd7f1ca.js (9 issues) ==
1-702: File `tern-6d805e6eefe35d1c377fb60ce186d10bc71880c0245fe702d5c6a482acd7f1ca.js` has 560 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
207-240: Function `hint` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
254: Function `showContextInfo` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
277-317: Function `updateArgHints` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
304: Avoid too many `return` statements within this function. [structure]
407: Function `moveTo` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
504-544: Function `buildRequest` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
597-625: Function `tempTooltip` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
664-700: Function `WorkerServer` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/addons/wrap/hardwrap-889158de77b91511cee7068b792f8a078a0ccd8b8c8b701680f5a7ffb051abea.js (1 issue) ==
46-98: Function `wrapRange` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/keymaps/emacs-0c9b97d742fe34fe528e32985e674f8b264a420f013d164fd4b543a166e778f6.js (2 issues) ==
1-413: File `emacs-0c9b97d742fe34fe528e32985e674f8b264a420f013d164fd4b543a166e778f6.js` has 346 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
33: Function `kill` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]

== public/assets/codemirror/keymaps/sublime-59e1153a27686470087d7c0f3f1e43e846aa60aa9ff5954e2c2f52223354d6ec.js (16 issues) ==
1-581: File `sublime-59e1153a27686470087d7c0f3f1e43e846aa60aa9ff5954e2c2f52223354d6ec.js` has 513 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
7-580: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]
37: Avoid deeply nested control flow statements. [structure]
38: Avoid deeply nested control flow statements. [structure]
202: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
206-207: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
229: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
231-232: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
258-259: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
297-330: Function `sortLines` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
304-305: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
369-370: Avoid deeply nested control flow statements. [structure]
460-462: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
463-465: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
504-513: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
514-523: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/keymaps/vim-f6507d8ac34294faa290af85950c8560d3754210043b57c89b9e580bda8b8565.js (89 issues) ==
1-5067: File `vim-f6507d8ac34294faa290af85950c8560d3754210043b57c89b9e580bda8b8565.js` has 4305 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
238-5063: Function `Vim` has 4122 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
323: Avoid too many `return` statements within this function. [structure]
386: Function `defineOption` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
406-436: Function `setOption` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
445-457: Consider simplifying this complex logical expression. [structure]
475-539: Function `createCircularJumpList` has 60 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
720-844: Function `findKey` has 107 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
801: Avoid too many `return` statements within this function. [structure]
808: Avoid too many `return` statements within this function. [structure]
981-1028: Function `pushText` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
981: Function `pushText` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1205-1330: Function `processSearch` has 106 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1242-1249: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1331-1375: Function `processEx` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1350-1361: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1354-1361: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1376-1567: Function `evalInput` has 170 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1505-1551: Consider simplifying this complex logical expression. [structure]
1521-1523: Avoid deeply nested control flow statements. [structure]
1524-1526: Avoid deeply nested control flow statements. [structure]
1584-1587: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1593-1596: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1634-1671: Function `jumpToMark` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1678-1714: Function `moveByLines` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1715-1742: Function `moveByDisplayLines` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1853-1911: Function `textObjectManipulation` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1947-1991: Function `change` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1993-2026: Function `delete` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2049: Function `changeCase` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2049-2079: Function `changeCase` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2111-2147: Function `scroll` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2178-2243: Function `enterInsertMode` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2244-2277: Function `toggleVisualMode` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2306-2338: Function `joinLines` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2357-2503: Function `paste` has 131 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2520-2563: Function `replace` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2564-2591: Function `incrementNumberToken` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2654-2657: Consider simplifying this complex logical expression. [structure]
2718-2723: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2724-2729: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2760-2796: Function `selectBlock` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2816-2864: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2816-2864: Function `getSelectedAreaRange` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2826-2857: Function `getLastSelectedAreaRange` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2919-2967: Function `makeCmSelection` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3045-3084: Function `expandWordUnderCursor` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3045: Function `expandWordUnderCursor` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3170-3217: Function `findSymbol` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3236: Function `findWord` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3236-3294: Function `findWord` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3265-3267: Avoid deeply nested control flow statements. [structure]
3270-3279: Avoid deeply nested control flow statements. [structure]
3308-3351: Function `moveToWord` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3308: Function `moveToWord` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3331-3350: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3340-3350: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3385: Function `charIdxInLine` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3392-3397: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3397-3402: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3406: Function `findParagraph` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3406-3452: Function `findParagraph` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3456-3496: Function `selectCompanionObject` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3501-3557: Function `findBeginningAndEnd` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3592: Function `dialog` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3629-3665: Function `translateRegex` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3671-3705: Function `translateRegexReplace` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3828-3863: Function `searchOverlay` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3959-4021: Function `_processCommand` has 54 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4102-4145: Function `map` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4181-4186: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
4194-4199: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
4210-4255: Function `set` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4215-4220: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
4291-4365: Function `sort` has 73 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4300-4309: Consider simplifying this complex logical expression. [structure]
4366-4423: Function `global` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4385-4395: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4424-4503: Function `substitute` has 69 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4473-4483: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4525-4585: Function `delmarks` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4578: Avoid too many `return` statements within this function. [structure]
4600-4601: Function `doReplace` has 9 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4600-4693: Function `doReplace` has 82 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4701-4753: Function `exitInsertMode` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4759: Function `mapCommand` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4796-4830: Function `executeMacroRegister` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4975-5020: Function `repeatLastEdit` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5022-5059: Function `repeatInsertModeChanges` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/apl-d5529fdc35ca46c21a43019006cbd2a72f32700ddb094938a35c1af49c0cc1f4.js (9 issues) ==
104-168: Function `token` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
126: Avoid too many `return` statements within this function. [structure]
136: Avoid too many `return` statements within this function. [structure]
139: Avoid too many `return` statements within this function. [structure]
142: Avoid too many `return` statements within this function. [structure]
155: Avoid too many `return` statements within this function. [structure]
159: Avoid too many `return` statements within this function. [structure]
163: Avoid too many `return` statements within this function. [structure]
167: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/asciiarmor-271fc39c3c0e66aa081cbee6dfc61fce8b611b5ea0bfd40520266e6e6d4bf502.js (9 issues) ==
22-60: Function `token` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
43: Avoid too many `return` statements within this function. [structure]
46: Avoid deeply nested control flow statements. [structure]
46: Avoid too many `return` statements within this function. [structure]
48: Avoid too many `return` statements within this function. [structure]
50-55: Avoid deeply nested control flow statements. [structure]
51: Avoid too many `return` statements within this function. [structure]
54: Avoid too many `return` statements within this function. [structure]
58: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/asn.1-4d31fa9c5485913a7a7158854ce727664b6e8c5cfc6992f5037ee3a353fb1f89.js (21 issues) ==
29-66: Function `tokenBase` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
31-34: Identical blocks of code found in 7 locations. Consider refactoring. [duplication]
51: Avoid too many `return` statements within this function. [structure]
56: Avoid too many `return` statements within this function. [structure]
57: Avoid too many `return` statements within this function. [structure]
58: Avoid too many `return` statements within this function. [structure]
59: Avoid too many `return` statements within this function. [structure]
60: Avoid too many `return` statements within this function. [structure]
61: Avoid too many `return` statements within this function. [structure]
62: Avoid too many `return` statements within this function. [structure]
63: Avoid too many `return` statements within this function. [structure]
65: Avoid too many `return` statements within this function. [structure]
68-88: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
90: Function `Context` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
90-96: Identical blocks of code found in 10 locations. Consider refactoring. [duplication]
97-102: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
103-108: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
111-159: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
121-154: Function `token` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
147-150: Consider simplifying this complex logical expression. [structure]
162-166: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/asterisk-109bc084c7d6d252fe36e1ebacf4e8dd776e1cab2e0e7070770e2483cfb5985e.js (13 issues) ==
67-123: Function `basicToken` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
96: Avoid too many `return` statements within this function. [structure]
105: Avoid too many `return` statements within this function. [structure]
121: Avoid too many `return` statements within this function. [structure]
136-191: Function `token` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
173: Avoid too many `return` statements within this function. [structure]
175: Avoid too many `return` statements within this function. [structure]
179: Avoid deeply nested control flow statements. [structure]
179: Avoid too many `return` statements within this function. [structure]
183-185: Avoid deeply nested control flow statements. [structure]
184: Avoid too many `return` statements within this function. [structure]
187: Avoid too many `return` statements within this function. [structure]
190: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/brainfuck-79b844feea46c044831a62feb8b11588cec14f143218a11f6bc17f98202f7158.js (5 issues) ==
6-85: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
39-81: Function `token` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
65: Avoid too many `return` statements within this function. [structure]
68: Avoid too many `return` statements within this function. [structure]
76: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/clike-9792dfe087fe17fa688c4c285134a9a6659d2153cea51644e37757c3f635fc5f.js (25 issues) ==
1-787: File `clike-9792dfe087fe17fa688c4c285134a9a6659d2153cea51644e37757c3f635fc5f.js` has 714 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
14: Function `Context` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
72-122: Function `tokenBase` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
78-81: Identical blocks of code found in 7 locations. Consider refactoring. [duplication]
91-100: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
94: Avoid too many `return` statements within this function. [structure]
98: Avoid too many `return` statements within this function. [structure]
103: Avoid too many `return` statements within this function. [structure]
113: Avoid too many `return` statements within this function. [structure]
115: Avoid too many `return` statements within this function. [structure]
118: Avoid too many `return` statements within this function. [structure]
120: Avoid too many `return` statements within this function. [structure]
121: Avoid too many `return` statements within this function. [structure]
124-135: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
137-147: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
167-213: Function `token` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
190-194: Consider simplifying this complex logical expression. [structure]
196-200: Consider simplifying this complex logical expression. [structure]
235: Avoid too many `return` statements within this function. [structure]
237: Avoid too many `return` statements within this function. [structure]
239-240: Avoid too many `return` statements within this function. [structure]
251-255: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
313: Avoid too many `return` statements within this function. [structure]
346-364: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
411-415: Consider simplifying this complex logical expression. [structure]

== public/assets/codemirror/modes/clojure-93253467263622dac299cee5362660ae9f5330f1dcee8b36bf72083f66c96fea.js (11 issues) ==
21-22: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
26-30: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
42-92: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
123-127: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
139-142: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
145-148: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
162-165: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
196-291: Function `token` has 74 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
197-200: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
209-220: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
278-286: Avoid deeply nested control flow statements. [structure]

== public/assets/codemirror/modes/cmake-bf9c26a3fa847be2fd269bc61a94ecb42960636a03ad57c8dfab6f3caf851b15.js (9 issues) ==
4-97: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
17-35: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
37-78: Function `tokenize` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
61: Avoid too many `return` statements within this function. [structure]
68: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
74: Avoid too many `return` statements within this function. [structure]
77: Avoid too many `return` statements within this function. [structure]
80-87: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/cobol-fddf24b34332af88293638330bfecacc3608da625dced3683c72c8ac6b63902d.js (8 issues) ==
20-22: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
23-27: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
30-80: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
153-156: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
158-161: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
169-172: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
185-246: Function `token` has 58 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
229-233: Avoid deeply nested control flow statements. [structure]

== public/assets/codemirror/modes/coffeescript-94b47788cc50c96bc80c78e141a299868ea0f8c67560ec808313f7cd170027f0.js (18 issues) ==
1-357: File `coffeescript-94b47788cc50c96bc80c78e141a299868ea0f8c67560ec808313f7cd170027f0.js` has 287 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
51-178: Function `tokenBase` has 95 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
79: Avoid too many `return` statements within this function. [structure]
85: Avoid too many `return` statements within this function. [structure]
91: Avoid too many `return` statements within this function. [structure]
113: Avoid too many `return` statements within this function. [structure]
130: Avoid too many `return` statements within this function. [structure]
137: Avoid too many `return` statements within this function. [structure]
143: Avoid too many `return` statements within this function. [structure]
153: Avoid too many `return` statements within this function. [structure]
156: Avoid too many `return` statements within this function. [structure]
160: Avoid too many `return` statements within this function. [structure]
164: Avoid too many `return` statements within this function. [structure]
168: Avoid too many `return` statements within this function. [structure]
172: Avoid too many `return` statements within this function. [structure]
177: Avoid too many `return` statements within this function. [structure]
184-194: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
267-310: Function `tokenLexer` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/commonlisp-bed1986ac649a697d53d9f10d0862b818f9aea839b1d8da514d2f024d8bf3de6.js (18 issues) ==
30-61: Function `base` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
38: Avoid too many `return` statements within this function. [structure]
39: Avoid too many `return` statements within this function. [structure]
40: Avoid too many `return` statements within this function. [structure]
41-60: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
42: Avoid too many `return` statements within this function. [structure]
43: Avoid too many `return` statements within this function. [structure]
46: Avoid too many `return` statements within this function. [structure]
47: Avoid too many `return` statements within this function. [structure]
48: Avoid too many `return` statements within this function. [structure]
49: Avoid too many `return` statements within this function. [structure]
50: Avoid too many `return` statements within this function. [structure]
51: Avoid too many `return` statements within this function. [structure]
54: Avoid too many `return` statements within this function. [structure]
56: Avoid too many `return` statements within this function. [structure]
57: Avoid too many `return` statements within this function. [structure]
58: Avoid too many `return` statements within this function. [structure]
59: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/crystal-ba52d5253fe9b62756cc323ed5af02be9bfea0ecfda1fe41ee39391aa216792a.js (29 issues) ==
1-392: File `crystal-ba52d5253fe9b62756cc323ed5af02be9bfea0ecfda1fe41ee39391aa216792a.js` has 308 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
62-234: Function `tokenBase` has 127 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
89: Avoid too many `return` statements within this function. [structure]
91: Avoid too many `return` statements within this function. [structure]
107: Avoid too many `return` statements within this function. [structure]
109: Avoid too many `return` statements within this function. [structure]
112: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
124: Avoid too many `return` statements within this function. [structure]
130: Avoid too many `return` statements within this function. [structure]
135: Avoid too many `return` statements within this function. [structure]
141: Avoid too many `return` statements within this function. [structure]
142-143: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
144: Avoid too many `return` statements within this function. [structure]
147: Avoid too many `return` statements within this function. [structure]
152: Avoid too many `return` statements within this function. [structure]
173: Avoid too many `return` statements within this function. [structure]
176: Avoid too many `return` statements within this function. [structure]
183: Avoid too many `return` statements within this function. [structure]
190: Avoid too many `return` statements within this function. [structure]
202: Avoid too many `return` statements within this function. [structure]
207: Avoid too many `return` statements within this function. [structure]
213: Avoid too many `return` statements within this function. [structure]
217: Avoid too many `return` statements within this function. [structure]
223: Avoid too many `return` statements within this function. [structure]
229: Avoid too many `return` statements within this function. [structure]
233: Avoid too many `return` statements within this function. [structure]
314-351: Function `tokenQuote` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
349: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/css-a8ebbf89eb650a7b5a738eb03a07843107680c71230378065871a7036bb1e03e.js (36 issues) ==
1-826: File `css-a8ebbf89eb650a7b5a738eb03a07843107680c71230378065871a7036bb1e03e.js` has 757 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
4-825: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
38-91: Function `tokenBase` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
54: Avoid too many `return` statements within this function. [structure]
57: Avoid too many `return` statements within this function. [structure]
60: Avoid too many `return` statements within this function. [structure]
64: Avoid too many `return` statements within this function. [structure]
68: Avoid too many `return` statements within this function. [structure]
69: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
74: Avoid too many `return` statements within this function. [structure]
76: Avoid too many `return` statements within this function. [structure]
78: Avoid too many `return` statements within this function. [structure]
79-90: Consider simplifying this complex logical expression. [structure]
84: Avoid too many `return` statements within this function. [structure]
87: Avoid too many `return` statements within this function. [structure]
89: Avoid too many `return` statements within this function. [structure]
159-191: Function `top` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
169: Avoid too many `return` statements within this function. [structure]
172: Avoid too many `return` statements within this function. [structure]
174: Avoid too many `return` statements within this function. [structure]
176: Avoid too many `return` statements within this function. [structure]
182: Avoid too many `return` statements within this function. [structure]
184: Avoid too many `return` statements within this function. [structure]
186: Avoid too many `return` statements within this function. [structure]
188: Avoid too many `return` statements within this function. [structure]
190: Avoid too many `return` statements within this function. [structure]
210: Avoid too many `return` statements within this function. [structure]
213: Avoid too many `return` statements within this function. [structure]
215: Avoid too many `return` statements within this function. [structure]
235: Avoid too many `return` statements within this function. [structure]
237: Avoid too many `return` statements within this function. [structure]
252: Avoid too many `return` statements within this function. [structure]
272-301: Function `atBlock` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
300: Avoid too many `return` statements within this function. [structure]
397-402: Consider simplifying this complex logical expression. [structure]

== public/assets/codemirror/modes/cypher-aa844a3fdf54f36bc995226fd44ec8df5c68bad18c225d8ee74b437ec994f5be.js (8 issues) ==
21-48: Function `tokenBase` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
40: Avoid too many `return` statements within this function. [structure]
43: Avoid too many `return` statements within this function. [structure]
44: Avoid too many `return` statements within this function. [structure]
45: Avoid too many `return` statements within this function. [structure]
46: Avoid too many `return` statements within this function. [structure]
77-115: Function `token` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
88-90: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/d-93a25aadaeb926dc963d0213daf87a73aef219832d293a90a67a2b62b18c9f49.js (19 issues) ==
27-75: Function `tokenBase` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
33-36: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
48: Avoid too many `return` statements within this function. [structure]
52: Avoid too many `return` statements within this function. [structure]
56: Avoid too many `return` statements within this function. [structure]
61: Avoid too many `return` statements within this function. [structure]
67: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
73: Avoid too many `return` statements within this function. [structure]
74: Avoid too many `return` statements within this function. [structure]
77-88: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
90-100: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
102-112: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
114-120: Identical blocks of code found in 10 locations. Consider refactoring. [duplication]
114: Function `Context` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
121-126: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
127-132: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
180-182: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
189-193: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/dart-a0ca22f4f5727ecca1b4a28fcec45bf8aa087f4b6d5ecd58b18adf6559755334.js (2 issues) ==
4-157: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]
23-27: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/django-2f270b2aa1aa1e397948656d68f484ad3bc52c9623c51925ea3f689f284c0253.js (39 issues) ==
1-357: File `django-2f270b2aa1aa1e397948656d68f484ad3bc52c9623c51925ea3f689f284c0253.js` has 266 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
4-356: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]
25-37: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
94-191: Function `inVariable` has 71 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
96-112: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
115-131: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
124: Avoid too many `return` statements within this function. [structure]
127: Avoid too many `return` statements within this function. [structure]
134-141: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
139: Avoid too many `return` statements within this function. [structure]
147: Avoid too many `return` statements within this function. [structure]
154: Avoid too many `return` statements within this function. [structure]
159: Avoid too many `return` statements within this function. [structure]
163-169: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
165: Avoid too many `return` statements within this function. [structure]
168: Avoid too many `return` statements within this function. [structure]
175: Avoid too many `return` statements within this function. [structure]
185: Avoid too many `return` statements within this function. [structure]
190: Avoid too many `return` statements within this function. [structure]
193-316: Function `inTag` has 89 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
195-211: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
214-230: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
223: Avoid too many `return` statements within this function. [structure]
226: Avoid too many `return` statements within this function. [structure]
233-240: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
238: Avoid too many `return` statements within this function. [structure]
246: Avoid too many `return` statements within this function. [structure]
253: Avoid too many `return` statements within this function. [structure]
258: Avoid too many `return` statements within this function. [structure]
262-268: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
264: Avoid too many `return` statements within this function. [structure]
267: Avoid too many `return` statements within this function. [structure]
272: Avoid too many `return` statements within this function. [structure]
277: Avoid too many `return` statements within this function. [structure]
286: Avoid too many `return` statements within this function. [structure]
293: Avoid too many `return` statements within this function. [structure]
310: Avoid too many `return` statements within this function. [structure]
315: Avoid too many `return` statements within this function. [structure]
349-353: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/dockerfile-e8b27b2ee18dddcc7f1baee49612015f5f9c113a46dc23e46d291cbc6f61c5dc.js (1 issue) ==
4-79: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/dtd-d71eea3d54c5d6b39d081dbcdb3894ff3934ae7e14fab88e1c892cab1701c8c4.js (8 issues) ==
38: Avoid too many `return` statements within this function. [structure]
39: Avoid too many `return` statements within this function. [structure]
40: Avoid too many `return` statements within this function. [structure]
43: Avoid too many `return` statements within this function. [structure]
47: Avoid too many `return` statements within this function. [structure]
48: Avoid too many `return` statements within this function. [structure]
51: Avoid too many `return` statements within this function. [structure]
55-65: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/dylan-5124ad5aea90c45065aebbc2d65ec7266ac1ec2fc974622818b943a8260368bf.js (27 issues) ==
1-345: File `dylan-5124ad5aea90c45065aebbc2d65ec7266ac1ec2fc974622818b943a8260368bf.js` has 268 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
157-285: Function `tokenBase` has 115 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
190: Avoid too many `return` statements within this function. [structure]
196: Avoid too many `return` statements within this function. [structure]
202: Avoid too many `return` statements within this function. [structure]
208: Avoid too many `return` statements within this function. [structure]
213: Avoid too many `return` statements within this function. [structure]
218: Avoid too many `return` statements within this function. [structure]
221: Avoid too many `return` statements within this function. [structure]
224: Avoid too many `return` statements within this function. [structure]
229-237: Avoid deeply nested control flow statements. [structure]
234: Avoid too many `return` statements within this function. [structure]
236: Avoid too many `return` statements within this function. [structure]
238: Avoid too many `return` statements within this function. [structure]
239-257: Avoid deeply nested control flow statements. [structure]
244: Avoid too many `return` statements within this function. [structure]
247: Avoid too many `return` statements within this function. [structure]
251: Avoid too many `return` statements within this function. [structure]
254: Avoid too many `return` statements within this function. [structure]
256: Avoid too many `return` statements within this function. [structure]
264: Avoid too many `return` statements within this function. [structure]
269: Avoid too many `return` statements within this function. [structure]
272: Avoid too many `return` statements within this function. [structure]
277: Avoid too many `return` statements within this function. [structure]
279: Avoid too many `return` statements within this function. [structure]
282: Avoid too many `return` statements within this function. [structure]
331-336: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/ebnf-173521d01f1ab995f4b707cee7f6d167a415dede7b5a65444816f75c3a278544.js (25 issues) ==
34-190: Function `token` has 135 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
57-67: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
105-107: Avoid deeply nested control flow statements. [structure]
109-114: Avoid deeply nested control flow statements. [structure]
117: Avoid too many `return` statements within this function. [structure]
125: Avoid too many `return` statements within this function. [structure]
130: Avoid too many `return` statements within this function. [structure]
133: Avoid too many `return` statements within this function. [structure]
135: Avoid too many `return` statements within this function. [structure]
137: Avoid too many `return` statements within this function. [structure]
142: Avoid too many `return` statements within this function. [structure]
146: Avoid too many `return` statements within this function. [structure]
150: Avoid too many `return` statements within this function. [structure]
157: Avoid too many `return` statements within this function. [structure]
161: Avoid too many `return` statements within this function. [structure]
163: Avoid too many `return` statements within this function. [structure]
167: Avoid too many `return` statements within this function. [structure]
173: Avoid too many `return` statements within this function. [structure]
175: Avoid too many `return` statements within this function. [structure]
176-188: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
178: Avoid too many `return` statements within this function. [structure]
180: Avoid too many `return` statements within this function. [structure]
182: Avoid too many `return` statements within this function. [structure]
185: Avoid too many `return` statements within this function. [structure]
189: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/ecl-69e86a22e2d48eafc5edfdd928545e06e7ef7bd8a2b5f2b8764e15cfad8cc9b6.js (24 issues) ==
16-20: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
41-105: Function `tokenBase` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
47-50: Identical blocks of code found in 7 locations. Consider refactoring. [duplication]
59-68: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
62: Avoid too many `return` statements within this function. [structure]
66: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
77: Avoid too many `return` statements within this function. [structure]
80: Avoid too many `return` statements within this function. [structure]
83: Avoid too many `return` statements within this function. [structure]
85: Avoid deeply nested control flow statements. [structure]
86: Avoid too many `return` statements within this function. [structure]
87-102: Avoid deeply nested control flow statements. [structure]
89: Avoid too many `return` statements within this function. [structure]
99: Avoid too many `return` statements within this function. [structure]
103: Avoid too many `return` statements within this function. [structure]
104: Avoid too many `return` statements within this function. [structure]
107-118: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
120-130: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
132: Function `Context` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
132-138: Identical blocks of code found in 10 locations. Consider refactoring. [duplication]
142-147: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
161-188: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
195-197: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/eiffel-14dfd644894ceb99314428e4fb18d458a41c10fde87421ef9b465c71b51b7a09.js (5 issues) ==
15-19: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
106: Avoid too many `return` statements within this function. [structure]
110: Avoid too many `return` statements within this function. [structure]
113: Avoid too many `return` statements within this function. [structure]
115: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/elm-306d7d292e7a13457ccbe2bc0f0974a508f9e46af311580206d8c68ecb4d5797.js (16 issues) ==
32-115: Function `normal` has 73 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
56: Avoid too many `return` statements within this function. [structure]
60: Avoid too many `return` statements within this function. [structure]
66: Avoid too many `return` statements within this function. [structure]
67: Avoid too many `return` statements within this function. [structure]
73: Avoid too many `return` statements within this function. [structure]
77-86: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
80: Avoid too many `return` statements within this function. [structure]
84: Avoid too many `return` statements within this function. [structure]
93-97: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
98: Avoid too many `return` statements within this function. [structure]
102-108: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
106: Avoid too many `return` statements within this function. [structure]
110: Avoid too many `return` statements within this function. [structure]
113: Avoid too many `return` statements within this function. [structure]
195-199: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/erlang-b8404454e5eb0bfaf0eeb9caccfb935030674a757932798c336b997cb5abc4af.js (45 issues) ==
1-619: File `erlang-b8404454e5eb0bfaf0eeb9caccfb935030674a757932798c336b997cb5abc4af.js` has 469 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
103-286: Function `tokenizer` has 138 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
127: Avoid too many `return` statements within this function. [structure]
136: Avoid too many `return` statements within this function. [structure]
141: Avoid too many `return` statements within this function. [structure]
145-149: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
148: Avoid too many `return` statements within this function. [structure]
152-156: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
155: Avoid too many `return` statements within this function. [structure]
161: Avoid too many `return` statements within this function. [structure]
163: Avoid too many `return` statements within this function. [structure]
168: Avoid too many `return` statements within this function. [structure]
176: Avoid too many `return` statements within this function. [structure]
179: Avoid too many `return` statements within this function. [structure]
182: Avoid too many `return` statements within this function. [structure]
188: Avoid too many `return` statements within this function. [structure]
194: Avoid too many `return` statements within this function. [structure]
203: Avoid too many `return` statements within this function. [structure]
209: Avoid too many `return` statements within this function. [structure]
211: Avoid too many `return` statements within this function. [structure]
217: Avoid too many `return` statements within this function. [structure]
219: Avoid too many `return` statements within this function. [structure]
221: Avoid too many `return` statements within this function. [structure]
225: Avoid too many `return` statements within this function. [structure]
227: Avoid too many `return` statements within this function. [structure]
230: Avoid too many `return` statements within this function. [structure]
232: Avoid too many `return` statements within this function. [structure]
249-259: Avoid deeply nested control flow statements. [structure]
262: Avoid too many `return` statements within this function. [structure]
267: Avoid too many `return` statements within this function. [structure]
272: Avoid too many `return` statements within this function. [structure]
277: Avoid too many `return` statements within this function. [structure]
282: Avoid too many `return` statements within this function. [structure]
285: Avoid too many `return` statements within this function. [structure]
350-382: Function `rval` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
502-543: Function `indenter` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
518: Avoid too many `return` statements within this function. [structure]
520: Avoid too many `return` statements within this function. [structure]
523: Avoid too many `return` statements within this function. [structure]
526: Avoid too many `return` statements within this function. [structure]
530: Avoid too many `return` statements within this function. [structure]
533: Avoid too many `return` statements within this function. [structure]
535: Avoid too many `return` statements within this function. [structure]
538: Avoid too many `return` statements within this function. [structure]
541: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/factor-ddd408187771e12deb19a7f9a111ad2946b28f67a6b5c1ef3d3f456d70243e1e.js (1 issue) ==
8-83: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/fcl-5982d80bfa95130455fa019db71e47837b61dd81af4a38ed733c704006123363.js (7 issues) ==
48-86: Function `tokenBase` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
51-60: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
82: Avoid too many `return` statements within this function. [structure]
84: Avoid too many `return` statements within this function. [structure]
85: Avoid too many `return` statements within this function. [structure]
101-107: Identical blocks of code found in 10 locations. Consider refactoring. [duplication]
101: Function `Context` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/forth-99d52d4994ed7183bd1581077d4efbaf726f49ea2a5d1f2b2295932402d50ffa.js (17 issues) ==
86-176: Function `token` has 73 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
109: Avoid too many `return` statements within this function. [structure]
116: Avoid too many `return` statements within this function. [structure]
120: Avoid too many `return` statements within this function. [structure]
123: Avoid too many `return` statements within this function. [structure]
131: Avoid too many `return` statements within this function. [structure]
137: Avoid too many `return` statements within this function. [structure]
142: Avoid too many `return` statements within this function. [structure]
145: Avoid too many `return` statements within this function. [structure]
148-152: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
151: Avoid too many `return` statements within this function. [structure]
155-159: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
158: Avoid too many `return` statements within this function. [structure]
160-164: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
163: Avoid too many `return` statements within this function. [structure]
168: Avoid too many `return` statements within this function. [structure]
174: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/fortran-d0f8c98c879a02a197d06bcf931de5462e15fe80a52cf4101f06d75c089fb72e.js (9 issues) ==
117-153: Function `tokenBase` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
128-131: Identical blocks of code found in 7 locations. Consider refactoring. [duplication]
137: Avoid too many `return` statements within this function. [structure]
141: Avoid too many `return` statements within this function. [structure]
147: Avoid too many `return` statements within this function. [structure]
150: Avoid too many `return` statements within this function. [structure]
152: Avoid too many `return` statements within this function. [structure]
155-168: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
177-182: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/gas-64f40bde7bf8c35b5590841d7829e85ba6aa35c6f073915cebede4fa3b8e9c7f.js (15 issues) ==
1-346: File `gas-64f40bde7bf8c35b5590841d7829e85ba6aa35c6f073915cebede4fa3b8e9c7f.js` has 287 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
144-189: Function `x86` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
191-225: Function `armv6` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
264-337: Function `token` has 60 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
275-280: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
289: Avoid too many `return` statements within this function. [structure]
296: Avoid too many `return` statements within this function. [structure]
301: Avoid too many `return` statements within this function. [structure]
305: Avoid too many `return` statements within this function. [structure]
309: Avoid too many `return` statements within this function. [structure]
315: Avoid too many `return` statements within this function. [structure]
318: Avoid too many `return` statements within this function. [structure]
324: Avoid too many `return` statements within this function. [structure]
328: Avoid too many `return` statements within this function. [structure]
334: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/gfm-c63738ecc2f23610b524c50b0eb79d8309f5f103cef3e2ae0e887d2087082d5b.js (8 issues) ==
4-130: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]
37-111: Function `token` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
74: Avoid too many `return` statements within this function. [structure]
79: Avoid too many `return` statements within this function. [structure]
89: Avoid too many `return` statements within this function. [structure]
95: Avoid too many `return` statements within this function. [structure]
107: Avoid too many `return` statements within this function. [structure]
110: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/gherkin-61a7e9859e5b2b026e42851abfc911fc218405319d6935fb58ad99ab603467bf.js (18 issues) ==
46-172: Function `token` has 88 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
93: Avoid too many `return` statements within this function. [structure]
100: Avoid too many `return` statements within this function. [structure]
104: Avoid too many `return` statements within this function. [structure]
114: Avoid too many `return` statements within this function. [structure]
117-171: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
123: Avoid too many `return` statements within this function. [structure]
126-171: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
131: Avoid too many `return` statements within this function. [structure]
134-171: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
139: Avoid too many `return` statements within this function. [structure]
142-171: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
148: Avoid too many `return` statements within this function. [structure]
151-171: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
156: Avoid too many `return` statements within this function. [structure]
160: Avoid too many `return` statements within this function. [structure]
164: Avoid too many `return` statements within this function. [structure]
170: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/go-3cca40d21b95a0ca54ad1f38892ff5556bdb0fb02e4015c568079b23e32040d5.js (12 issues) ==
40-82: Function `tokenBase` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
42-45: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
46-55: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
60-69: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
67: Avoid too many `return` statements within this function. [structure]
72: Avoid too many `return` statements within this function. [structure]
78: Avoid too many `return` statements within this function. [structure]
80: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]
97-107: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
109-115: Identical blocks of code found in 10 locations. Consider refactoring. [duplication]
109: Function `Context` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/groovy-cb1f286d25a0ea93545488395197732f8ed38738cfb6e748850d99d58682cd42.js (18 issues) ==
15-19: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
31-78: Function `tokenBase` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
52: Avoid too many `return` statements within this function. [structure]
55: Avoid too many `return` statements within this function. [structure]
60: Avoid too many `return` statements within this function. [structure]
64: Avoid too many `return` statements within this function. [structure]
67: Avoid too many `return` statements within this function. [structure]
68: Avoid too many `return` statements within this function. [structure]
69: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
75: Avoid too many `return` statements within this function. [structure]
77: Avoid too many `return` statements within this function. [structure]
112-115: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
143: Function `Context` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
143-149: Identical blocks of code found in 10 locations. Consider refactoring. [duplication]
153-158: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
173-210: Function `token` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
217-219: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/haml-611c3824bb6b5acad56770764bcc72a92be4cfd8270409a373dca5aee4301dd6.js (10 issues) ==
4-161: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]
20-30: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
41-96: Function `html` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
64: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
78: Avoid too many `return` statements within this function. [structure]
86: Avoid too many `return` statements within this function. [structure]
90: Avoid too many `return` statements within this function. [structure]
95: Avoid too many `return` statements within this function. [structure]
122-156: Function `token` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/handlebars-896b7a92e92d3a962f007e4c67df26d4b9d8ccae8ec1030ad272c08f59a7eb07.js (1 issue) ==
4-62: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/haskell-bd9e9fe468cbef16b192342588f4ce34204d2ae8fced0fc1bad5e08d396e7919.js (18 issues) ==
32-123: Function `normal` has 81 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
59: Avoid too many `return` statements within this function. [structure]
63: Avoid too many `return` statements within this function. [structure]
69: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
76: Avoid too many `return` statements within this function. [structure]
80-89: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
83: Avoid too many `return` statements within this function. [structure]
87: Avoid too many `return` statements within this function. [structure]
95-99: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
100: Avoid too many `return` statements within this function. [structure]
104: Avoid too many `return` statements within this function. [structure]
107-113: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
111: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
122: Avoid too many `return` statements within this function. [structure]
182-244: Function `wellKnownWords` has 54 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
252-256: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/haskell-literate-3c411fd891f8b5ac3e866516281a1f0d0fe5ae58b9b506d7fb228a48cf151057.js (1 issue) ==
4-43: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/haxe-f11e989ae1491faa2fa2e71029b88a98afec4116b4f0db19fcc0467f9c903b8f.js (37 issues) ==
1-516: File `haxe-f11e989ae1491faa2fa2e71029b88a98afec4116b4f0db19fcc0467f9c903b8f.js` has 449 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
59-108: Function `haxeTokenBase` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
74: Avoid too many `return` statements within this function. [structure]
77: Avoid too many `return` statements within this function. [structure]
80: Avoid too many `return` statements within this function. [structure]
83: Avoid too many `return` statements within this function. [structure]
87: Avoid too many `return` statements within this function. [structure]
91: Avoid too many `return` statements within this function. [structure]
94: Avoid too many `return` statements within this function. [structure]
100: Avoid too many `return` statements within this function. [structure]
104-105: Avoid too many `return` statements within this function. [structure]
134: Function `HaxeLexical` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
148: Function `parseHaxe` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
255: Avoid too many `return` statements within this function. [structure]
256: Avoid too many `return` statements within this function. [structure]
257: Avoid too many `return` statements within this function. [structure]
258: Avoid too many `return` statements within this function. [structure]
259-260: Avoid too many `return` statements within this function. [structure]
261: Avoid too many `return` statements within this function. [structure]
262-263: Avoid too many `return` statements within this function. [structure]
264: Avoid too many `return` statements within this function. [structure]
265: Avoid too many `return` statements within this function. [structure]
266-267: Avoid too many `return` statements within this function. [structure]
268: Avoid too many `return` statements within this function. [structure]
269: Avoid too many `return` statements within this function. [structure]
270: Avoid too many `return` statements within this function. [structure]
277: Avoid too many `return` statements within this function. [structure]
278: Avoid too many `return` statements within this function. [structure]
279: Avoid too many `return` statements within this function. [structure]
280: Avoid too many `return` statements within this function. [structure]
281: Avoid too many `return` statements within this function. [structure]
293: Avoid too many `return` statements within this function. [structure]
294: Avoid too many `return` statements within this function. [structure]
432: Avoid too many `return` statements within this function. [structure]
433: Avoid too many `return` statements within this function. [structure]
434: Avoid too many `return` statements within this function. [structure]
455-508: Function `token` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/htmlembedded-9ba9289ebfe4bb718a6218cd107001584d887884d9fc11095f2799b1e8524da7.js (1 issue) ==
4-28: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/htmlmixed-36e12754415df95058e735c6fa50fd8bc2b8dca8d981199453d05b9be7367642.js (2 issues) ==
4-152: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
87-114: Function `html` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/http-3a1a5459b6620405e43b554448417861940954fc75c029cd4e26b8eb06a03866.js (3 issues) ==
46: Avoid too many `return` statements within this function. [structure]
48: Avoid too many `return` statements within this function. [structure]
50: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/idl-20b940faf7f577fe1e79aae4aacf7e02cd6f6a5e12327f4a52b831fe244bc2df.js (10 issues) ==
1-291: File `idl-20b940faf7f577fe1e79aae4aacf7e02cd6f6a5e12327f4a52b831fe244bc2df.js` has 266 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
255-262: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
261: Avoid too many `return` statements within this function. [structure]
265: Avoid too many `return` statements within this function. [structure]
266: Avoid too many `return` statements within this function. [structure]
269: Avoid too many `return` statements within this function. [structure]
270: Avoid too many `return` statements within this function. [structure]
271: Avoid too many `return` statements within this function. [structure]
274: Avoid too many `return` statements within this function. [structure]
278: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/jade-e83f51feedbb5a1bd7033f2db4fd4d16b0cbf9b3f9a9c541daaa057823f0f747.js (4 issues) ==
1-591: File `jade-e83f51feedbb5a1bd7033f2db4fd4d16b0cbf9b3f9a9c541daaa057823f0f747.js` has 505 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
70-103: Function `copy` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
375-417: Function `attrsContinued` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
537-580: Function `nextToken` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/javascript-f9328b75772f3c42df78005a0f00a8e83fbaec80524b3551a5379d7abdbb5d38.js (58 issues) ==
1-749: File `javascript-f9328b75772f3c42df78005a0f00a8e83fbaec80524b3551a5379d7abdbb5d38.js` has 674 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
6-748: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
31-79: Function `keywords` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
103-158: Function `tokenBase` has 54 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
115: Avoid too many `return` statements within this function. [structure]
118: Avoid too many `return` statements within this function. [structure]
121: Avoid too many `return` statements within this function. [structure]
124: Avoid too many `return` statements within this function. [structure]
127: Avoid too many `return` statements within this function. [structure]
131: Avoid too many `return` statements within this function. [structure]
134: Avoid too many `return` statements within this function. [structure]
138: Avoid too many `return` statements within this function. [structure]
141: Avoid too many `return` statements within this function. [structure]
145: Avoid too many `return` statements within this function. [structure]
148: Avoid too many `return` statements within this function. [structure]
151: Avoid too many `return` statements within this function. [structure]
155-156: Avoid too many `return` statements within this function. [structure]
238: Function `JSLexical` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
256: Function `parseJS` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
351: Avoid too many `return` statements within this function. [structure]
355: Avoid too many `return` statements within this function. [structure]
357: Avoid too many `return` statements within this function. [structure]
358: Avoid too many `return` statements within this function. [structure]
359: Avoid too many `return` statements within this function. [structure]
360-361: Avoid too many `return` statements within this function. [structure]
362: Avoid too many `return` statements within this function. [structure]
363: Avoid too many `return` statements within this function. [structure]
364-365: Avoid too many `return` statements within this function. [structure]
366: Avoid too many `return` statements within this function. [structure]
367: Avoid too many `return` statements within this function. [structure]
368: Avoid too many `return` statements within this function. [structure]
369: Avoid too many `return` statements within this function. [structure]
370: Avoid too many `return` statements within this function. [structure]
371: Avoid too many `return` statements within this function. [structure]
389: Avoid too many `return` statements within this function. [structure]
390: Avoid too many `return` statements within this function. [structure]
391: Avoid too many `return` statements within this function. [structure]
392: Avoid too many `return` statements within this function. [structure]
393: Avoid too many `return` statements within this function. [structure]
394: Avoid too many `return` statements within this function. [structure]
395: Avoid too many `return` statements within this function. [structure]
396: Avoid too many `return` statements within this function. [structure]
420: Avoid too many `return` statements within this function. [structure]
421: Avoid too many `return` statements within this function. [structure]
422: Avoid too many `return` statements within this function. [structure]
423: Avoid too many `return` statements within this function. [structure]
424: Avoid too many `return` statements within this function. [structure]
476: Avoid too many `return` statements within this function. [structure]
478: Avoid too many `return` statements within this function. [structure]
480: Avoid too many `return` statements within this function. [structure]
537: Avoid too many `return` statements within this function. [structure]
609: Avoid too many `return` statements within this function. [structure]
610: Avoid too many `return` statements within this function. [structure]
707: Avoid too many `return` statements within this function. [structure]
709: Avoid too many `return` statements within this function. [structure]
711: Avoid too many `return` statements within this function. [structure]
712: Avoid too many `return` statements within this function. [structure]
713: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/jinja2-7214fe2e75215d9d71ee4de928b8658d9d318346ba7520248897d52cd4d3d184.js (18 issues) ==
15-27: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
36-131: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
36-131: Function `tokenBase` has 85 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
67: Avoid too many `return` statements within this function. [structure]
76: Avoid too many `return` statements within this function. [structure]
80: Avoid too many `return` statements within this function. [structure]
83: Avoid too many `return` statements within this function. [structure]
86: Avoid too many `return` statements within this function. [structure]
90-105: Avoid deeply nested control flow statements. [structure]
92: Avoid too many `return` statements within this function. [structure]
95: Avoid too many `return` statements within this function. [structure]
98: Avoid too many `return` statements within this function. [structure]
108: Avoid too many `return` statements within this function. [structure]
112-117: Avoid deeply nested control flow statements. [structure]
118: Avoid too many `return` statements within this function. [structure]
120-128: Avoid deeply nested control flow statements. [structure]
127: Avoid too many `return` statements within this function. [structure]
133-140: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/jsx-f831af1f5a0a88c5f2062384afb75355ae104d51e95c4cfa5bba3ff209aa9bd1.js (4 issues) ==
4-147: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]
47-103: Function `xmlToken` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
87: Avoid too many `return` statements within this function. [structure]
102: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/julia-c4391e8eedcab8e05f98aca63ed8e45209ca5bb46971ab1fe0a2ac3380633ad8.js (26 issues) ==
1-393: File `julia-c4391e8eedcab8e05f98aca63ed8e45209ca5bb46971ab1fe0a2ac3380633ad8.js` has 314 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
62-239: Function `tokenBase` has 132 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
94: Avoid too many `return` statements within this function. [structure]
128: Avoid too many `return` statements within this function. [structure]
131: Avoid too many `return` statements within this function. [structure]
136: Avoid too many `return` statements within this function. [structure]
159: Avoid too many `return` statements within this function. [structure]
164: Avoid too many `return` statements within this function. [structure]
168: Avoid too many `return` statements within this function. [structure]
173: Avoid too many `return` statements within this function. [structure]
178: Avoid too many `return` statements within this function. [structure]
183: Avoid too many `return` statements within this function. [structure]
189: Avoid too many `return` statements within this function. [structure]
195: Avoid too many `return` statements within this function. [structure]
199: Avoid too many `return` statements within this function. [structure]
203: Avoid too many `return` statements within this function. [structure]
207: Avoid too many `return` statements within this function. [structure]
211: Avoid too many `return` statements within this function. [structure]
224: Avoid too many `return` statements within this function. [structure]
227: Avoid too many `return` statements within this function. [structure]
230: Avoid too many `return` statements within this function. [structure]
233: Avoid too many `return` statements within this function. [structure]
238: Avoid too many `return` statements within this function. [structure]
241-275: Function `callOrDef` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
376-378: Consider simplifying this complex logical expression. [structure]
376-378: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/liquid-111e23d8c9c2f77f4fe09a25a29bc97e0f453a6a94155e973392ff90aa5842ab.js (12 issues) ==
1-379: File `liquid-111e23d8c9c2f77f4fe09a25a29bc97e0f453a6a94155e973392ff90aa5842ab.js` has 288 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
20-327: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
50: Avoid too many `return` statements within this function. [structure]
53: Avoid too many `return` statements within this function. [structure]
58: Avoid too many `return` statements within this function. [structure]
179: Avoid too many `return` statements within this function. [structure]
180: Avoid too many `return` statements within this function. [structure]
181: Avoid too many `return` statements within this function. [structure]
184: Avoid too many `return` statements within this function. [structure]
330-332: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
335-352: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
354-378: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/livescript-58297a753ddcf5eefeb338b9b9db2ae84a2c2a7c88b0f8697f2f91e5a671e048.js (3 issues) ==
1-282: File `livescript-58297a753ddcf5eefeb338b9b9db2ae84a2c2a7c88b0f8697f2f91e5a671e048.js` has 267 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
21-49: Function `tokenBase` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
48: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/lua-27fce58bc535aa199702b16980712c41e4cb936182b5e47cc54243b69f74868f.js (4 issues) ==
91: Avoid too many `return` statements within this function. [structure]
95: Avoid too many `return` statements within this function. [structure]
97: Avoid too many `return` statements within this function. [structure]
113-123: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/markdown-4ae20fd335e374d1a54e5a1dbb101db64e9b1b661b2b88ff3b20f573b9bf9002.js (54 issues) ==
1-798: File `markdown-4ae20fd335e374d1a54e5a1dbb101db64e9b1b661b2b88ff3b20f573b9bf9002.js` has 645 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
4-797: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]
135-229: Function `blockNormal` has 79 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
179: Avoid too many `return` statements within this function. [structure]
182: Avoid deeply nested control flow statements. [structure]
184: Avoid too many `return` statements within this function. [structure]
185-226: Avoid deeply nested control flow statements. [structure]
186: Avoid too many `return` statements within this function. [structure]
189: Avoid too many `return` statements within this function. [structure]
216: Avoid too many `return` statements within this function. [structure]
225: Avoid too many `return` statements within this function. [structure]
228: Avoid too many `return` statements within this function. [structure]
235-241: Consider simplifying this complex logical expression. [structure]
272-349: Function `getType` has 60 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
283-285: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
290-294: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
358-570: Function `inlineNormal` has 187 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
400: Avoid too many `return` statements within this function. [structure]
412: Avoid too many `return` statements within this function. [structure]
416: Avoid too many `return` statements within this function. [structure]
419: Avoid too many `return` statements within this function. [structure]
422: Avoid too many `return` statements within this function. [structure]
430: Avoid too many `return` statements within this function. [structure]
437: Avoid too many `return` statements within this function. [structure]
443: Avoid too many `return` statements within this function. [structure]
451: Avoid too many `return` statements within this function. [structure]
454-464: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
463: Avoid too many `return` statements within this function. [structure]
466-476: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
475: Avoid too many `return` statements within this function. [structure]
486: Avoid too many `return` statements within this function. [structure]
491: Avoid too many `return` statements within this function. [structure]
509-527: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
513: Avoid too many `return` statements within this function. [structure]
517: Avoid too many `return` statements within this function. [structure]
518-527: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
519: Avoid deeply nested control flow statements. [structure]
522: Avoid too many `return` statements within this function. [structure]
523-527: Avoid deeply nested control flow statements. [structure]
526: Avoid too many `return` statements within this function. [structure]
529-535: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
531: Avoid too many `return` statements within this function. [structure]
540-549: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
544: Avoid too many `return` statements within this function. [structure]
547: Avoid deeply nested control flow statements. [structure]
548: Avoid too many `return` statements within this function. [structure]
551-557: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
552-556: Avoid deeply nested control flow statements. [structure]
553: Avoid too many `return` statements within this function. [structure]
569: Avoid too many `return` statements within this function. [structure]
616-622: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
642-648: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
673-705: Function `startState` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
707-741: Function `copyState` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/mathematica-61f6794088064b420822a9d65c099d1c6dcba430fe91cc7f56881b6227eeb085.js (17 issues) ==
32-131: Function `tokenBase` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
45-51: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
70: Avoid too many `return` statements within this function. [structure]
75: Avoid too many `return` statements within this function. [structure]
80: Avoid too many `return` statements within this function. [structure]
86: Avoid too many `return` statements within this function. [structure]
93: Avoid too many `return` statements within this function. [structure]
96: Avoid too many `return` statements within this function. [structure]
99: Avoid too many `return` statements within this function. [structure]
104: Avoid too many `return` statements within this function. [structure]
109: Avoid too many `return` statements within this function. [structure]
115: Avoid too many `return` statements within this function. [structure]
120: Avoid too many `return` statements within this function. [structure]
125: Avoid too many `return` statements within this function. [structure]
130: Avoid too many `return` statements within this function. [structure]
133-146: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
148-159: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/mbox-c388505a071bcc7153102be77f2bc96ef0c95d3575b4a83d344ecbd01661ff9b.js (9 issues) ==
40-103: Function `readToken` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
80: Avoid too many `return` statements within this function. [structure]
84: Avoid too many `return` statements within this function. [structure]
85: Avoid too many `return` statements within this function. [structure]
87: Avoid too many `return` statements within this function. [structure]
94: Avoid too many `return` statements within this function. [structure]
95: Avoid too many `return` statements within this function. [structure]
98: Avoid too many `return` statements within this function. [structure]
102: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/mirc-28ad22486393f2758542872eae4bc2ed87d957a25fe51a73cb321ae7b25e2fd3.js (17 issues) ==
18-22: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
90-152: Function `tokenBase` has 61 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
94-151: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
112: Avoid too many `return` statements within this function. [structure]
116: Avoid too many `return` statements within this function. [structure]
120: Avoid too many `return` statements within this function. [structure]
125: Avoid too many `return` statements within this function. [structure]
129: Avoid too many `return` statements within this function. [structure]
132-151: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
135: Avoid too many `return` statements within this function. [structure]
139: Avoid too many `return` statements within this function. [structure]
145: Avoid too many `return` statements within this function. [structure]
148: Avoid too many `return` statements within this function. [structure]
150: Avoid too many `return` statements within this function. [structure]
153-163: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
164-177: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
178-190: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/mllike-1ecf1b7224297dce9e4e934a6a8186f7db0ff07457c77ed5e26f9011656ee77d.js (8 issues) ==
50-89: Function `tokenBase` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
57-63: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
74: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]
84: Avoid too many `return` statements within this function. [structure]
88: Avoid too many `return` statements within this function. [structure]
91-104: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
106-117: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/modelica-c7f86d76d577c68601bc584d8e5d623ec08b6705dce4cb3192ead99559b7856b.js (4 issues) ==
119-178: Function `token` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
174: Avoid too many `return` statements within this function. [structure]
177: Avoid too many `return` statements within this function. [structure]
202-207: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/mscgen-9b9586005fadaca644660275b9c2e09a38f71d88d205874edb39ba32d5ef15bb.js (14 issues) ==
97-167: Function `produceTokenFunction` has 56 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
114-120: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
124: Avoid too many `return` statements within this function. [structure]
126-132: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
131: Avoid too many `return` statements within this function. [structure]
135: Avoid too many `return` statements within this function. [structure]
138: Avoid too many `return` statements within this function. [structure]
141: Avoid too many `return` statements within this function. [structure]
144: Avoid too many `return` statements within this function. [structure]
147: Avoid too many `return` statements within this function. [structure]
152: Avoid too many `return` statements within this function. [structure]
156: Avoid too many `return` statements within this function. [structure]
160: Avoid too many `return` statements within this function. [structure]
165: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/mumps-f6f2204ae9a0671290ee98871d9de27a55a97b7d45cf50b3a51cb29f48b617b9.js (12 issues) ==
35-130: Function `tokenBase` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
77-85: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
89: Avoid too many `return` statements within this function. [structure]
93: Avoid too many `return` statements within this function. [structure]
97: Avoid too many `return` statements within this function. [structure]
101: Avoid too many `return` statements within this function. [structure]
104: Avoid too many `return` statements within this function. [structure]
107: Avoid too many `return` statements within this function. [structure]
113: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
124: Avoid too many `return` statements within this function. [structure]
129: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/nginx-21f0e76dbf8793a4eb50ea7f2523d0bc99154fd4964b228a435e1f79e68960d3.js (13 issues) ==
16-20: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
38-95: Function `tokenBase` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
61: Avoid too many `return` statements within this function. [structure]
65: Avoid too many `return` statements within this function. [structure]
68: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
75: Avoid too many `return` statements within this function. [structure]
79: Avoid too many `return` statements within this function. [structure]
83: Avoid too many `return` statements within this function. [structure]
86: Avoid too many `return` statements within this function. [structure]
89: Avoid too many `return` statements within this function. [structure]
93: Avoid too many `return` statements within this function. [structure]
109-119: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/nsis-bb55584bc110fb71861f17825036e1a165328b4e66f2f812fa3faf9cb5b495c5.js (1 issue) ==
6-95: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/ntriples-61b04410fb6cac2c052fbc0926a296b39eb2e0543e926f5b31f3a7b3060b4079.js (8 issues) ==
60-103: Function `transitState` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
116-181: Function `token` has 64 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
121: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
130: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
145: Avoid too many `return` statements within this function. [structure]
154: Avoid too many `return` statements within this function. [structure]
163: Avoid too many `return` statements within this function. [structure]
173: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/octave-2b09f10791e8a496b36b42895ae61d0208fcd159d162013fa0a8e3e97e8ba737.js (14 issues) ==
27-35: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
66-113: Function `tokenBase` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
87: Avoid too many `return` statements within this function. [structure]
88: Avoid too many `return` statements within this function. [structure]
90: Avoid too many `return` statements within this function. [structure]
93: Avoid too many `return` statements within this function. [structure]
94: Avoid too many `return` statements within this function. [structure]
97: Avoid too many `return` statements within this function. [structure]
98: Avoid too many `return` statements within this function. [structure]
99: Avoid too many `return` statements within this function. [structure]
101: Avoid too many `return` statements within this function. [structure]
102: Avoid too many `return` statements within this function. [structure]
106: Avoid too many `return` statements within this function. [structure]
112: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/oz-e4e7cadad9e46d3cb744f1732a47b872f0e9dddc5c75dc8c15f287decc619a39.js (19 issues) ==
37-137: Function `tokenBase` has 67 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
59: Avoid too many `return` statements within this function. [structure]
78: Avoid too many `return` statements within this function. [structure]
83: Avoid too many `return` statements within this function. [structure]
89: Avoid too many `return` statements within this function. [structure]
98: Avoid too many `return` statements within this function. [structure]
105: Avoid too many `return` statements within this function. [structure]
107: Avoid too many `return` statements within this function. [structure]
111: Avoid too many `return` statements within this function. [structure]
113: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
121-126: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
124: Avoid too many `return` statements within this function. [structure]
130: Avoid too many `return` statements within this function. [structure]
136: Avoid too many `return` statements within this function. [structure]
139-146: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
148-155: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
178-188: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
190-204: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/pascal-e18a93ee401e7726e45518ea0396b838614ed1b8f7e7c3892a97679551a0ba6f.js (11 issues) ==
15-19: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
27-63: Function `tokenBase` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
33-36: Identical blocks of code found in 7 locations. Consider refactoring. [duplication]
46: Avoid too many `return` statements within this function. [structure]
51: Avoid too many `return` statements within this function. [structure]
56: Avoid too many `return` statements within this function. [structure]
60: Avoid too many `return` statements within this function. [structure]
61: Avoid too many `return` statements within this function. [structure]
62: Avoid too many `return` statements within this function. [structure]
65-75: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
96-101: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/pegjs-d0616c41277e3c2c64492f0441cf545d24ffa0fef5266f43e6728b3c1c8a09e7.js (14 issues) ==
4-114: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]
33-110: Function `token` has 69 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
37-41: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
47-108: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
71-73: Avoid deeply nested control flow statements. [structure]
83-85: Avoid deeply nested control flow statements. [structure]
88-96: Avoid deeply nested control flow statements. [structure]
97: Avoid too many `return` statements within this function. [structure]
98-108: Avoid deeply nested control flow statements. [structure]
98-108: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
100: Avoid too many `return` statements within this function. [structure]
102: Avoid too many `return` statements within this function. [structure]
105: Avoid too many `return` statements within this function. [structure]
109: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/perl-2e96fe6fb18b73d5d60e9fc9dee8bd210ade92d81091cff8e7c48550c25a038f.js (101 issues) ==
1-838: File `perl-2e96fe6fb18b73d5d60e9fc9dee8bd210ade92d81091cff8e7c48550c25a038f.js` has 800 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
483: Function `tokenChain` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
511-781: Function `tokenPerl` has 270 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
523: Avoid too many `return` statements within this function. [structure]
531: Avoid too many `return` statements within this function. [structure]
533: Avoid too many `return` statements within this function. [structure]
538-620: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
542: Avoid too many `return` statements within this function. [structure]
545: Avoid too many `return` statements within this function. [structure]
548: Avoid too many `return` statements within this function. [structure]
551: Avoid too many `return` statements within this function. [structure]
554: Avoid too many `return` statements within this function. [structure]
555-620: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
557-559: Avoid deeply nested control flow statements. [structure]
559: Avoid too many `return` statements within this function. [structure]
560-562: Avoid deeply nested control flow statements. [structure]
562: Avoid too many `return` statements within this function. [structure]
563-565: Avoid deeply nested control flow statements. [structure]
565: Avoid too many `return` statements within this function. [structure]
566-568: Avoid deeply nested control flow statements. [structure]
568: Avoid too many `return` statements within this function. [structure]
569-571: Avoid deeply nested control flow statements. [structure]
571: Avoid too many `return` statements within this function. [structure]
572-620: Avoid deeply nested control flow statements. [structure]
572-620: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
576: Avoid too many `return` statements within this function. [structure]
579: Avoid too many `return` statements within this function. [structure]
582: Avoid too many `return` statements within this function. [structure]
585: Avoid too many `return` statements within this function. [structure]
588: Avoid too many `return` statements within this function. [structure]
589-620: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
593: Avoid too many `return` statements within this function. [structure]
596: Avoid too many `return` statements within this function. [structure]
599: Avoid too many `return` statements within this function. [structure]
602: Avoid too many `return` statements within this function. [structure]
605: Avoid too many `return` statements within this function. [structure]
609: Avoid too many `return` statements within this function. [structure]
612: Avoid too many `return` statements within this function. [structure]
615: Avoid too many `return` statements within this function. [structure]
618: Avoid too many `return` statements within this function. [structure]
620: Avoid too many `return` statements within this function. [structure]
627: Avoid too many `return` statements within this function. [structure]
629: Avoid too many `return` statements within this function. [structure]
631: Avoid too many `return` statements within this function. [structure]
633: Avoid too many `return` statements within this function. [structure]
635: Avoid too many `return` statements within this function. [structure]
636-649: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
642: Avoid too many `return` statements within this function. [structure]
644: Avoid too many `return` statements within this function. [structure]
646: Avoid too many `return` statements within this function. [structure]
648: Avoid too many `return` statements within this function. [structure]
649: Avoid too many `return` statements within this function. [structure]
650-663: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
656: Avoid too many `return` statements within this function. [structure]
658: Avoid too many `return` statements within this function. [structure]
660: Avoid too many `return` statements within this function. [structure]
662: Avoid too many `return` statements within this function. [structure]
663: Avoid too many `return` statements within this function. [structure]
670-671: Avoid deeply nested control flow statements. [structure]
671: Avoid too many `return` statements within this function. [structure]
672-673: Avoid deeply nested control flow statements. [structure]
673: Avoid too many `return` statements within this function. [structure]
674-675: Avoid deeply nested control flow statements. [structure]
675: Avoid too many `return` statements within this function. [structure]
676-677: Avoid deeply nested control flow statements. [structure]
677: Avoid too many `return` statements within this function. [structure]
678: Avoid too many `return` statements within this function. [structure]
680: Avoid too many `return` statements within this function. [structure]
683: Avoid too many `return` statements within this function. [structure]
685: Avoid too many `return` statements within this function. [structure]
688-691: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
689: Avoid too many `return` statements within this function. [structure]
697: Avoid too many `return` statements within this function. [structure]
700-705: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
703: Avoid too many `return` statements within this function. [structure]
705: Avoid too many `return` statements within this function. [structure]
709: Avoid too many `return` statements within this function. [structure]
714: Avoid too many `return` statements within this function. [structure]
720: Avoid too many `return` statements within this function. [structure]
722: Avoid too many `return` statements within this function. [structure]
724: Avoid too many `return` statements within this function. [structure]
728: Avoid too many `return` statements within this function. [structure]
740: Avoid too many `return` statements within this function. [structure]
743-757: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
745: Avoid too many `return` statements within this function. [structure]
747: Avoid too many `return` statements within this function. [structure]
749: Avoid too many `return` statements within this function. [structure]
751: Avoid too many `return` statements within this function. [structure]
753: Avoid too many `return` statements within this function. [structure]
755: Avoid too many `return` statements within this function. [structure]
757: Avoid too many `return` statements within this function. [structure]
763: Avoid too many `return` statements within this function. [structure]
766-780: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
768: Avoid too many `return` statements within this function. [structure]
770: Avoid too many `return` statements within this function. [structure]
772: Avoid too many `return` statements within this function. [structure]
774: Avoid too many `return` statements within this function. [structure]
776: Avoid too many `return` statements within this function. [structure]
778: Avoid too many `return` statements within this function. [structure]
780: Avoid too many `return` statements within this function. [structure]
781: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/php-de9e9cfe4c3a9b83be91ffab3b50ad2c44ae9a1ae9e2efa4c3134ec5dad10cb7.js (4 issues) ==
4-234: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]
14-18: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
36-80: Function `phpString_` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
157-192: Function `dispatch` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/pig-e2e03f07e1faadebcd92a2396a6900c5c5eb35cb719990f57e3203db3289612a.js (13 issues) ==
47-60: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
63-121: Function `tokenBase` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
84: Avoid too many `return` statements within this function. [structure]
91: Avoid too many `return` statements within this function. [structure]
95: Avoid too many `return` statements within this function. [structure]
101: Avoid too many `return` statements within this function. [structure]
109-110: Avoid deeply nested control flow statements. [structure]
110: Avoid too many `return` statements within this function. [structure]
114: Avoid too many `return` statements within this function. [structure]
117: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
132-136: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
141-145: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/powershell-45f8465428e2c7a579f6f31c66649fb903c8e266892a11dbb9bd8ec355a165b4.js (13 issues) ==
1-397: File `powershell-45f8465428e2c7a579f6f31c66649fb903c8e266892a11dbb9bd8ec355a165b4.js` has 341 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
162-233: Function `tokenBase` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
189: Avoid too many `return` statements within this function. [structure]
197: Avoid too many `return` statements within this function. [structure]
201: Avoid too many `return` statements within this function. [structure]
206: Avoid too many `return` statements within this function. [structure]
211: Avoid too many `return` statements within this function. [structure]
216: Avoid too many `return` statements within this function. [structure]
224: Avoid too many `return` statements within this function. [structure]
226: Avoid too many `return` statements within this function. [structure]
229: Avoid too many `return` statements within this function. [structure]
232: Avoid too many `return` statements within this function. [structure]
310-320: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/properties-2c5d2be79ae5620e67eabf3b46d93ee791937f55ba2acbc1cea7bcc21cb2a15e.js (1 issue) ==
16-61: Function `token` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/protobuf-d4d8c8451c836132d4b1d3d9037bace38089935727718dd3424bdb12e72d5e6b.js (7 issues) ==
41-48: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
47: Avoid too many `return` statements within this function. [structure]
51: Avoid too many `return` statements within this function. [structure]
52: Avoid too many `return` statements within this function. [structure]
55: Avoid too many `return` statements within this function. [structure]
56: Avoid too many `return` statements within this function. [structure]
60: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/puppet-6939d80953cd5e4c065f776c89636775b18ba1a29632642e141328dd27ff98b9.js (18 issues) ==
22-27: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
47-65: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
68-198: Function `tokenize` has 85 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
112: Avoid too many `return` statements within this function. [structure]
118: Avoid too many `return` statements within this function. [structure]
123: Avoid too many `return` statements within this function. [structure]
140: Avoid too many `return` statements within this function. [structure]
148: Avoid too many `return` statements within this function. [structure]
153: Avoid too many `return` statements within this function. [structure]
158: Avoid too many `return` statements within this function. [structure]
163: Avoid too many `return` statements within this function. [structure]
170: Avoid too many `return` statements within this function. [structure]
174: Avoid too many `return` statements within this function. [structure]
180: Avoid too many `return` statements within this function. [structure]
185: Avoid too many `return` statements within this function. [structure]
192: Avoid too many `return` statements within this function. [structure]
197: Avoid too many `return` statements within this function. [structure]
201-208: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/python-e362bc3f63640164d19d2c45c8cdaa7a34cf523df40e1e261b557ba4f290cccb.js (18 issues) ==
1-341: File `python-e362bc3f63640164d19d2c45c8cdaa7a34cf523df40e1e261b557ba4f290cccb.js` has 262 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
24-34: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
101-185: Function `tokenBaseInner` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
149-152: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
151: Avoid too many `return` statements within this function. [structure]
156: Avoid too many `return` statements within this function. [structure]
159: Avoid too many `return` statements within this function. [structure]
162: Avoid too many `return` statements within this function. [structure]
165: Avoid too many `return` statements within this function. [structure]
168: Avoid too many `return` statements within this function. [structure]
171: Avoid too many `return` statements within this function. [structure]
174: Avoid too many `return` statements within this function. [structure]
178: Avoid too many `return` statements within this function. [structure]
179: Avoid too many `return` statements within this function. [structure]
184: Avoid too many `return` statements within this function. [structure]
187-218: Function `tokenStringFactory` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
197-206: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
243-282: Function `tokenLexer` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/q-1f6afc94c771438d6b3717dea7b6202713a46867e5c0bbb5bd1b4b6ff725b64e.js (18 issues) ==
20-61: Function `tokenBase` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
28: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
35: Avoid too many `return` statements within this function. [structure]
37: Avoid too many `return` statements within this function. [structure]
41-44: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
46-49: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
52: Avoid too many `return` statements within this function. [structure]
55: Avoid too many `return` statements within this function. [structure]
57: Avoid too many `return` statements within this function. [structure]
59: Avoid too many `return` statements within this function. [structure]
60: Avoid too many `return` statements within this function. [structure]
63: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
82: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
83: Similar blocks of code found in 5 locations. Consider refactoring. [duplication]
91-119: Function `token` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
99-101: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
102-117: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
120-134: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/r-518babbc78607a28f95dd731466e8f66497f818dbb563a88fb25333a4fecda36.js (18 issues) ==
29-81: Function `tokenBase` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
46: Avoid too many `return` statements within this function. [structure]
48: Avoid too many `return` statements within this function. [structure]
52: Avoid too many `return` statements within this function. [structure]
59: Avoid too many `return` statements within this function. [structure]
61: Avoid too many `return` statements within this function. [structure]
62: Avoid too many `return` statements within this function. [structure]
65: Avoid too many `return` statements within this function. [structure]
67: Avoid too many `return` statements within this function. [structure]
69: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
73: Avoid too many `return` statements within this function. [structure]
76: Avoid deeply nested control flow statements. [structure]
76: Avoid too many `return` statements within this function. [structure]
77: Avoid too many `return` statements within this function. [structure]
79: Avoid too many `return` statements within this function. [structure]
111-114: Similar blocks of code found in 5 locations. Consider refactoring. [duplication]
153-155: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/rpm-f419563e0e6ca5d4769ddd82ff32d4eb228858f9574d93dac31bf0ad73b35229.js (14 issues) ==
21-24: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
53-103: Function `token` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
57-60: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
63: Avoid too many `return` statements within this function. [structure]
65: Avoid too many `return` statements within this function. [structure]
68: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
72: Avoid too many `return` statements within this function. [structure]
78: Avoid too many `return` statements within this function. [structure]
84: Avoid too many `return` statements within this function. [structure]
87: Avoid too many `return` statements within this function. [structure]
90: Avoid too many `return` statements within this function. [structure]
97: Avoid too many `return` statements within this function. [structure]
102: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/rst-93db2a574c7c9c31364313654a1d52d68eddb4a9e78baf9ea1790cc714511d36.js (12 issues) ==
1-558: File `rst-93db2a574c7c9c31364313654a1d52d68eddb4a9e78baf9ea1790cc714511d36.js` has 455 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
41: Avoid too many `return` statements within this function. [structure]
43: Avoid too many `return` statements within this function. [structure]
45: Avoid too many `return` statements within this function. [structure]
57: Avoid too many `return` statements within this function. [structure]
156-351: Function `to_normal` has 182 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
290-302: Avoid deeply nested control flow statements. [structure]
303-348: Avoid deeply nested control flow statements. [structure]
356-458: Function `to_explicit` has 93 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
404-408: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
412-416: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
448-454: Avoid deeply nested control flow statements. [structure]

== public/assets/codemirror/modes/ruby-1d07782283e174340c1c8a73f19e3be2c0df766fb4b55ac9b0480d0006d49b1f.js (34 issues) ==
1-286: File `ruby-1d07782283e174340c1c8a73f19e3be2c0df766fb4b55ac9b0480d0006d49b1f.js` has 261 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
15-19: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
20-27: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
39-149: Function `tokenBase` has 102 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
64: Avoid too many `return` statements within this function. [structure]
72: Avoid too many `return` statements within this function. [structure]
74: Avoid too many `return` statements within this function. [structure]
77: Avoid too many `return` statements within this function. [structure]
79: Avoid too many `return` statements within this function. [structure]
84: Avoid too many `return` statements within this function. [structure]
87: Avoid too many `return` statements within this function. [structure]
89: Avoid deeply nested control flow statements. [structure]
90-91: Avoid deeply nested control flow statements. [structure]
92: Avoid too many `return` statements within this function. [structure]
93-148: Avoid deeply nested control flow statements. [structure]
94: Avoid too many `return` statements within this function. [structure]
95: Avoid too many `return` statements within this function. [structure]
100: Avoid too many `return` statements within this function. [structure]
105: Avoid too many `return` statements within this function. [structure]
113: Avoid too many `return` statements within this function. [structure]
115: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
128: Avoid too many `return` statements within this function. [structure]
132: Avoid too many `return` statements within this function. [structure]
133: Avoid too many `return` statements within this function. [structure]
136: Avoid too many `return` statements within this function. [structure]
139: Avoid too many `return` statements within this function. [structure]
141: Avoid too many `return` statements within this function. [structure]
145: Avoid too many `return` statements within this function. [structure]
147: Avoid too many `return` statements within this function. [structure]
155-160: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
170-173: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
178-208: Function `readQuoted` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
233-266: Function `token` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/rust-cbe2182206a8a665cb64f66d487a410337930ef71df3b3e50ad63029262c2bbe.js (1 issue) ==
4-71: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/sas-b7f56b22d80aeeca46ad982d7dc57a44b7d3b4607f05d0a0112a6d7017d6d31b.js (37 issues) ==
95-288: Function `tokenize` has 157 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
143: Avoid too many `return` statements within this function. [structure]
152: Avoid too many `return` statements within this function. [structure]
155: Avoid too many `return` statements within this function. [structure]
163: Avoid too many `return` statements within this function. [structure]
166: Avoid too many `return` statements within this function. [structure]
169-170: Avoid deeply nested control flow statements. [structure]
170: Avoid too many `return` statements within this function. [structure]
171-173: Avoid deeply nested control flow statements. [structure]
172: Avoid too many `return` statements within this function. [structure]
179: Avoid too many `return` statements within this function. [structure]
189: Avoid too many `return` statements within this function. [structure]
197: Avoid too many `return` statements within this function. [structure]
202: Avoid too many `return` statements within this function. [structure]
203: Avoid too many `return` statements within this function. [structure]
206-215: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
214: Avoid too many `return` statements within this function. [structure]
221: Avoid too many `return` statements within this function. [structure]
224-229: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
228: Avoid too many `return` statements within this function. [structure]
236: Avoid too many `return` statements within this function. [structure]
238-243: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
242: Avoid too many `return` statements within this function. [structure]
245: Avoid too many `return` statements within this function. [structure]
256: Avoid too many `return` statements within this function. [structure]
261: Avoid too many `return` statements within this function. [structure]
266: Avoid too many `return` statements within this function. [structure]
268: Avoid too many `return` statements within this function. [structure]
272: Avoid too many `return` statements within this function. [structure]
277: Avoid too many `return` statements within this function. [structure]
278-279: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
279: Avoid too many `return` statements within this function. [structure]
280-281: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
281: Avoid too many `return` statements within this function. [structure]
283: Avoid too many `return` statements within this function. [structure]
284: Avoid too many `return` statements within this function. [structure]
287: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/sass-f4256ebe35068b16845042ad20e877b3be6c61259364ee4130a99d9b1516ef36.js (37 issues) ==
1-415: File `sass-f4256ebe35068b16845042ad20e877b3be6c61259364ee4130a99d9b1516ef36.js` has 318 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
120-354: Function `tokenBase` has 178 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
154: Avoid too many `return` statements within this function. [structure]
157: Avoid too many `return` statements within this function. [structure]
166: Avoid too many `return` statements within this function. [structure]
170: Avoid too many `return` statements within this function. [structure]
178: Avoid too many `return` statements within this function. [structure]
183: Avoid too many `return` statements within this function. [structure]
187: Avoid too many `return` statements within this function. [structure]
190: Avoid too many `return` statements within this function. [structure]
194: Avoid too many `return` statements within this function. [structure]
201: Avoid too many `return` statements within this function. [structure]
208: Avoid too many `return` statements within this function. [structure]
223: Avoid too many `return` statements within this function. [structure]
230: Avoid too many `return` statements within this function. [structure]
235: Avoid too many `return` statements within this function. [structure]
240: Avoid too many `return` statements within this function. [structure]
243: Avoid too many `return` statements within this function. [structure]
247: Avoid too many `return` statements within this function. [structure]
253: Avoid too many `return` statements within this function. [structure]
257: Avoid too many `return` statements within this function. [structure]
266-271: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
270: Avoid too many `return` statements within this function. [structure]
275-280: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
279: Avoid too many `return` statements within this function. [structure]
283-288: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
287: Avoid too many `return` statements within this function. [structure]
294: Avoid too many `return` statements within this function. [structure]
302: Avoid too many `return` statements within this function. [structure]
312: Avoid too many `return` statements within this function. [structure]
321: Avoid too many `return` statements within this function. [structure]
328: Avoid too many `return` statements within this function. [structure]
332-337: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
336: Avoid too many `return` statements within this function. [structure]
342: Avoid too many `return` statements within this function. [structure]
348: Avoid too many `return` statements within this function. [structure]
353: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/scheme-d5b11577e17e9a7b1fa48a7e95688ace25b2227270be4828ae18139f4e78e8b8.js (10 issues) ==
24-28: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
33-37: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
81-236: Function `token` has 126 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
82-85: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
94-105: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
170-173: Avoid deeply nested control flow statements. [structure]
174-175: Avoid deeply nested control flow statements. [structure]
202-208: Avoid deeply nested control flow statements. [structure]
217-226: Avoid deeply nested control flow statements. [structure]
230-232: Avoid deeply nested control flow statements. [structure]

== public/assets/codemirror/modes/shell-ec78c118850cdf965f6ef0739774331b6cebc88cc5cf08e29d046ec06c93575f.js (9 issues) ==
17-22: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
38-82: Function `tokenBase` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
58: Avoid too many `return` statements within this function. [structure]
62: Avoid too many `return` statements within this function. [structure]
65: Avoid too many `return` statements within this function. [structure]
70: Avoid too many `return` statements within this function. [structure]
75: Avoid too many `return` statements within this function. [structure]
80: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/sieve-e5710e36e9b47286809b888da1f6118ebd643dfc8f46c45d7749d46fc73d1462.js (15 issues) ==
15-19: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
25-110: Function `tokenBase` has 58 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
53: Avoid too many `return` statements within this function. [structure]
63: Avoid too many `return` statements within this function. [structure]
67: Avoid too many `return` statements within this function. [structure]
70: Avoid too many `return` statements within this function. [structure]
74: Avoid too many `return` statements within this function. [structure]
80: Avoid too many `return` statements within this function. [structure]
88: Avoid too many `return` statements within this function. [structure]
100: Avoid too many `return` statements within this function. [structure]
104: Avoid too many `return` statements within this function. [structure]
107: Avoid too many `return` statements within this function. [structure]
109: Avoid too many `return` statements within this function. [structure]
137-147: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
149-160: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/slim-da78fc6576f62ed1e0639309840987e32ae86e5bbe62cedf16e46fc62363eea2.js (17 issues) ==
1-576: File `slim-da78fc6576f62ed1e0639309840987e32ae86e5bbe62cedf16e46fc62363eea2.js` has 525 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
6-575: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]
87: Function `maybeBackup` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
140-150: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
217-222: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
241-247: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
250-254: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
325-330: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
357: Avoid too many `return` statements within this function. [structure]
362: Avoid too many `return` statements within this function. [structure]
365: Avoid too many `return` statements within this function. [structure]
386-392: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
430-434: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
445: Avoid too many `return` statements within this function. [structure]
456: Function `readQuoted` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
456-489: Function `readQuoted` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
487: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/smalltalk-bf18a089d1616f72353c20d98ba3be68a6d31777ec4778de9c04ef1a2945052c.js (4 issues) ==
41-100: Function `next` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
102-105: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
107-110: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
112-115: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/smarty-5d63e2788777f19f201b89aba1179ae03d6d040c78fa3dcf03759f41ab6dbf5b.js (16 issues) ==
76-157: Function `tokenSmarty` has 76 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
101: Avoid too many `return` statements within this function. [structure]
104: Avoid too many `return` statements within this function. [structure]
107: Avoid too many `return` statements within this function. [structure]
109: Avoid too many `return` statements within this function. [structure]
111: Avoid too many `return` statements within this function. [structure]
114: Avoid too many `return` statements within this function. [structure]
120: Avoid too many `return` statements within this function. [structure]
123: Avoid too many `return` statements within this function. [structure]
127: Avoid too many `return` statements within this function. [structure]
130: Avoid too many `return` statements within this function. [structure]
133: Avoid too many `return` statements within this function. [structure]
136: Avoid too many `return` statements within this function. [structure]
149: Avoid too many `return` statements within this function. [structure]
153: Avoid too many `return` statements within this function. [structure]
155: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/solr-be8f29c0a22a0b8896ed37965e8ac1e4adc824308f91f8c4cac0795a76442f89.js (1 issue) ==
25-36: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/soy-3c94f4742352738ff7904161886693eb0cd153b56427ccee67f4b27435ebfa1e.js (14 issues) ==
4-199: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]
72-162: Function `token` has 77 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
107: Avoid too many `return` statements within this function. [structure]
110: Avoid too many `return` statements within this function. [structure]
113: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
121: Avoid too many `return` statements within this function. [structure]
130: Avoid too many `return` statements within this function. [structure]
135: Avoid too many `return` statements within this function. [structure]
137: Avoid too many `return` statements within this function. [structure]
141: Avoid too many `return` statements within this function. [structure]
145: Avoid too many `return` statements within this function. [structure]
158: Avoid too many `return` statements within this function. [structure]
161: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/sparql-e048fd2f26d07b4d8addcbb5589e038de01c1bf8d56a1ecd28a701e77acbd726.js (17 issues) ==
37-89: Function `tokenBase` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
57: Avoid too many `return` statements within this function. [structure]
61: Avoid too many `return` statements within this function. [structure]
65: Avoid too many `return` statements within this function. [structure]
69: Avoid too many `return` statements within this function. [structure]
73: Avoid too many `return` statements within this function. [structure]
79: Avoid too many `return` statements within this function. [structure]
83: Avoid too many `return` statements within this function. [structure]
85: Avoid too many `return` statements within this function. [structure]
87: Avoid too many `return` statements within this function. [structure]
91-103: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
105-107: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
108-111: Similar blocks of code found in 5 locations. Consider refactoring. [duplication]
121-155: Function `token` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
122-125: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
129-131: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
157-172: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/spreadsheet-9a3da0cc9b8834404232a9463aadb66d6f0fd0c5b7a955072afe4433640165dc.js (13 issues) ==
22-107: Function `token` has 71 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
39-49: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
70: Avoid too many `return` statements within this function. [structure]
72: Avoid too many `return` statements within this function. [structure]
75: Avoid too many `return` statements within this function. [structure]
88: Avoid too many `return` statements within this function. [structure]
91: Avoid too many `return` statements within this function. [structure]
95: Avoid too many `return` statements within this function. [structure]
96: Avoid too many `return` statements within this function. [structure]
98: Avoid too many `return` statements within this function. [structure]
99: Avoid too many `return` statements within this function. [structure]
102: Avoid too many `return` statements within this function. [structure]
106: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/sql-2d46200664014d14dcf7e709b2aac4b38c640664f285bf287352c6ae51590a68.js (29 issues) ==
1-415: File `sql-2d46200664014d14dcf7e709b2aac4b38c640664f285bf287352c6ae51590a68.js` has 298 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
26-117: Function `tokenBase` has 61 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
35-116: Consider simplifying this complex logical expression. [structure]
41-116: Consider simplifying this complex logical expression. [structure]
55: Avoid too many `return` statements within this function. [structure]
60: Avoid too many `return` statements within this function. [structure]
61-116: Consider simplifying this complex logical expression. [structure]
66: Avoid too many `return` statements within this function. [structure]
69: Avoid too many `return` statements within this function. [structure]
73: Avoid too many `return` statements within this function. [structure]
74-116: Consider simplifying this complex logical expression. [structure]
79: Avoid too many `return` statements within this function. [structure]
84: Avoid too many `return` statements within this function. [structure]
88: Avoid too many `return` statements within this function. [structure]
93: Avoid too many `return` statements within this function. [structure]
98: Avoid too many `return` statements within this function. [structure]
103: Avoid too many `return` statements within this function. [structure]
110: Avoid too many `return` statements within this function. [structure]
111: Avoid too many `return` statements within this function. [structure]
112: Avoid too many `return` statements within this function. [structure]
113: Avoid too many `return` statements within this function. [structure]
114: Avoid too many `return` statements within this function. [structure]
115: Avoid too many `return` statements within this function. [structure]
158-161: Similar blocks of code found in 5 locations. Consider refactoring. [duplication]
244: Avoid too many `return` statements within this function. [structure]
293-307: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
309-323: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
340-348: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
351-359: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/stex-18dbd2405740ecd0e3db41b5731a9f2dc6d11676d7dc0ea4c5d43bf449bfdd05.js (19 issues) ==
94-159: Function `normal` has 56 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
123: Avoid too many `return` statements within this function. [structure]
127: Avoid too many `return` statements within this function. [structure]
133: Avoid too many `return` statements within this function. [structure]
140: Avoid too many `return` statements within this function. [structure]
142: Avoid too many `return` statements within this function. [structure]
147: Avoid too many `return` statements within this function. [structure]
150: Avoid too many `return` statements within this function. [structure]
157: Avoid too many `return` statements within this function. [structure]
161-204: Function `inMathMode` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
177: Avoid too many `return` statements within this function. [structure]
181: Avoid too many `return` statements within this function. [structure]
185: Avoid too many `return` statements within this function. [structure]
189: Avoid too many `return` statements within this function. [structure]
192: Avoid too many `return` statements within this function. [structure]
195-197: Consider simplifying this complex logical expression. [structure]
196: Avoid too many `return` statements within this function. [structure]
201: Avoid too many `return` statements within this function. [structure]
203: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/stylus-9e996fb5a40f779f5bdffe837928794c939af8415ec3f2fcb5d9742950e1e0a2.js (72 issues) ==
1-770: File `stylus-9e996fb5a40f779f5bdffe837928794c939af8415ec3f2fcb5d9742950e1e0a2.js` has 614 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
44-156: Function `tokenBase` has 83 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
77: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]
86: Avoid too many `return` statements within this function. [structure]
91: Avoid too many `return` statements within this function. [structure]
96: Avoid too many `return` statements within this function. [structure]
100: Avoid too many `return` statements within this function. [structure]
105: Avoid too many `return` statements within this function. [structure]
110: Avoid too many `return` statements within this function. [structure]
115: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
124: Avoid too many `return` statements within this function. [structure]
127: Avoid too many `return` statements within this function. [structure]
131: Avoid too many `return` statements within this function. [structure]
139: Avoid too many `return` statements within this function. [structure]
142: Avoid too many `return` statements within this function. [structure]
146: Avoid too many `return` statements within this function. [structure]
151: Avoid too many `return` statements within this function. [structure]
155: Avoid too many `return` statements within this function. [structure]
302-436: Function `block` has 117 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
320: Avoid too many `return` statements within this function. [structure]
324: Avoid too many `return` statements within this function. [structure]
327: Avoid too many `return` statements within this function. [structure]
332: Avoid too many `return` statements within this function. [structure]
334: Avoid too many `return` statements within this function. [structure]
339: Avoid too many `return` statements within this function. [structure]
343: Avoid too many `return` statements within this function. [structure]
346: Avoid too many `return` statements within this function. [structure]
349: Avoid too many `return` statements within this function. [structure]
352: Avoid too many `return` statements within this function. [structure]
359: Avoid too many `return` statements within this function. [structure]
362: Avoid too many `return` statements within this function. [structure]
364: Avoid too many `return` statements within this function. [structure]
367: Avoid too many `return` statements within this function. [structure]
370: Avoid too many `return` statements within this function. [structure]
374: Avoid too many `return` statements within this function. [structure]
382: Avoid too many `return` statements within this function. [structure]
385: Avoid too many `return` statements within this function. [structure]
395: Avoid too many `return` statements within this function. [structure]
402: Avoid too many `return` statements within this function. [structure]
412: Avoid deeply nested control flow statements. [structure]
412: Avoid too many `return` statements within this function. [structure]
413: Avoid too many `return` statements within this function. [structure]
417: Avoid too many `return` statements within this function. [structure]
424: Avoid too many `return` statements within this function. [structure]
426: Avoid too many `return` statements within this function. [structure]
428: Avoid too many `return` statements within this function. [structure]
432: Avoid too many `return` statements within this function. [structure]
435: Avoid too many `return` statements within this function. [structure]
442-482: Function `parens` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
448-454: Consider simplifying this complex logical expression. [structure]
461: Avoid too many `return` statements within this function. [structure]
462: Avoid too many `return` statements within this function. [structure]
476: Avoid too many `return` statements within this function. [structure]
479: Avoid too many `return` statements within this function. [structure]
481: Avoid too many `return` statements within this function. [structure]
514-543: Function `atBlock` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
542: Avoid too many `return` statements within this function. [structure]
560: Avoid too many `return` statements within this function. [structure]
567-594: Function `keyframes` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
568-571: Consider simplifying this complex logical expression. [structure]
578: Avoid too many `return` statements within this function. [structure]
584: Avoid too many `return` statements within this function. [structure]
588: Avoid too many `return` statements within this function. [structure]
591: Avoid too many `return` statements within this function. [structure]
593: Avoid too many `return` statements within this function. [structure]
620: Avoid too many `return` statements within this function. [structure]
669-721: Function `indent` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
679-719: Consider simplifying this complex logical expression. [structure]
686-718: Consider simplifying this complex logical expression. [structure]
757-761: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/swift-87cb5b8af56e2fd9e8b92d73df22b92965922ccfc629957476cdae2731a6d639.js (15 issues) ==
6-202: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
16-20: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
22-28: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
42-92: Function `tokenBase` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
60: Avoid too many `return` statements within this function. [structure]
65: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
74: Avoid too many `return` statements within this function. [structure]
75: Avoid too many `return` statements within this function. [structure]
82: Avoid too many `return` statements within this function. [structure]
84: Avoid too many `return` statements within this function. [structure]
85: Avoid too many `return` statements within this function. [structure]
86: Avoid too many `return` statements within this function. [structure]
87: Avoid too many `return` statements within this function. [structure]
91: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/tcl-72f0ee3b12e3526c73b65144d50e7d3e9b178a0f9413219cdf79ae219ab1d359.js (15 issues) ==
17-21: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
41-83: Function `tokenBase` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
47-82: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
58: Avoid too many `return` statements within this function. [structure]
60: Avoid too many `return` statements within this function. [structure]
63: Avoid too many `return` statements within this function. [structure]
64-82: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
68: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
76: Avoid too many `return` statements within this function. [structure]
79: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]
98-108: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
109-122: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
123-135: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/textile-2a397b6a8c8d7d7c7edd8bcae786bd730cd652f94baaa808985479cb54fc594d.js (20 issues) ==
1-470: File `textile-2a397b6a8c8d7d7c7edd8bcae786bd730cd652f94baaa808985479cb54fc594d.js` has 398 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
58-117: Function `handlePhraseModifier` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
75: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]
85: Avoid too many `return` statements within this function. [structure]
88: Avoid too many `return` statements within this function. [structure]
91: Avoid too many `return` statements within this function. [structure]
94: Avoid too many `return` statements within this function. [structure]
97: Avoid too many `return` statements within this function. [structure]
100: Avoid too many `return` statements within this function. [structure]
103: Avoid too many `return` statements within this function. [structure]
106: Avoid too many `return` statements within this function. [structure]
109: Avoid too many `return` statements within this function. [structure]
114: Avoid too many `return` statements within this function. [structure]
116: Avoid too many `return` statements within this function. [structure]
119: Function `togglePhraseModifier` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
232-266: Function `createRe` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
314-344: Function `blockType` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
355-362: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
434-441: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/tiddlywiki-cd477463b63f754d25c6f6593886de1b95f4bc47911a53d4225a0c78723a32cf.js (29 issues) ==
35-44: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
67-177: Function `tokenBase` has 86 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
85: Avoid too many `return` statements within this function. [structure]
92: Avoid too many `return` statements within this function. [structure]
96: Avoid too many `return` statements within this function. [structure]
100: Avoid too many `return` statements within this function. [structure]
104: Avoid too many `return` statements within this function. [structure]
108: Avoid too many `return` statements within this function. [structure]
112: Avoid too many `return` statements within this function. [structure]
115: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
125: Avoid too many `return` statements within this function. [structure]
129: Avoid too many `return` statements within this function. [structure]
132: Avoid too many `return` statements within this function. [structure]
135: Avoid too many `return` statements within this function. [structure]
139: Avoid too many `return` statements within this function. [structure]
144: Avoid too many `return` statements within this function. [structure]
149: Avoid too many `return` statements within this function. [structure]
151: Avoid too many `return` statements within this function. [structure]
156: Avoid too many `return` statements within this function. [structure]
162: Avoid too many `return` statements within this function. [structure]
165: Avoid too many `return` statements within this function. [structure]
169: Avoid too many `return` statements within this function. [structure]
172: Avoid too many `return` statements within this function. [structure]
176: Avoid too many `return` statements within this function. [structure]
180-190: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
193-204: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
229-240: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
300-304: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/tiki-d88c9ca5239d08047baa0edd625f4ce20f09a74fb688ee6e978a405ff06ca1c4.js (15 issues) ==
1-313: File `tiki-d88c9ca5239d08047baa0edd625f4ce20f09a74fb688ee6e978a405ff06ca1c4.js` has 274 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
41-127: Function `inText` has 78 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
75: Avoid too many `return` statements within this function. [structure]
79: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]
86: Avoid too many `return` statements within this function. [structure]
90: Avoid too many `return` statements within this function. [structure]
97: Avoid too many `return` statements within this function. [structure]
106: Avoid too many `return` statements within this function. [structure]
108: Avoid too many `return` statements within this function. [structure]
110: Avoid too many `return` statements within this function. [structure]
112: Avoid too many `return` statements within this function. [structure]
114: Avoid too many `return` statements within this function. [structure]
126: Avoid too many `return` statements within this function. [structure]
163: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/toml-f7926b1ba59b01eeea814a1c2a7a0e6f54020b7bbb23c826440a1e0917a464a3.js (11 issues) ==
24-82: Function `token` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
26-30: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
35-80: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
61: Avoid too many `return` statements within this function. [structure]
63: Avoid too many `return` statements within this function. [structure]
67: Avoid too many `return` statements within this function. [structure]
69: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
75: Avoid too many `return` statements within this function. [structure]
77: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/tornado-21a80b0171fcc141e2e7ff25c372174c8c6827dcbafef24597b8a0346c751845.js (4 issues) ==
4-68: Similar blocks of code found in 13 locations. Consider refactoring. [duplication]
17-22: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
51-58: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
61-65: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/troff-fcfe7ace2972697784150d0fc4c8e1d125df03f4d541779e19551a8e3b3d93e3.js (12 issues) ==
4-84: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
18-66: Function `tokenBase` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
25-29: Consider simplifying this complex logical expression. [structure]
25-26: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
41: Avoid too many `return` statements within this function. [structure]
43: Avoid too many `return` statements within this function. [structure]
48: Avoid too many `return` statements within this function. [structure]
53: Avoid too many `return` statements within this function. [structure]
55: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
57: Avoid too many `return` statements within this function. [structure]
60: Avoid too many `return` statements within this function. [structure]
65: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/ttcn-63bf252287987cd07a042ea4439d50017eb5b9ad1a0b6fc2e21279d1dce32fe3.js (33 issues) ==
37-103: Function `tokenBase` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
40-43: Identical blocks of code found in 7 locations. Consider refactoring. [duplication]
58: Avoid too many `return` statements within this function. [structure]
60-69: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
63: Avoid too many `return` statements within this function. [structure]
67: Avoid too many `return` statements within this function. [structure]
74: Avoid too many `return` statements within this function. [structure]
78: Avoid too many `return` statements within this function. [structure]
83: Avoid too many `return` statements within this function. [structure]
84: Avoid too many `return` statements within this function. [structure]
86: Avoid too many `return` statements within this function. [structure]
87: Avoid too many `return` statements within this function. [structure]
88: Avoid too many `return` statements within this function. [structure]
89: Avoid too many `return` statements within this function. [structure]
90: Avoid too many `return` statements within this function. [structure]
91: Avoid too many `return` statements within this function. [structure]
93: Avoid too many `return` statements within this function. [structure]
94: Avoid too many `return` statements within this function. [structure]
95: Avoid too many `return` statements within this function. [structure]
97: Avoid too many `return` statements within this function. [structure]
99: Avoid too many `return` statements within this function. [structure]
100: Avoid too many `return` statements within this function. [structure]
102: Avoid too many `return` statements within this function. [structure]
105-125: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
127-137: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
139-145: Identical blocks of code found in 10 locations. Consider refactoring. [duplication]
139: Function `Context` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
147-152: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
154-159: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
172-206: Function `token` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
198-201: Consider simplifying this complex logical expression. [structure]
216-220: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
222-242: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/ttcn-cfg-5d3cbf1bfa90f38a013b8573b2446064ceaca8bcf863a151c1bbe289b3b96edc.js (17 issues) ==
24-59: Function `tokenBase` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
26-29: Identical blocks of code found in 7 locations. Consider refactoring. [duplication]
44: Avoid too many `return` statements within this function. [structure]
48: Avoid too many `return` statements within this function. [structure]
53: Avoid too many `return` statements within this function. [structure]
55: Avoid too many `return` statements within this function. [structure]
56: Avoid too many `return` statements within this function. [structure]
58: Avoid too many `return` statements within this function. [structure]
61-81: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
83: Function `Context` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
83-89: Identical blocks of code found in 10 locations. Consider refactoring. [duplication]
90-95: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
96-101: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
104-151: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
114-146: Function `token` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
140-143: Consider simplifying this complex logical expression. [structure]
154-159: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/turtle-d79d686eb24968a2791be08d71ff46aefe289208dd669e0e6da764eabcb34f7a.js (18 issues) ==
25-75: Function `tokenBase` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
46: Avoid too many `return` statements within this function. [structure]
49: Avoid too many `return` statements within this function. [structure]
53: Avoid too many `return` statements within this function. [structure]
58: Avoid too many `return` statements within this function. [structure]
62: Avoid too many `return` statements within this function. [structure]
64: Avoid too many `return` statements within this function. [structure]
69: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
73: Avoid too many `return` statements within this function. [structure]
77-89: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
91-93: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
94-97: Similar blocks of code found in 5 locations. Consider refactoring. [duplication]
107-137: Function `token` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
108-111: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
115-117: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
119-134: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
139-154: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/twig-62c842cecbaef6390ffe13d665252eadae338d06302665d5418f7c29c97df135.js (17 issues) ==
4-141: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]
24-119: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
24-119: Function `tokenBase` has 85 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
55: Avoid too many `return` statements within this function. [structure]
64: Avoid too many `return` statements within this function. [structure]
68: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
74: Avoid too many `return` statements within this function. [structure]
78-93: Avoid deeply nested control flow statements. [structure]
80: Avoid too many `return` statements within this function. [structure]
83: Avoid too many `return` statements within this function. [structure]
86: Avoid too many `return` statements within this function. [structure]
96: Avoid too many `return` statements within this function. [structure]
100-105: Avoid deeply nested control flow statements. [structure]
106: Avoid too many `return` statements within this function. [structure]
108-116: Avoid deeply nested control flow statements. [structure]
115: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/vb-5a7e8398c86fdacc2fe8ad8f45de657f453086a5490bea21341d4fdc29f293e8.js (22 issues) ==
62-170: Function `tokenBase` has 80 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
77-109: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
112-115: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
114: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
124: Avoid too many `return` statements within this function. [structure]
127: Avoid too many `return` statements within this function. [structure]
132: Avoid too many `return` statements within this function. [structure]
134-140: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
139: Avoid too many `return` statements within this function. [structure]
142: Avoid too many `return` statements within this function. [structure]
148: Avoid too many `return` statements within this function. [structure]
152: Avoid too many `return` statements within this function. [structure]
156: Avoid too many `return` statements within this function. [structure]
160: Avoid too many `return` statements within this function. [structure]
164: Avoid too many `return` statements within this function. [structure]
169: Avoid too many `return` statements within this function. [structure]
172-195: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
198-231: Function `tokenLexer` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
230: Avoid too many `return` statements within this function. [structure]
248-252: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
262-267: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/vbscript-a429d12100e9b12e7e125e6799e531eae973c37367de506c6659104cdf51bd41.js (27 issues) ==
1-352: File `vbscript-a429d12100e9b12e7e125e6799e531eae973c37367de506c6659104cdf51bd41.js` has 253 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
117-258: Function `tokenBase` has 99 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
137-169: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
167: Avoid too many `return` statements within this function. [structure]
172-175: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
174: Avoid too many `return` statements within this function. [structure]
181: Avoid too many `return` statements within this function. [structure]
184: Avoid too many `return` statements within this function. [structure]
188: Avoid too many `return` statements within this function. [structure]
194: Avoid too many `return` statements within this function. [structure]
201: Avoid too many `return` statements within this function. [structure]
203-210: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
209: Avoid too many `return` statements within this function. [structure]
212: Avoid too many `return` statements within this function. [structure]
220: Avoid too many `return` statements within this function. [structure]
222-229: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
228: Avoid too many `return` statements within this function. [structure]
232: Avoid too many `return` statements within this function. [structure]
236: Avoid too many `return` statements within this function. [structure]
240: Avoid too many `return` statements within this function. [structure]
244: Avoid too many `return` statements within this function. [structure]
248: Avoid too many `return` statements within this function. [structure]
252: Avoid too many `return` statements within this function. [structure]
257: Avoid too many `return` statements within this function. [structure]
260-283: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
324-328: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
338-343: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/velocity-b43058210904ef1f1e1dd93c5231f1052a06e559c64377cb6a5225bb7fde1544.js (20 issues) ==
15-19: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
32-127: Function `tokenBase` has 80 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
65: Avoid too many `return` statements within this function. [structure]
70: Avoid too many `return` statements within this function. [structure]
75: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]
88: Avoid too many `return` statements within this function. [structure]
93: Avoid too many `return` statements within this function. [structure]
100: Avoid too many `return` statements within this function. [structure]
107-108: Avoid deeply nested control flow statements. [structure]
108: Avoid too many `return` statements within this function. [structure]
110-116: Consider simplifying this complex logical expression. [structure]
110-116: Avoid deeply nested control flow statements. [structure]
115: Avoid too many `return` statements within this function. [structure]
117-120: Avoid deeply nested control flow statements. [structure]
119: Avoid too many `return` statements within this function. [structure]
121-122: Avoid deeply nested control flow statements. [structure]
122: Avoid too many `return` statements within this function. [structure]
125: Avoid too many `return` statements within this function. [structure]
149-159: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/verilog-7a1ba608df7b7010b117a3d89fb14bda9249aaf5b70d6dedc232c8cab0a5630e.js (28 issues) ==
1-538: File `verilog-7a1ba608df7b7010b117a3d89fb14bda9249aaf5b70d6dedc232c8cab0a5630e.js` has 443 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
110-202: Function `tokenBase` has 78 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
125-132: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
128: Avoid too many `return` statements within this function. [structure]
130: Avoid too many `return` statements within this function. [structure]
134-141: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
137: Avoid too many `return` statements within this function. [structure]
139: Avoid too many `return` statements within this function. [structure]
146: Avoid too many `return` statements within this function. [structure]
152: Avoid too many `return` statements within this function. [structure]
159: Avoid too many `return` statements within this function. [structure]
163: Avoid too many `return` statements within this function. [structure]
169-173: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
169-177: Consider simplifying this complex logical expression. [structure]
176: Avoid too many `return` statements within this function. [structure]
181: Avoid too many `return` statements within this function. [structure]
195: Avoid too many `return` statements within this function. [structure]
197: Avoid too many `return` statements within this function. [structure]
201: Avoid too many `return` statements within this function. [structure]
204-215: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
217-227: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
229: Function `Context` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
229-235: Identical blocks of code found in 10 locations. Consider refactoring. [duplication]
298-344: Function `token` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
360: Avoid too many `return` statements within this function. [structure]
361: Avoid too many `return` statements within this function. [structure]
385-424: Function `tlvGenIndent` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
450-517: Function `tokenBase` has 57 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/codemirror/modes/vhdl-0733d4cc88bf2b07d4ed8c21ba82260cfdd0d6b5913e9a66a810452effc2accc.js (14 issues) ==
51-91: Function `tokenBase` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
71: Avoid too many `return` statements within this function. [structure]
76: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]
87: Avoid too many `return` statements within this function. [structure]
89: Avoid too many `return` statements within this function. [structure]
90: Avoid too many `return` statements within this function. [structure]
93-104: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
105-116: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
118: Function `Context` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
118-124: Identical blocks of code found in 10 locations. Consider refactoring. [duplication]
128-133: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
146-173: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
178-180: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/webidl-9a53f7cbdeb707025c970dd3c8eb93f9b20203f3d6f6e4dfa578c6ea367e7e8d.js (15 issues) ==
94-159: Function `readToken` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
111: Avoid too many `return` statements within this function. [structure]
114: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
123: Avoid too many `return` statements within this function. [structure]
126: Avoid too many `return` statements within this function. [structure]
130: Avoid too many `return` statements within this function. [structure]
133: Avoid too many `return` statements within this function. [structure]
142: Avoid too many `return` statements within this function. [structure]
145: Avoid too many `return` statements within this function. [structure]
149: Avoid too many `return` statements within this function. [structure]
150: Avoid too many `return` statements within this function. [structure]
151: Avoid too many `return` statements within this function. [structure]
154: Avoid too many `return` statements within this function. [structure]
158: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/xml-b01f14b4742e6ee4bad6cd05f948bac4dc091eb4d771ddf38c281f6f86ce9cae.js (15 issues) ==
1-395: File `xml-b01f14b4742e6ee4bad6cd05f948bac4dc091eb4d771ddf38c281f6f86ce9cae.js` has 366 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
4-394: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
68-113: Function `inText` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
86: Avoid too many `return` statements within this function. [structure]
91: Avoid too many `return` statements within this function. [structure]
95: Avoid too many `return` statements within this function. [structure]
108: Avoid too many `return` statements within this function. [structure]
111: Avoid too many `return` statements within this function. [structure]
137: Avoid too many `return` statements within this function. [structure]
328-373: Function `indent` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
343: Avoid too many `return` statements within this function. [structure]
345: Avoid too many `return` statements within this function. [structure]
347: Avoid too many `return` statements within this function. [structure]
371: Avoid too many `return` statements within this function. [structure]
372: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/xquery-50153344c52d89d071c6a4367ff1a2f4d91c613fa82e50685a0979c3a1a0e460.js (30 issues) ==
1-438: File `xquery-50153344c52d89d071c6a4367ff1a2f4d91c613fa82e50685a0979c3a1a0e460.js` has 320 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
19-69: Function `keywords` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
57: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
61: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
66: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
77-207: Function `tokenBase` has 91 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
106: Avoid too many `return` statements within this function. [structure]
111: Avoid too many `return` statements within this function. [structure]
116: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
122: Avoid too many `return` statements within this function. [structure]
127: Avoid too many `return` statements within this function. [structure]
132: Avoid too many `return` statements within this function. [structure]
136: Avoid too many `return` statements within this function. [structure]
139: Avoid too many `return` statements within this function. [structure]
143: Avoid too many `return` statements within this function. [structure]
148: Avoid too many `return` statements within this function. [structure]
153: Avoid too many `return` statements within this function. [structure]
158: Avoid too many `return` statements within this function. [structure]
163: Avoid too many `return` statements within this function. [structure]
169: Avoid deeply nested control flow statements. [structure]
170: Avoid deeply nested control flow statements. [structure]
198: Avoid too many `return` statements within this function. [structure]
205: Avoid too many `return` statements within this function. [structure]
233-270: Function `tokenString` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
344: Avoid too many `return` statements within this function. [structure]
348-356: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
360-368: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
371-379: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
422-426: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/yacas-9f9afd4082f6b1b709dfca0807bd3b57255e8617214460cbc6495ed00a354492.js (11 issues) ==
19-23: Similar blocks of code found in 18 locations. Consider refactoring. [duplication]
42-134: Function `tokenBase` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
84-87: Consider simplifying this complex logical expression. [structure]
103: Avoid too many `return` statements within this function. [structure]
108: Avoid too many `return` statements within this function. [structure]
113: Avoid too many `return` statements within this function. [structure]
119: Avoid too many `return` statements within this function. [structure]
124: Avoid too many `return` statements within this function. [structure]
129: Avoid too many `return` statements within this function. [structure]
133: Avoid too many `return` statements within this function. [structure]
136-149: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/yaml-7bdfc4674140abdb36ef36d4a63ac60194398954bce65fb547e9ae366323e3ef.js (14 issues) ==
20-100: Function `token` has 57 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
43: Avoid too many `return` statements within this function. [structure]
45: Avoid too many `return` statements within this function. [structure]
57: Avoid too many `return` statements within this function. [structure]
63: Avoid too many `return` statements within this function. [structure]
71: Avoid too many `return` statements within this function. [structure]
77: Avoid too many `return` statements within this function. [structure]
79: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]
82: Avoid too many `return` statements within this function. [structure]
84: Avoid too many `return` statements within this function. [structure]
91: Avoid too many `return` statements within this function. [structure]
93: Avoid too many `return` statements within this function. [structure]
99: Avoid too many `return` statements within this function. [structure]

== public/assets/codemirror/modes/yaml-frontmatter-17d2eb518fe9511e56d208fee0253d8f1091b0e6b08441d7b759460dc8f43b07.js (1 issue) ==
4-68: Similar blocks of code found in 20 locations. Consider refactoring. [duplication]

== public/assets/codemirror/modes/z80-bd7760ff68f643c6d44eecf92b89dc93ff1601f2bb432c80ce194caa68d8fb77.js (15 issues) ==
36-109: Function `token` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
67: Avoid too many `return` statements within this function. [structure]
69: Avoid too many `return` statements within this function. [structure]
73: Avoid too many `return` statements within this function. [structure]
75: Avoid too many `return` statements within this function. [structure]
77: Avoid too many `return` statements within this function. [structure]
81: Avoid too many `return` statements within this function. [structure]
90: Avoid too many `return` statements within this function. [structure]
93: Avoid too many `return` statements within this function. [structure]
97-98: Avoid deeply nested control flow statements. [structure]
98: Avoid too many `return` statements within this function. [structure]
99-107: Avoid deeply nested control flow statements. [structure]
101: Avoid too many `return` statements within this function. [structure]
104: Avoid too many `return` statements within this function. [structure]
108: Avoid too many `return` statements within this function. [structure]

== public/assets/coffee-script-1fc277cf20f802ad03dadce9de63d733cb9c789574d0d88a954987667d851cc4.js (261 issues) ==
1-7539: File `coffee-script-1fc277cf20f802ad03dadce9de63d733cb9c789574d0d88a954987667d851cc4.js` has 6673 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
9-7516: Function `CoffeeScript` has 6649 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
268: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
320: Identical blocks of code found in 6 locations. Consider refactoring. [duplication]
333-804: Function `Rewriter` has 451 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
403-408: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
420-425: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
485-664: Function `addImplicitBracesAndParens` has 178 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
490: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
505-508: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
509-512: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
561-568: Consider simplifying this complex logical expression. [structure]
570-574: Consider simplifying this complex logical expression. [structure]
597-603: Consider simplifying this complex logical expression. [structure]
607: Avoid too many `return` statements within this function. [structure]
628-630: Consider simplifying this complex logical expression. [structure]
629: Avoid too many `return` statements within this function. [structure]
633: Avoid too many `return` statements within this function. [structure]
648: Avoid too many `return` statements within this function. [structure]
656-661: Consider simplifying this complex logical expression. [structure]
662: Avoid too many `return` statements within this function. [structure]
709-756: Function `normalizeLines` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
754: Avoid too many `return` statements within this function. [structure]
846: Identical blocks of code found in 6 locations. Consider refactoring. [duplication]
856-896: Function `tokenize` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
878: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
913-1024: Function `identifierToken` has 110 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
914: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
921-924: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
925-928: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
942: Avoid too many `return` statements within this function. [structure]
946: Avoid too many `return` statements within this function. [structure]
1023: Avoid too many `return` statements within this function. [structure]
1026-1073: Function `numberToken` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1075-1157: Function `stringToken` has 81 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1105-1110: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1192-1261: Function `regexToken` has 68 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1263-1307: Function `lineToken` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1306: Avoid too many `return` statements within this function. [structure]
1309-1345: Function `outdentToken` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1380-1466: Function `literalToken` has 85 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1468-1495: Function `tagParameters` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1501-1559: Function `matchWithInterpolations` has 57 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1502: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1561-1624: Function `mergeInterpolationTokens` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1597-1602: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1617-1622: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1677: Function `token` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1687-1691: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1693-1697: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1733-1771: Function `makeDelimitedLiteral` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1829-1839: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2024-2814: Function `parser` has 784 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2025: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2031-2655: Function `anonymous` has 621 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2031: Function `performAction` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2045-2047: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
2054-2056: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2060-2062: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
2066-2068: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2069-2071: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2072-2074: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2075-2077: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2078-2080: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2081-2083: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2084-2086: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2087-2089: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2093-2095: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2102-2104: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2105-2107: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2111-2113: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
2114-2116: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
2117-2119: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2120-2122: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2143-2145: Similar blocks of code found in 10 locations. Consider refactoring. [duplication]
2149-2151: Similar blocks of code found in 10 locations. Consider refactoring. [duplication]
2152-2154: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2155-2157: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2158-2160: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2176-2178: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
2179-2181: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
2185-2187: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2191-2193: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
2197-2199: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2200-2202: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
2206-2208: Similar blocks of code found in 10 locations. Consider refactoring. [duplication]
2226-2228: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2229-2231: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2241-2243: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2247-2249: Similar blocks of code found in 10 locations. Consider refactoring. [duplication]
2250-2252: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2253-2255: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
2256-2258: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2259-2261: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2280-2282: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2283-2285: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2286-2288: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
2289-2291: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2292-2294: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2295-2297: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2298-2300: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2307-2309: Similar blocks of code found in 10 locations. Consider refactoring. [duplication]
2310-2314: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2315-2319: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2325-2327: Similar blocks of code found in 10 locations. Consider refactoring. [duplication]
2328-2330: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2331-2333: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2334-2336: Similar blocks of code found in 17 locations. Consider refactoring. [duplication]
2337-2339: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
2343-2345: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2346-2348: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2349-2351: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2355-2357: Similar blocks of code found in 10 locations. Consider refactoring. [duplication]
2376-2378: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2385-2387: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2388-2390: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2391-2393: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2403-2405: Similar blocks of code found in 10 locations. Consider refactoring. [duplication]
2415-2417: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2424-2426: Similar blocks of code found in 10 locations. Consider refactoring. [duplication]
2427-2429: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2430-2432: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2433-2435: Similar blocks of code found in 10 locations. Consider refactoring. [duplication]
2452-2454: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
2467-2469: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
2503-2505: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2511-2516: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2517-2522: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2523-2529: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2530-2535: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2536-2542: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2543-2549: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2550-2555: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2556-2562: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2563-2565: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2566-2568: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2575-2577: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
2585-2587: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2590-2592: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2594-2596: Similar blocks of code found in 7 locations. Consider refactoring. [duplication]
2603-2605: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2606-2608: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2609-2611: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2612-2614: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2615-2617: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2618-2620: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2621-2623: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2624-2626: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2627-2629: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2630-2632: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2642-2644: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2645-2647: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2648-2650: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
2651-2653: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
2656: Similar blocks of code found in 52 locations. Consider refactoring. [duplication]
2671-2807: Function `parse` has 135 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2839: Identical blocks of code found in 6 locations. Consider refactoring. [duplication]
3007: Identical blocks of code found in 6 locations. Consider refactoring. [duplication]
3326-3336: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
3376-3417: Function `compileNode` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3419-3460: Function `compileRoot` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3462-3508: Function `compileWithDeclarations` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3546-3555: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
3593-3602: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
3604-3613: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
3615-3624: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
3626-3637: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3639-3650: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3723-3732: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
3830-3832: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3834-3836: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3875: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3878-3880: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
3882-3884: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
3886-3888: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
3953-3982: Function `unfoldSoak` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3954-3981: Function `unfoldedSoak` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4039-4087: Function `unfoldSoak` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4089-4124: Function `compileNode` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4126-4154: Function `compileSplat` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4168-4196: Function `superReference` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4329: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4330: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4339-4368: Function `compileNode` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4370-4406: Function `compileArray` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4450-4538: Function `compileNode` has 87 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4451: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4511-4513: Avoid deeply nested control flow statements. [structure]
4540-4550: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
4565-4601: Function `compileNode` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4576-4585: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4586-4592: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4603-4613: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
4683-4725: Function `addProperties` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4713-4716: Avoid deeply nested control flow statements. [structure]
4779-4815: Function `compileNode` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4951-4960: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
4962-4971: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
4973-4982: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
4993-5021: Function `compileNode` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4997-5006: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5027-5036: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
5038-5047: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
5097-5106: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
5108-5117: Similar blocks of code found in 12 locations. Consider refactoring. [duplication]
5163-5228: Function `compileNode` has 64 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5164: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5172-5174: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5175-5177: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5185: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5220: Avoid too many `return` statements within this function. [structure]
5224: Avoid too many `return` statements within this function. [structure]
5226: Avoid too many `return` statements within this function. [structure]
5230-5362: Function `compilePatternMatch` has 131 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5231: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5250-5262: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5297: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5305-5314: Avoid deeply nested control flow statements. [structure]
5322-5334: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5324-5327: Avoid deeply nested control flow statements. [structure]
5329-5332: Avoid deeply nested control flow statements. [structure]
5360: Avoid too many `return` statements within this function. [structure]
5391-5422: Function `compileSplice` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5452-5577: Function `compileNode` has 124 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5495-5498: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5557-5563: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5583-5586: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5651-5691: Function `eachName` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5720-5762: Function `compileSplattedArray` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5761: Avoid too many `return` statements within this function. [structure]
5836-5864: Function `compileNode` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5848-5856: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5934-5966: Function `invert` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5962: Avoid too many `return` statements within this function. [structure]
5964: Avoid too many `return` statements within this function. [structure]
5992-6035: Function `compileNode` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6032: Avoid too many `return` statements within this function. [structure]
6072-6074: Consider simplifying this complex logical expression. [structure]
6227-6230: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6299: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6354-6393: Function `compileNode` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6402-6430: Function `For` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6434-6563: Function `compileNode` has 128 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6512-6515: Avoid deeply nested control flow statements. [structure]
6532-6540: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6576-6578: Consider simplifying this complex logical expression. [structure]
6641-6674: Function `compileNode` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6696-6699: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6701-6704: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6722-6725: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6752-6783: Function `compileStatement` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6952-7009: Function `generate` has 56 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7122-7127: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
7221: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
7239-7243: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
7240: Avoid deeply nested control flow statements. [structure]
7272-7276: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
7366-7367: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
7383: Identical blocks of code found in 6 locations. Consider refactoring. [duplication]
7424-7455: Function `load` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7523-7537: Function `compile` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]

== public/assets/components/style_settings_control-407743b41f0a6e989a7f387151002453528d93e7828ac8aac9193a845d835dc9.js (5 issues) ==
6-198: Function `settings` has a Cognitive Complexity of 26 (exceeds 5 allowed). Consider refactoring. [structure]
6-198: Function `settings` has 170 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6-198: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
44-195: Function `initDesignSettings` has 133 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
179: Avoid too many `return` statements within this function. [structure]

== public/assets/custom_profiles_input_texts-081ddc4e5ca940d46fbb8bf2cd4811fabf214db86153c34dde6ea106cca7ee80.js (1 issue) ==
2-31: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/extra_fields-77041421497744450cb616359acf1f33e25afb6e9371ed581fa84018812b65bb.js (1 issue) ==
1-14: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/file_browser-1bc572543f9aa64b0196581b6b2c96846805eb9255381d0f778810c05154d16f.js (2 issues) ==
1-24: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
31-48: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/flash-b5bd2b0332da88a03d926e716a349635cc9f55f6b028695ce41641f6e31f902b.js (1 issue) ==
1-41: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/flash-buyer-0719a6d7cd6fed7d79fcbaf7f40706ee3cf8c16618d14c38c7e429cb1cc42b3b.js (1 issue) ==
1-24: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/ie-032a883a0e862e96c82bf12ee885a5cbf8b3ef7f5c6b7fb1f476bb29da5c6353.js (1 issue) ==
1-26: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/indicator-5242a9435cbe7ff0bb0e4641529cffaf5f9c696743ae600dcf0c0aa87a947092.js (1 issue) ==
5-29: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/jquery-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js (135 issues) ==
1-11010: File `jquery-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js` has 7071 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
16-11009: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
176-243: Function `extend` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
222-228: Avoid deeply nested control flow statements. [structure]
234-236: Avoid deeply nested control flow statements. [structure]
329: Avoid too many `return` statements within this function. [structure]
591-2714: Function `Sizzle` has 1387 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
773-905: Function `Sizzle` has 81 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
807-834: Avoid deeply nested control flow statements. [structure]
837-847: Avoid deeply nested control flow statements. [structure]
839: Avoid too many `return` statements within this function. [structure]
846: Avoid too many `return` statements within this function. [structure]
866-870: Avoid deeply nested control flow statements. [structure]
876-878: Avoid deeply nested control flow statements. [structure]
891: Avoid too many `return` statements within this function. [structure]
894-896: Avoid deeply nested control flow statements. [structure]
904: Avoid too many `return` statements within this function. [structure]
1073-1437: Function `setDocument` has 218 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1375-1377: Avoid too many `return` statements within this function. [structure]
1380: Avoid too many `return` statements within this function. [structure]
1452-1468: Consider simplifying this complex logical expression. [structure]
1714-1841: Function `CHILD` has 80 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1714: Function `CHILD` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1741-1746: Avoid deeply nested control flow statements. [structure]
1757-1834: Consider simplifying this complex logical expression. [structure]
1811-1831: Avoid deeply nested control flow statements. [structure]
2098-2163: Function `tokenize` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2175-2231: Function `addCombinator` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2223-2225: Avoid deeply nested control flow statements. [structure]
2256: Function `condense` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2277-2368: Function `setMatcher` has 66 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2277: Function `setMatcher` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2335-2338: Avoid deeply nested control flow statements. [structure]
2370-2426: Function `matcherFromTokens` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2401-2420: Consider simplifying this complex logical expression. [structure]
2405-2407: Avoid deeply nested control flow statements. [structure]
2428-2537: Function `matcherFromGroupMatchers` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2431: Function `superMatcher` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2431-2532: Function `superMatcher` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2504-2506: Avoid deeply nested control flow statements. [structure]
2578-2647: Function `select` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2591-2605: Consider simplifying this complex logical expression. [structure]
2626-2629: Avoid deeply nested control flow statements. [structure]
2867-2980: Function `init` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2909-2919: Avoid deeply nested control flow statements. [structure]
2934-2936: Avoid deeply nested control flow statements. [structure]
2950: Avoid too many `return` statements within this function. [structure]
2955: Avoid too many `return` statements within this function. [structure]
2962: Avoid too many `return` statements within this function. [structure]
2967-2971: Avoid too many `return` statements within this function. [structure]
2979: Avoid too many `return` statements within this function. [structure]
3190-3382: Function `Callbacks` has 121 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3387-3478: Function `Deferred` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3481-3533: Function `when` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3622-3687: Function `promise` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3830-3920: Function `internalData` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3852-3855: Consider simplifying this complex logical expression. [structure]
3922-4011: Function `internalRemoveData` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3956-3960: Avoid deeply nested control flow statements. [structure]
4050-4101: Function `data` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4069-4075: Avoid deeply nested control flow statements. [structure]
4315-4371: Function `adjustCSS` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4329-4355: Consider simplifying this complex logical expression. [structure]
4376-4430: Function `access` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4376: Function `access` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4600: Function `buildFragment` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4600-4730: Function `buildFragment` has 78 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4658-4664: Avoid deeply nested control flow statements. [structure]
4776-4835: Function `on` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4776: Function `on` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4845-4962: Function `add` has 75 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4845: Function `add` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4965-5040: Function `remove` has 54 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4965: Function `remove` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
5003-5016: Consider simplifying this complex logical expression. [structure]
5042-5185: Function `trigger` has 93 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5187-5245: Function `dispatch` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5230-5233: Avoid deeply nested control flow statements. [structure]
5247-5298: Function `handlers` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5259-5290: Consider simplifying this complex logical expression. [structure]
5276-5280: Avoid deeply nested control flow statements. [structure]
5281-5283: Avoid deeply nested control flow statements. [structure]
5300-5344: Function `fix` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5374-5385: Consider simplifying this complex logical expression. [structure]
5714-5752: Function `setup` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5822-5857: Function `off` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5942-6008: Function `fixCloneNodeIssues` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6010-6105: Function `domManip` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6059-6064: Avoid deeply nested control flow statements. [structure]
6079-6095: Avoid deeply nested control flow statements. [structure]
6134-6190: Function `clone` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6192-6243: Function `cleanData` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6208-6216: Avoid deeply nested control flow statements. [structure]
6228-6236: Avoid deeply nested control flow statements. [structure]
6338-6379: Function `html` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6351-6373: Consider simplifying this complex logical expression. [structure]
6608-6689: Function `computeStyleTests` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6630-6661: Consider simplifying this complex logical expression. [structure]
6882-6937: Function `showHide` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6948: Function `augmentWidthOrHeight` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6992-7036: Function `getWidthOrHeight` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7081-7152: Function `style` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7222-7269: Consider simplifying this complex logical expression. [structure]
7375: Function `Tween` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
7382: Function `init` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
7541-7684: Function `defaultPrefilter` has 105 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7686-7721: Function `propFilter` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7723-7837: Function `Animation` has 92 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7940-7991: Function `stop` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7992-8032: Function `finish` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8194-8258: Function `val` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8396-8441: Function `attr` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8430: Avoid too many `return` statements within this function. [structure]
8434: Avoid too many `return` statements within this function. [structure]
8440: Avoid too many `return` statements within this function. [structure]
8702: Avoid too many `return` statements within this function. [structure]
8809-8845: Function `addClass` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8830-8832: Avoid deeply nested control flow statements. [structure]
8847-8891: Function `removeClass` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8876-8878: Avoid deeply nested control flow statements. [structure]
8893-8949: Function `toggleClass` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9199-9251: Function `ajaxHandleResponses` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9256-9350: Function `ajaxConvert` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9302-9325: Avoid deeply nested control flow statements. [structure]
9332-9343: Avoid deeply nested control flow statements. [structure]
9445-9869: Function `ajax` has 248 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9602-9609: Consider simplifying this complex logical expression. [structure]
9754-9866: Function `done` has 67 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10203-10334: Function `send` has 66 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10271-10273: Avoid deeply nested control flow statements. [structure]
10281-10283: Avoid deeply nested control flow statements. [structure]
10300-10306: Avoid deeply nested control flow statements. [structure]
10586-10648: Function `load` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10692-10738: Function `setOffset` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10742-10777: Function `offset` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/jquery.pjax-e4a4311be2e37306bfe08f66a33daa474e695ef65564709f813f396908b70f18.js (6 issues) ==
1-746: File `jquery.pjax-e4a4311be2e37306bfe08f66a33daa474e695ef65564709f813f396908b70f18.js` has 376 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
153-318: Function `pjax` has 105 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
225-276: Function `success` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
349-407: Function `onPjaxPopstate` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
413-444: Function `fallbackPjax` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
566-624: Function `extractContainer` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/jquery2-25ca496239ae8641a09627c8aace5863e7676e465fbb4ce81bc7eb78c4d15627.js (178 issues) ==
1-9816: File `jquery2-25ca496239ae8641a09627c8aace5863e7676e465fbb4ce81bc7eb78c4d15627.js` has 6373 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
176-243: Function `extend` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
222-228: Avoid deeply nested control flow statements. [structure]
234-236: Avoid deeply nested control flow statements. [structure]
312-321: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
410-422: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
557-2680: Function `Sizzle` has 1387 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
739-871: Function `Sizzle` has 81 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
773-800: Avoid deeply nested control flow statements. [structure]
803-813: Avoid deeply nested control flow statements. [structure]
805: Avoid too many `return` statements within this function. [structure]
812: Avoid too many `return` statements within this function. [structure]
832-836: Avoid deeply nested control flow statements. [structure]
842-844: Avoid deeply nested control flow statements. [structure]
857: Avoid too many `return` statements within this function. [structure]
860-862: Avoid deeply nested control flow statements. [structure]
870: Avoid too many `return` statements within this function. [structure]
1039-1403: Function `setDocument` has 218 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1341-1343: Avoid too many `return` statements within this function. [structure]
1346: Avoid too many `return` statements within this function. [structure]
1418-1434: Consider simplifying this complex logical expression. [structure]
1680: Function `CHILD` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1680-1807: Function `CHILD` has 80 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1707-1712: Avoid deeply nested control flow statements. [structure]
1723-1800: Consider simplifying this complex logical expression. [structure]
1777-1797: Avoid deeply nested control flow statements. [structure]
2064-2129: Function `tokenize` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2141-2197: Function `addCombinator` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2189-2191: Avoid deeply nested control flow statements. [structure]
2222: Function `condense` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2243-2334: Function `setMatcher` has 66 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2243: Function `setMatcher` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2301-2304: Avoid deeply nested control flow statements. [structure]
2336-2392: Function `matcherFromTokens` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2367-2386: Consider simplifying this complex logical expression. [structure]
2371-2373: Avoid deeply nested control flow statements. [structure]
2394-2503: Function `matcherFromGroupMatchers` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2397: Function `superMatcher` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2397-2498: Function `superMatcher` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2470-2472: Avoid deeply nested control flow statements. [structure]
2544-2613: Function `select` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2557-2571: Consider simplifying this complex logical expression. [structure]
2592-2595: Avoid deeply nested control flow statements. [structure]
2833-2940: Function `init` has 60 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2847-2856: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2875-2885: Avoid deeply nested control flow statements. [structure]
2915: Avoid too many `return` statements within this function. [structure]
2922: Avoid too many `return` statements within this function. [structure]
2927-2931: Avoid too many `return` statements within this function. [structure]
2939: Avoid too many `return` statements within this function. [structure]
2960-2972: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
3004-3022: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3082-3109: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
3145-3337: Function `Callbacks` has 121 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3342-3433: Function `Deferred` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3436-3487: Function `when` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3591: Function `access` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3591-3645: Function `access` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3702-3725: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
3787-3846: Function `remove` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3834-3845: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3847-3850: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
3901-3923: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
3926-4027: Function `data` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3942-3948: Avoid deeply nested control flow statements. [structure]
4037-4101: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4188-4244: Function `adjustCSS` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4202-4228: Consider simplifying this complex logical expression. [structure]
4254-4268: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4294-4305: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
4310-4397: Function `buildFragment` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4310: Function `buildFragment` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4311-4315: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4323-4357: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4400-4423: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4447: Function `on` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4447-4506: Function `on` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4516: Function `add` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4516-4622: Function `add` has 69 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4544-4552: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4557-4620: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4625: Function `remove` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4625-4696: Function `remove` has 52 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4625-4696: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4663-4676: Consider simplifying this complex logical expression. [structure]
4698-4756: Function `dispatch` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4741-4744: Avoid deeply nested control flow statements. [structure]
4758-4807: Function `handlers` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4770-4799: Consider simplifying this complex logical expression. [structure]
4785-4789: Avoid deeply nested control flow statements. [structure]
4790-4792: Avoid deeply nested control flow statements. [structure]
4836-4847: Consider simplifying this complex logical expression. [structure]
4859-4899: Function `fix` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5005-5041: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5051-5077: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5079-5122: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5086-5121: Function `off` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5149-5152: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5165-5197: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5200-5211: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5213-5301: Function `domManip` has 58 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5261-5266: Avoid deeply nested control flow statements. [structure]
5281-5294: Avoid deeply nested control flow statements. [structure]
5329-5369: Function `clone` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5335-5345: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5348-5359: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5371-5403: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5380-5388: Avoid deeply nested control flow statements. [structure]
5419-5429: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5465-5481: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5492-5529: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5550-5575: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5645-5657: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5819-5834: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5902-5912: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5914: Function `augmentWidthOrHeight` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6003-6061: Function `showHide` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6104-6169: Function `style` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6234-6239: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6246-6257: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6342: Function `Tween` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6349: Function `init` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6474-6492: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
6508-6642: Function `defaultPrefilter` has 99 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6518-6541: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6565-6572: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6644-6679: Function `propFilter` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6681-6794: Function `Animation` has 92 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6718-6759: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
6896-6947: Function `stop` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6948-6988: Function `finish` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7015-7035: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
7084-7086: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7128-7173: Function `attr` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7162: Avoid too many `return` statements within this function. [structure]
7166: Avoid too many `return` statements within this function. [structure]
7172: Avoid too many `return` statements within this function. [structure]
7178-7186: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7214-7225: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7251-7261: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7293: Avoid too many `return` statements within this function. [structure]
7375-7411: Function `addClass` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7396-7398: Avoid deeply nested control flow statements. [structure]
7413-7457: Function `removeClass` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7442-7444: Avoid deeply nested control flow statements. [structure]
7459-7517: Function `toggleClass` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7478-7515: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7544-7609: Function `val` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7695-7708: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
7720-7853: Function `trigger` has 87 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7857-7868: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7872-7885: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7888-7899: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
8040-8055: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
8109-8162: Function `ajaxHandleResponses` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8167-8261: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
8167-8261: Function `ajaxConvert` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8213-8236: Avoid deeply nested control flow statements. [structure]
8243-8254: Avoid deeply nested control flow statements. [structure]
8272-8337: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
8356-8786: Function `ajax` has 249 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8513-8526: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
8672-8783: Function `done` has 67 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8711-8750: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
8852-8860: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
9061-9184: Function `send` has 76 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9106-9137: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
9149-9168: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
9173-9183: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
9216-9223: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
9233-9245: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
9395-9457: Function `load` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9496-9544: Function `setOffset` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9614-9617: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
9630-9640: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
9655-9663: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
9674-9687: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
9712-9722: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/jquery3-e200ee796ef24add7054280d843a80de75392557bb4248241e870fac0914c0c1.js (198 issues) ==
1-10600: File `jquery3-e200ee796ef24add7054280d843a80de75392557bb4248241e870fac0914c0c1.js` has 6796 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
129-138: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
241-311: Function `extend` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
289-295: Avoid deeply nested control flow statements. [structure]
302-304: Avoid deeply nested control flow statements. [structure]
414-426: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
524-2776: Function `Sizzle` has 1459 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
730-864: Function `Sizzle` has 79 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
764-791: Avoid deeply nested control flow statements. [structure]
794-804: Avoid deeply nested control flow statements. [structure]
796: Avoid too many `return` statements within this function. [structure]
803: Avoid too many `return` statements within this function. [structure]
808-858: Consider simplifying this complex logical expression. [structure]
827-831: Avoid deeply nested control flow statements. [structure]
836-838: Avoid deeply nested control flow statements. [structure]
850: Avoid too many `return` statements within this function. [structure]
863: Avoid too many `return` statements within this function. [structure]
1028: Avoid too many `return` statements within this function. [structure]
1032: Avoid too many `return` statements within this function. [structure]
1090-1492: Function `setDocument` has 245 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1195-1197: Avoid deeply nested control flow statements. [structure]
1430-1432: Avoid too many `return` statements within this function. [structure]
1435: Avoid too many `return` statements within this function. [structure]
1504-1522: Consider simplifying this complex logical expression. [structure]
1772-1899: Function `CHILD` has 80 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1772: Function `CHILD` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1799-1804: Avoid deeply nested control flow statements. [structure]
1815-1892: Consider simplifying this complex logical expression. [structure]
1869-1889: Avoid deeply nested control flow statements. [structure]
2155-2220: Function `tokenize` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2232-2294: Function `addCombinator` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2285-2287: Avoid deeply nested control flow statements. [structure]
2319: Function `condense` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2340: Function `setMatcher` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2340-2431: Function `setMatcher` has 66 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2398-2401: Avoid deeply nested control flow statements. [structure]
2433-2489: Function `matcherFromTokens` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2464-2483: Consider simplifying this complex logical expression. [structure]
2468-2470: Avoid deeply nested control flow statements. [structure]
2491-2600: Function `matcherFromGroupMatchers` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2494: Function `superMatcher` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2494-2595: Function `superMatcher` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2567-2569: Avoid deeply nested control flow statements. [structure]
2641-2709: Function `select` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2654-2667: Consider simplifying this complex logical expression. [structure]
2688-2691: Avoid deeply nested control flow statements. [structure]
2935-3032: Function `init` has 54 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2949-2958: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2977-2987: Avoid deeply nested control flow statements. [structure]
3012: Avoid too many `return` statements within this function. [structure]
3019: Avoid too many `return` statements within this function. [structure]
3024-3028: Avoid too many `return` statements within this function. [structure]
3031: Avoid too many `return` statements within this function. [structure]
3052-3064: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
3097-3115: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3186-3213: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
3249-3441: Function `Callbacks` has 121 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3486-3780: Function `Deferred` has 178 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3542-3705: Function `then` has 102 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3544-3667: Function `resolve` has 69 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3548-3619: Function `mightThrow` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3783-3829: Function `when` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3939-3996: Function `access` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3939: Function `access` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4042-4065: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
4126-4172: Function `remove` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4160-4171: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4173-4176: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
4216: Avoid too many `return` statements within this function. [structure]
4219: Avoid too many `return` statements within this function. [structure]
4245-4267: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
4270-4343: Function `data` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4286-4292: Avoid deeply nested control flow statements. [structure]
4353-4417: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4555-4618: Function `adjustCSS` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4646-4692: Function `showHide` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4724-4738: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4772-4783: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
4788: Function `buildFragment` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4788-4875: Function `buildFragment` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4789-4793: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4801-4835: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4878-4901: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4936: Function `on` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4936-4995: Function `on` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5005: Function `add` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
5005-5117: Function `add` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5039-5047: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5052-5115: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5120: Function `remove` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
5120-5191: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5120-5191: Function `remove` has 52 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5158-5171: Consider simplifying this complex logical expression. [structure]
5193-5256: Function `dispatch` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5241-5244: Avoid deeply nested control flow statements. [structure]
5258-5314: Function `handlers` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5291-5295: Avoid deeply nested control flow statements. [structure]
5296-5298: Avoid deeply nested control flow statements. [structure]
5421-5502: Function `leverageNative` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5435-5500: Function `handler` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5563-5599: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5656: Avoid too many `return` statements within this function. [structure]
5659: Avoid too many `return` statements within this function. [structure]
5698-5724: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5726-5770: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5734-5769: Function `off` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5803-5806: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5817-5849: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5852-5863: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5865-5955: Function `domManip` has 60 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5913-5918: Avoid deeply nested control flow statements. [structure]
5933-5948: Avoid deeply nested control flow statements. [structure]
5983-6023: Function `clone` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5989-5999: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6002-6013: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
6025-6057: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6034-6042: Avoid deeply nested control flow statements. [structure]
6069-6079: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
6115-6131: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6142-6179: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6200-6225: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6228-6240: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6365-6380: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6458-6468: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6470-6536: Function `boxModelAdjustment` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6470: Function `boxModelAdjustment` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6538-6603: Function `getWidthOrHeight` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6571-6585: Consider simplifying this complex logical expression. [structure]
6623-6644: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6651-6726: Function `style` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6791-6834: Function `set` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6826-6831: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6838-6849: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
6905: Function `Tween` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6912: Function `init` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
7049-7067: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7083-7253: Function `defaultPrefilter` has 122 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7093-7116: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
7183-7186: Avoid deeply nested control flow statements. [structure]
7193-7200: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
7255-7290: Function `propFilter` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7292-7415: Function `Animation` has 96 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7336-7377: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7457-7499: Function `speed` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7529-7580: Function `stop` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7581-7621: Function `finish` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7648-7668: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
7714-7716: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7753-7797: Function `attr` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7786: Avoid too many `return` statements within this function. [structure]
7790: Avoid too many `return` statements within this function. [structure]
7796: Avoid too many `return` statements within this function. [structure]
7802-7810: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7832-7843: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7872-7882: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
7914: Avoid too many `return` statements within this function. [structure]
8028-8063: Function `addClass` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8032-8036: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
8048-8050: Avoid deeply nested control flow statements. [structure]
8065-8108: Function `removeClass` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8069-8073: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
8093-8095: Avoid deeply nested control flow statements. [structure]
8110-8169: Function `toggleClass` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8130-8167: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
8193-8258: Function `val` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8225-8257: Avoid too many `return` statements within this function. [structure]
8353-8366: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
8384-8527: Function `trigger` has 94 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8531-8542: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
8546-8559: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
8807-8822: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
8876-8929: Function `ajaxHandleResponses` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8934-9028: Function `ajaxConvert` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8934-9028: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
8980-9003: Avoid deeply nested control flow statements. [structure]
9010-9021: Avoid deeply nested control flow statements. [structure]
9039-9105: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
9124-9562: Function `ajax` has 253 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9284-9297: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
9449-9559: Function `done` has 67 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9487-9526: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
9635-9643: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
9722-9846: Function `send` has 77 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9768-9799: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
9811-9830: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
9835-9845: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
9885-9892: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
9902-9911: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
10039-10083: Function `parseHTML` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10089-10147: Function `load` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10179-10227: Function `setOffset` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10270-10312: Function `position` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10308-10311: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
10324-10334: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
10356-10364: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
10375-10388: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
10413-10423: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
10438-10449: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/jquery_ujs-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js (5 issues) ==
1-556: File `jquery_ujs-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js` has 360 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
1-555: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
108-183: Function `handleRemote` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
136: Avoid deeply nested control flow statements. [structure]
311-351: Function `blankInputs` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/mapping_rules-cbd3a95cf6903ebe53d00e9d39790e128da06c64870fc722817cfb8eff351aa8.js (1 issue) ==
1-35: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/master_application-933359dec804da3b1fc21574c58b912093aaca7418995a5060f89a65846a2ed7.js (1 issue) ==
4-200: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/message-bus-ajax-507dbf1e62c2904141cbbb9a82f09cbd8700a85bedccb2a2463b034729246ec8.js (1 issue) ==
13-42: Function `ajax` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/message-bus-cc3ea130bafef493f0f740b85b31fe03b95081f06f637703065c90c9899d576e.js (5 issues) ==
1-433: File `message-bus-cc3ea130bafef493f0f740b85b31fe03b95081f06f637703065c90c9899d576e.js` has 359 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
65-94: Function `processMessages` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
236-266: Function `complete` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
312-354: Function `start` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
391-429: Function `unsubscribe` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/plan-f3aa4bfdc45d677918e307171ca5220f7d3f2767f5f510ec31f05a38432dbc6d.js (1 issue) ==
1-5: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/plans_widget-fec9e5128b673b367b14a85959a4385f6b642c1537b11d90870ad5fbfc75c89a.js (2 issues) ==
1-59: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
61-87: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/plans_widget_v2-b6571bea822446f5310dde4be103acd1ed11219a1b6d292c6163e58831b3d385.js (2 issues) ==
9-70: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
72-99: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/provider-8fe2b392402b675cdb5bd6290041af2de7aaea16ed24fb44c7f824a82b91e67b.js (4 issues) ==
1-9: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
16: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
16: Function `Modernizr` has a Cognitive Complexity of 66 (exceeds 5 allowed). Consider refactoring. [structure]
20-64: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/provider/admin/apiconfig/services/integration-17da380f6df151fc65781054928b04446022935206b589c1aba887a3975b2162.js (10 issues) ==
1-743: File `integration-17da380f6df151fc65781054928b04446022935206b589c1aba887a3975b2162.js` has 652 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
3-432: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
65-94: Function `processMessages` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
236-266: Function `complete` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
312-354: Function `start` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
391-429: Function `unsubscribe` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
437-483: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
505: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
680-686: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
686-692: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/provider/admin/apiconfig/services/integration/oidc-1dfaed5410297815b10d0c5900d3e2b158dcc0cad9db4a0cacdab98bc498d76d.js (7 issues) ==
1-484: File `oidc-1dfaed5410297815b10d0c5900d3e2b158dcc0cad9db4a0cacdab98bc498d76d.js` has 395 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
3-432: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
65-94: Function `processMessages` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
236-266: Function `complete` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
312-354: Function `start` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
391-429: Function `unsubscribe` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
437-483: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/provider/admin/cms/templates-54ca6ac7204c0861a7ed4cf3eb62a517fee70edc56d5ae9cf9c79b0ff0014312.js (1 issue) ==
1-187: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/provider/admin/webhooks-95c009a9db886f8ee8bb55881a7fc2d3c0ae2d9d9f0eafbcf24a3a5dfe5b461a.js (1 issue) ==
1-20: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/provider/cms/sidebar-b6ec2f87e6ecafd2d628b964c598dfc67d5f6e01051c09adde567ff05da2b66c.js (9 issues) ==
1-569: File `sidebar-b6ec2f87e6ecafd2d628b964c598dfc67d5f6e01051c09adde567ff05da2b66c.js` has 493 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
28-84: Function `Sidebar` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
45-49: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
49-53: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
124-164: Function `hook` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
243-249: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
251-257: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
259-265: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
449-479: Function `filter` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/assets/provider/codemirror-f866ff2ed10a3bc794992363ed8efca1a69b58e7c127a4a2e852b901e693ddb6.js (241 issues) ==
1-11512: File `codemirror-f866ff2ed10a3bc794992363ed8efca1a69b58e7c127a4a2e852b901e693ddb6.js` has 9416 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
10-8922: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
62-129: Function `CodeMirror` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
137-233: Function `Display` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
420-455: Function `update` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
677-747: Function `updateDisplayIfNeeded` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
686-690: Consider simplifying this complex logical expression. [structure]
717-719: Consider simplifying this complex logical expression. [structure]
851-891: Function `patchDisplay` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
972-1010: Function `updateLineGutter` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1043: Function `insertLineWidgetsFor` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1104-1149: Function `applyTextInput` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1104: Function `applyTextInput` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1239-1318: Function `init` has 64 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1419-1467: Function `poll` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1425-1428: Consider simplifying this complex logical expression. [structure]
1466: Avoid too many `return` statements within this function. [structure]
1478-1553: Function `onContextMenu` has 60 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1574-1660: Function `init` has 75 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1623-1657: Function `onCopyCut` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1674-1711: Function `showPrimarySelection` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1678-1681: Consider simplifying this complex logical expression. [structure]
1784-1834: Function `pollContent` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1913-1966: Function `locateNodeInLineView` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1962: Avoid too many `return` statements within this function. [structure]
1968-2007: Function `domTextBetween` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1968: Function `domTextBetween` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1971-2000: Function `walk` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2247-2277: Function `skipAtomicInner` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2247: Function `skipAtomicInner` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2255-2258: Avoid deeply nested control flow statements. [structure]
2264-2265: Avoid deeply nested control flow statements. [structure]
2266-2267: Avoid deeply nested control flow statements. [structure]
2280: Function `skipAtomic` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2301: Avoid too many `return` statements within this function. [structure]
2349-2421: Function `drawSelectionRange` has 66 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2364-2398: Function `drawForLine` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2445-2481: Function `highlightWorker` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2454-2470: Consider simplifying this complex logical expression. [structure]
2632: Function `measureCharPrepared` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2654-2689: Function `nodeAndOffsetInLineMap` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2691-2746: Function `measureCharInner` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2725-2731: Consider simplifying this complex logical expression. [structure]
2829: Function `charCoords` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2837: Function `cursorCoords` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2837-2865: Function `cursorCoords` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2913-2964: Function `coordsCharInner` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2913: Function `coordsCharInner` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2942-2950: Consider simplifying this complex logical expression. [structure]
3147-3191: Function `endOperation_finish` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3262-3323: Function `regChange` has 56 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3297-3302: Avoid deeply nested control flow statements. [structure]
3306-3313: Avoid deeply nested control flow statements. [structure]
3419-3523: Function `registerEventHandlers` has 88 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3586-3625: Function `onMouseDown` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3644-3650: Consider simplifying this complex logical expression. [structure]
3684: Function `leftButtonSelect` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3684-3826: Function `leftButtonSelect` has 128 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3738-3779: Function `extendTo` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3861-3918: Function `onDrop` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4021-4094: Function `onScrollWheel` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4076-4092: Consider simplifying this complex logical expression. [structure]
4229: Consider simplifying this complex logical expression. [structure]
4421-4483: Function `makeChangeFromHistory` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4536-4593: Function `makeChangeSingleDocInEditor` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4595: Function `replaceRange` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4650: Function `scrollIntoView` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4660: Function `calculateScrollPos` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4734-4791: Function `indentLine` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4839: Function `findPosH` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4839-4886: Function `findPosH` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4863-4882: Consider simplifying this complex logical expression. [structure]
5135: Function `addWidget` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
5135-5168: Function `addWidget` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5897: Avoid too many `return` statements within this function. [structure]
5927-5980: Function `fromTextArea` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6082-6122: Function `clear` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6192: Function `markText` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6192-6259: Function `markText` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6285: Function `markTextShared` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6366-6369: Consider simplifying this complex logical expression. [structure]
6377-6381: Consider simplifying this complex logical expression. [structure]
6392-6450: Function `stretchSpansOverChange` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6425: Avoid deeply nested control flow statements. [structure]
6480: Avoid deeply nested control flow statements. [structure]
6571: Function `conflictingCollapsedRange` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6581-6583: Consider simplifying this complex logical expression. [structure]
6650-6653: Consider simplifying this complex logical expression. [structure]
6818-6853: Function `runMode` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6818: Function `runMode` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6859-6895: Function `highlightLine` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6940-6995: Function `buildLineContent` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7006-7062: Function `buildToken` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7006: Function `buildToken` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
7053-7060: Consider simplifying this complex logical expression. [structure]
7109-7175: Function `insertLineContent` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7128-7142: Consider simplifying this complex logical expression. [structure]
7129-7132: Avoid deeply nested control flow statements. [structure]
7133: Avoid deeply nested control flow statements. [structure]
7134: Avoid deeply nested control flow statements. [structure]
7135: Avoid deeply nested control flow statements. [structure]
7136: Avoid deeply nested control flow statements. [structure]
7137: Avoid deeply nested control flow statements. [structure]
7138-7139: Avoid deeply nested control flow statements. [structure]
7140-7142: Avoid deeply nested control flow statements. [structure]
7145: Avoid deeply nested control flow statements. [structure]
7188-7236: Function `updateDoc` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7654-7658: Consider simplifying this complex logical expression. [structure]
7951-7991: Function `addChangeToHistory` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
7956-7983: Consider simplifying this complex logical expression. [structure]
8013-8019: Consider simplifying this complex logical expression. [structure]
8078-8083: Avoid deeply nested control flow statements. [structure]
8295: Function `countColumn` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
8732: Avoid too many `return` statements within this function. [structure]
8770-8915: Function `bidiOrdering` has 100 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8780: Avoid too many `return` statements within this function. [structure]
8781: Avoid too many `return` statements within this function. [structure]
8782: Avoid too many `return` statements within this function. [structure]
8890: Avoid deeply nested control flow statements. [structure]
8892: Avoid deeply nested control flow statements. [structure]
8935-9007: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
8945-9005: Function `overlayMode` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9013-9755: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
9038-9086: Function `keywords` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9110-9165: Function `tokenBase` has 54 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9122: Avoid too many `return` statements within this function. [structure]
9125: Avoid too many `return` statements within this function. [structure]
9128: Avoid too many `return` statements within this function. [structure]
9131: Avoid too many `return` statements within this function. [structure]
9134: Avoid too many `return` statements within this function. [structure]
9138: Avoid too many `return` statements within this function. [structure]
9141: Avoid too many `return` statements within this function. [structure]
9145: Avoid too many `return` statements within this function. [structure]
9148: Avoid too many `return` statements within this function. [structure]
9152: Avoid too many `return` statements within this function. [structure]
9155: Avoid too many `return` statements within this function. [structure]
9158: Avoid too many `return` statements within this function. [structure]
9162-9163: Avoid too many `return` statements within this function. [structure]
9245: Function `JSLexical` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
9263: Function `parseJS` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
9358: Avoid too many `return` statements within this function. [structure]
9362: Avoid too many `return` statements within this function. [structure]
9364: Avoid too many `return` statements within this function. [structure]
9365: Avoid too many `return` statements within this function. [structure]
9366: Avoid too many `return` statements within this function. [structure]
9367-9368: Avoid too many `return` statements within this function. [structure]
9369: Avoid too many `return` statements within this function. [structure]
9370: Avoid too many `return` statements within this function. [structure]
9371-9372: Avoid too many `return` statements within this function. [structure]
9373: Avoid too many `return` statements within this function. [structure]
9374: Avoid too many `return` statements within this function. [structure]
9375: Avoid too many `return` statements within this function. [structure]
9376: Avoid too many `return` statements within this function. [structure]
9377: Avoid too many `return` statements within this function. [structure]
9378: Avoid too many `return` statements within this function. [structure]
9396: Avoid too many `return` statements within this function. [structure]
9397: Avoid too many `return` statements within this function. [structure]
9398: Avoid too many `return` statements within this function. [structure]
9399: Avoid too many `return` statements within this function. [structure]
9400: Avoid too many `return` statements within this function. [structure]
9401: Avoid too many `return` statements within this function. [structure]
9402: Avoid too many `return` statements within this function. [structure]
9403: Avoid too many `return` statements within this function. [structure]
9427: Avoid too many `return` statements within this function. [structure]
9428: Avoid too many `return` statements within this function. [structure]
9429: Avoid too many `return` statements within this function. [structure]
9430: Avoid too many `return` statements within this function. [structure]
9431: Avoid too many `return` statements within this function. [structure]
9483: Avoid too many `return` statements within this function. [structure]
9485: Avoid too many `return` statements within this function. [structure]
9487: Avoid too many `return` statements within this function. [structure]
9544: Avoid too many `return` statements within this function. [structure]
9616: Avoid too many `return` statements within this function. [structure]
9617: Avoid too many `return` statements within this function. [structure]
9714: Avoid too many `return` statements within this function. [structure]
9716: Avoid too many `return` statements within this function. [structure]
9718: Avoid too many `return` statements within this function. [structure]
9719: Avoid too many `return` statements within this function. [structure]
9720: Avoid too many `return` statements within this function. [structure]
9759-10149: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
9823-9868: Function `inText` has 43 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9841: Avoid too many `return` statements within this function. [structure]
9846: Avoid too many `return` statements within this function. [structure]
9850: Avoid too many `return` statements within this function. [structure]
9863: Avoid too many `return` statements within this function. [structure]
9866: Avoid too many `return` statements within this function. [structure]
9892: Avoid too many `return` statements within this function. [structure]
10083-10128: Function `indent` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10098: Avoid too many `return` statements within this function. [structure]
10100: Avoid too many `return` statements within this function. [structure]
10102: Avoid too many `return` statements within this function. [structure]
10126: Avoid too many `return` statements within this function. [structure]
10127: Avoid too many `return` statements within this function. [structure]
10153-10974: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
10187-10240: Function `tokenBase` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10203: Avoid too many `return` statements within this function. [structure]
10206: Avoid too many `return` statements within this function. [structure]
10209: Avoid too many `return` statements within this function. [structure]
10213: Avoid too many `return` statements within this function. [structure]
10217: Avoid too many `return` statements within this function. [structure]
10218: Avoid too many `return` statements within this function. [structure]
10220: Avoid too many `return` statements within this function. [structure]
10223: Avoid too many `return` statements within this function. [structure]
10225: Avoid too many `return` statements within this function. [structure]
10227: Avoid too many `return` statements within this function. [structure]
10228-10239: Consider simplifying this complex logical expression. [structure]
10233: Avoid too many `return` statements within this function. [structure]
10236: Avoid too many `return` statements within this function. [structure]
10238: Avoid too many `return` statements within this function. [structure]
10308-10340: Function `top` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10318: Avoid too many `return` statements within this function. [structure]
10321: Avoid too many `return` statements within this function. [structure]
10323: Avoid too many `return` statements within this function. [structure]
10325: Avoid too many `return` statements within this function. [structure]
10331: Avoid too many `return` statements within this function. [structure]
10333: Avoid too many `return` statements within this function. [structure]
10335: Avoid too many `return` statements within this function. [structure]
10337: Avoid too many `return` statements within this function. [structure]
10339: Avoid too many `return` statements within this function. [structure]
10359: Avoid too many `return` statements within this function. [structure]
10362: Avoid too many `return` statements within this function. [structure]
10364: Avoid too many `return` statements within this function. [structure]
10384: Avoid too many `return` statements within this function. [structure]
10386: Avoid too many `return` statements within this function. [structure]
10401: Avoid too many `return` statements within this function. [structure]
10421-10450: Function `atBlock` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
10449: Avoid too many `return` statements within this function. [structure]
10546-10551: Consider simplifying this complex logical expression. [structure]
10978-11126: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
11061-11088: Function `html` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
11146-11453: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
11176: Avoid too many `return` statements within this function. [structure]
11179: Avoid too many `return` statements within this function. [structure]
11184: Avoid too many `return` statements within this function. [structure]
11305: Avoid too many `return` statements within this function. [structure]
11306: Avoid too many `return` statements within this function. [structure]
11307: Avoid too many `return` statements within this function. [structure]
11310: Avoid too many `return` statements within this function. [structure]
11456-11458: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
11461-11478: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
11480-11504: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/provider/layout/provider-44f9dc0a6ca69d3a78adfc77156ac7b6dbedb2239f875f41502ba77de8854fa2.js (113 issues) ==
1-3408: File `provider-44f9dc0a6ca69d3a78adfc77156ac7b6dbedb2239f875f41502ba77de8854fa2.js` has 2437 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Function `access` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3: Function `add` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3: Function `remove` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3: Function `on` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3: Function `bk` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3: Function `bl` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3: Function `g` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3: Function `bp` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3: Function `init` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Consider simplifying this complex logical expression. [structure]
3: Function `cA` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Function `cZ` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid too many `return` statements within this function. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Avoid deeply nested control flow statements. [structure]
3: Consider simplifying this complex logical expression. [structure]
4-558: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
111-186: Function `handleRemote` has 62 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
139: Avoid deeply nested control flow statements. [structure]
314-354: Function `blankInputs` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
571-608: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
609: Function `django` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
609: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
609: Function `hljs` has a Cognitive Complexity of 267 (exceeds 5 allowed). Consider refactoring. [structure]
610-647: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
648-665: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
681-748: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
749-759: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
760-773: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
777: Avoid too many `return` statements within this function. [structure]
777: Avoid too many `return` statements within this function. [structure]
777: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
777: Avoid too many `return` statements within this function. [structure]
777: Avoid too many `return` statements within this function. [structure]
778-786: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
793: Function `Modernizr` has a Cognitive Complexity of 65 (exceeds 5 allowed). Consider refactoring. [structure]
793: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
797-841: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
869-947: Function `disableInterface` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1116-1171: Function `iframePostForm` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1186-2285: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1481-1559: Function `slideshow` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1562-1645: Function `launch` has 54 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1649-1698: Function `appendHTML` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1701-1762: Function `addBindings` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1817-1916: Function `position` has 73 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1918-1956: Function `resize` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1958-2090: Function `prep` has 101 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2092-2217: Function `load` has 91 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2294-2551: Function `_farbtastic` has 256 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2294-2551: Function `_farbtastic` has a Cognitive Complexity of 97 (exceeds 5 allowed). Consider refactoring. [structure]
2354-2402: Function `widgetCoords` has 47 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2395: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2396: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2440: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2441: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2479-2485: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2482-2484: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2513-2545: Function `RGBToHSL` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2579-2722: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2583-2593: Function `numberPadding` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
2663-2720: Function `dateFormat` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2663-2720: Function `dateFormat` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
3150-3346: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
3348-3388: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/provider/plans_widget-f0671460ef7e4c88c0d13d820dffbc14bd691437b372e899a255d5338014ff78.js (1 issue) ==
2: Function `loadPreview` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]

== public/assets/provider/signup_form-3defd2dedb1cd30f65889a04b622c0c1a01e2517305b99295a7fd8d419b83988.js (16 issues) ==
1-703: File `signup_form-3defd2dedb1cd30f65889a04b622c0c1a01e2517305b99295a7fd8d419b83988.js` has 537 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
4-14: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
34-45: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
49-53: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
55-59: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
185-255: Function `run_validator` has 54 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
185-255: Function `run_validator` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
289-370: Function `show` has 66 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
358: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
423-498: Function `tipsy` has 60 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
546-548: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
550-552: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
554-556: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
586: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
587: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
599-702: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/provider/threescale.toggle-6083cef46baf637b39a597f8d67aacd09a82090e2fd22e7268fc7afb17ea3a2b.js (2 issues) ==
65-72: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
74-81: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/provider/toggled_inputs-048a2feeb4f0ca2cdaf39dd451416ef885a15a4fd08b5b0a0ba14e192f916aa7.js (2 issues) ==
1-15: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
18-33: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/remote-ff250c7cd8110b492ea1d9013291a6039ab2ec37f5d6491b0d96178048216ccb.js (1 issue) ==
1-38: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/site_dns-03246a39cefe86f850ee668ee675bde2c8e0986db6493a54bf5ea80d8b5f787a.js (1 issue) ==
1-42: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/sites/general_settings-3abde8500f85c9b30c6b39c5dff0c2859072d45519d6bfcad4c0314f94df84c7.js (1 issue) ==
1-8: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/strftime-dad5923d82b5cc5fa665592ccd1358d157fc6322b73df0c4b58aa6770db558d6.js (6 issues) ==
1-630: File `strftime-dad5923d82b5cc5fa665592ccd1358d157fc6322b73df0c4b58aa6770db558d6.js` has 416 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
23-33: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
143-554: Function `Strftime` has 248 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
188-516: Function `_processFormat` has 190 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
218-220: Avoid deeply nested control flow statements. [structure]
482-487: Avoid deeply nested control flow statements. [structure]

== public/assets/swagger-oauth-2247045c3227ad5c18088c8c9f58ecd782f456289f0fbc27ab71dec8de0b8d58.js (21 issues) ==
1-292: File `swagger-oauth-2247045c3227ad5c18088c8c9f58ecd782f456289f0fbc27ab71dec8de0b8d58.js` has 252 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
11-166: Function `handleLogin` has a Cognitive Complexity of 29 (exceeds 5 allowed). Consider refactoring. [structure]
11-166: Function `handleLogin` has 131 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
26-28: Avoid deeply nested control flow statements. [structure]
32-34: Avoid deeply nested control flow statements. [structure]
40-43: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
64-72: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
74-81: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
83-86: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
121-132: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
121-132: Avoid deeply nested control flow statements. [structure]
127-132: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
201-208: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
235-290: Function `onOAuthComplete` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
235-290: Function `onOAuthComplete` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
237-288: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
253-257: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
255-256: Avoid deeply nested control flow statements. [structure]
259-264: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
259-264: Avoid deeply nested control flow statements. [structure]
265-283: Avoid deeply nested control flow statements. [structure]

== public/assets/swagger-oauth-6707a1d84ddc6521b3a1dd1155d5d5a6e72b4f60d1ff2488c3f09a932ccad036.js (15 issues) ==
7-113: Function `handleLogin` has a Cognitive Complexity of 13 (exceeds 5 allowed). Consider refactoring. [structure]
7-113: Function `handleLogin` has 91 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
16-19: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
42-50: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
53-60: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
62-65: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
145-152: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
155-211: Function `onOAuthComplete` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
155-211: Function `onOAuthComplete` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
157-209: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
173-177: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
175-176: Avoid deeply nested control flow statements. [structure]
179-184: Avoid deeply nested control flow statements. [structure]
179-184: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
185-203: Avoid deeply nested control flow statements. [structure]

== public/assets/swagger-ui-855f2474ffc1d18b297899af1a5a5235351d256c2baf09e5288cb2711bdccda7.js (291 issues) ==
1-9: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1-9210: File `swagger-ui-855f2474ffc1d18b297899af1a5a5235351d256c2baf09e5288cb2711bdccda7.js` has 7322 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
23-105: Function `resolve` has a Cognitive Complexity of 71 (exceeds 5 allowed). Consider refactoring. [structure]
23-105: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
23-105: Function `resolve` has 68 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
69: Avoid deeply nested control flow statements. [structure]
107-134: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
107-134: Function `alias` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
136-165: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
136-165: Function `define` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
169-194: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
198-201: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
205-341: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
343-405: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
411-526: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
446-491: Function `Logger` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
542-767: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
603-644: Function `parse` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
673: Avoid too many `return` statements within this function. [structure]
675: Avoid too many `return` statements within this function. [structure]
678-749: Function `CookieJar` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
682-715: Function `setCookie` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
691-700: Avoid deeply nested control flow statements. [structure]
710: Avoid too many `return` statements within this function. [structure]
713: Avoid too many `return` statements within this function. [structure]
769-1291: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1067-1130: Function `processOptions` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1136-1261: Function `createRequest` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1165-1214: Function `_raw` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1303-1339: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1341-1514: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1365-1415: Function `emit` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1410: Avoid too many `return` statements within this function. [structure]
1413: Avoid too many `return` statements within this function. [structure]
1419-1462: Function `addListener` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1520-1710: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1584-1701: Function `sprintf` has 109 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1600-1648: Function `format` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1612-1614: Avoid deeply nested control flow statements. [structure]
1652-1698: Function `parse` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1667-1677: Avoid deeply nested control flow statements. [structure]
1712-1920: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1741-1835: Function `Response` has 73 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1922-2111: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
2113-2213: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
2219-2426: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2278-2325: Function `singlebyte` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2328-2389: Function `table` has 56 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2432-2545: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2454-2488: Function `xhrHttp` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2547-2611: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2552-2586: Function `exports` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2613-2727: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2629-2658: Function `parseHeaders` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2673-2717: Function `handle` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2729-2761: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2768: Consider simplifying this complex logical expression. [structure]
2768: Function `cz` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `cY` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Function `access` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Function `init` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `bm` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `bf` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `be` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `on` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `remove` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `add` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2769: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2777-2778: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2788: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2788: Function `f` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2797: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2825-5074: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2890: Avoid too many `return` statements within this function. [structure]
2941: Avoid deeply nested control flow statements. [structure]
2985-3462: Function `handlebars` has 459 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2991-3099: Function `anonymous` has 104 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2991: Function `performAction` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3105-3207: Function `parse` has 101 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3147-3149: Avoid deeply nested control flow statements. [structure]
3210-3458: Function `lexer` has 235 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3300-3353: Function `next` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3350-3351: Avoid too many `return` statements within this function. [structure]
3378-3455: Function `anonymous` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3416: Avoid too many `return` statements within this function. [structure]
3430: Avoid too many `return` statements within this function. [structure]
3432: Avoid too many `return` statements within this function. [structure]
3434: Avoid too many `return` statements within this function. [structure]
3436: Avoid too many `return` statements within this function. [structure]
3448: Avoid too many `return` statements within this function. [structure]
3719-3749: Function `equals` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3744: Avoid too many `return` statements within this function. [structure]
3748: Avoid too many `return` statements within this function. [structure]
3817-3855: Function `block` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4131-4170: Function `compile` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4207-4260: Function `createFunctionContext` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4723-4763: Function `replaceStack` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4845-4899: Function `setupParams` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4977-5030: Function `template` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5055: Function `invokePartial` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
5083: Avoid too many `return` statements within this function. [structure]
5083-5107: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5084: Avoid too many `return` statements within this function. [structure]
5084: Avoid too many `return` statements within this function. [structure]
5084: Avoid too many `return` statements within this function. [structure]
5085: Avoid too many `return` statements within this function. [structure]
5095: Avoid too many `return` statements within this function. [structure]
5114-5145: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5115: Avoid deeply nested control flow statements. [structure]
5155-5161: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5173-5180: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5174-5179: Function `indexOf` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
5182-5190: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5183-5189: Function `filter` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
5192-5200: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5202-5235: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5202-5235: Function `keys` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5237-5272: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5237-5272: Function `SwaggerApi` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5237-5272: Function `SwaggerApi` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
5274-5313: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5274-5313: Function `build` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring. [structure]
5274-5313: Function `build` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5315-5365: Function `buildFromSpec` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5315-5365: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5315-5365: Function `buildFromSpec` has a Cognitive Complexity of 15 (exceeds 5 allowed). Consider refactoring. [structure]
5367-5412: Function `buildFrom1_1Spec` has a Cognitive Complexity of 16 (exceeds 5 allowed). Consider refactoring. [structure]
5367-5412: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5367-5412: Function `buildFrom1_1Spec` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5414-5431: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5438-5458: Function `setConsolidatedModels` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
5438-5458: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5460-5478: Function `help` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring. [structure]
5460-5478: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5480-5533: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5480-5533: Function `SwaggerResource` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring. [structure]
5480-5533: Function `SwaggerResource` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5535-5558: Function `getAbsoluteBasePath` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
5535-5558: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5556: Avoid too many `return` statements within this function. [structure]
5560-5578: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5560-5578: Function `addApiDeclaration` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
5580-5598: Function `addModels` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
5580-5598: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5600-5647: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5600-5647: Function `addOperations` has a Cognitive Complexity of 30 (exceeds 5 allowed). Consider refactoring. [structure]
5600-5647: Function `addOperations` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5649-5656: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5658-5672: Function `help` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
5658-5672: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5674-5690: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5674-5690: Function `SwaggerModel` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring. [structure]
5692-5705: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5707-5731: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5733-5748: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5750-5780: Function `SwaggerModelProperty` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
5750-5780: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5750-5780: Function `SwaggerModelProperty` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5782-5798: Function `getSampleValue` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
5782-5798: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5800-5816: Function `toSampleValue` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
5800-5816: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5818-5832: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5834-5942: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5834: Function `SwaggerOperation` has 12 arguments (exceeds 4 allowed). Consider refactoring. [structure]
5834-5942: Function `SwaggerOperation` has 96 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5834-5942: Function `SwaggerOperation` has a Cognitive Complexity of 48 (exceeds 5 allowed). Consider refactoring. [structure]
5915-5931: Avoid deeply nested control flow statements. [structure]
5944-5950: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5952-5965: Function `getSignature` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
5952-5965: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5967-5991: Function `getSampleJSON` has a Cognitive Complexity of 19 (exceeds 5 allowed). Consider refactoring. [structure]
5967-5991: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5993-6068: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6078-6092: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6094-6125: Function `urlify` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6094-6125: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6094-6125: Function `urlify` has a Cognitive Complexity of 17 (exceeds 5 allowed). Consider refactoring. [structure]
6143-6158: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6160-6170: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6173-6244: Function `formatXml` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6246-6353: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6246-6353: Function `SwaggerRequest` has 97 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6246-6353: Function `SwaggerRequest` has a Cognitive Complexity of 43 (exceeds 5 allowed). Consider refactoring. [structure]
6246: Function `SwaggerRequest` has 8 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6287-6288: Avoid deeply nested control flow statements. [structure]
6301-6306: Avoid deeply nested control flow statements. [structure]
6355-6424: Function `setHeaders` has a Cognitive Complexity of 32 (exceeds 5 allowed). Consider refactoring. [structure]
6355-6424: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6355-6424: Function `setHeaders` has 58 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6426-6435: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6442-6452: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6454-6466: Function `isIE8` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
6454-6466: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6480-6554: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6480-6554: Function `execute` has a Cognitive Complexity of 35 (exceeds 5 allowed). Consider refactoring. [structure]
6480-6554: Function `execute` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6506-6550: Function `complete` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6559-6572: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6574-6577: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6579-6598: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6600-6675: Function `execute` has a Cognitive Complexity of 28 (exceeds 5 allowed). Consider refactoring. [structure]
6600-6675: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6600-6675: Function `execute` has 61 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6693-6720: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6693-6720: Function `apply` has a Cognitive Complexity of 21 (exceeds 5 allowed). Consider refactoring. [structure]
6712-6713: Avoid deeply nested control flow statements. [structure]
6725-6730: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6732-6748: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6732-6748: Function `apply` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
6754-6758: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6763-6772: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6774-6778: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6801-6852: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6854-6862: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6865-6871: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6874-6880: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6882-6988: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6988-7029: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
7031-7111: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7113-7295: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7297-7429: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7431-7555: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7557-7623: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
7625-7691: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
7693-7836: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7838-7879: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
7881-7946: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7948-7989: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
7991-8010: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
8012-8031: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
8036-9196: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
8059-8087: Function `initialize` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8336-8363: Function `render` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8408-8436: Function `mouseEnter` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8442-8513: Function `render` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8535-8595: Function `submitOperation` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8601-8669: Function `handleFileUpload` has 67 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8714-8785: Function `formatXml` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8787-8833: Function `showStatus` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8978-9023: Function `render` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9039: Avoid too many `return` statements within this function. [structure]
9197: Function `hljs` has a Cognitive Complexity of 312 (exceeds 5 allowed). Consider refactoring. [structure]
9197: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/swagger-ui/extensions-9e3067380517b9171cca90920a6da3bebad9aeab304e024832ab147737436e75.js (5 issues) ==
4-61: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5-51: Function `ThreeScaleAutoComplete` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
63-65: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
67-83: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
93-110: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/swagger-ui/index-855f2474ffc1d18b297899af1a5a5235351d256c2baf09e5288cb2711bdccda7.js (291 issues) ==
1-9: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1-9210: File `index-855f2474ffc1d18b297899af1a5a5235351d256c2baf09e5288cb2711bdccda7.js` has 7322 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
23-105: Function `resolve` has a Cognitive Complexity of 71 (exceeds 5 allowed). Consider refactoring. [structure]
23-105: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
23-105: Function `resolve` has 68 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
69: Avoid deeply nested control flow statements. [structure]
107-134: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
107-134: Function `alias` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
136-165: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
136-165: Function `define` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
169-194: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
198-201: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
205-341: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
343-405: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
411-526: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
446-491: Function `Logger` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
542-767: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
603-644: Function `parse` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
673: Avoid too many `return` statements within this function. [structure]
675: Avoid too many `return` statements within this function. [structure]
678-749: Function `CookieJar` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
682-715: Function `setCookie` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
691-700: Avoid deeply nested control flow statements. [structure]
710: Avoid too many `return` statements within this function. [structure]
713: Avoid too many `return` statements within this function. [structure]
769-1291: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1067-1130: Function `processOptions` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1136-1261: Function `createRequest` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1165-1214: Function `_raw` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1303-1339: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1341-1514: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1365-1415: Function `emit` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1410: Avoid too many `return` statements within this function. [structure]
1413: Avoid too many `return` statements within this function. [structure]
1419-1462: Function `addListener` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1520-1710: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1584-1701: Function `sprintf` has 109 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1600-1648: Function `format` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1612-1614: Avoid deeply nested control flow statements. [structure]
1652-1698: Function `parse` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1667-1677: Avoid deeply nested control flow statements. [structure]
1712-1920: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1741-1835: Function `Response` has 73 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1922-2111: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
2113-2213: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
2219-2426: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2278-2325: Function `singlebyte` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2328-2389: Function `table` has 56 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2432-2545: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2454-2488: Function `xhrHttp` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2547-2611: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2552-2586: Function `exports` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2613-2727: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2629-2658: Function `parseHeaders` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2673-2717: Function `handle` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2729-2761: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2768: Consider simplifying this complex logical expression. [structure]
2768: Function `cz` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `cY` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Function `access` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Avoid too many `return` statements within this function. [structure]
2768: Function `init` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `bm` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `bf` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `be` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `on` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `remove` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Function `add` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Avoid deeply nested control flow statements. [structure]
2768: Consider simplifying this complex logical expression. [structure]
2769: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2777-2778: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2788: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2788: Function `f` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2797: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
2825-5074: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2890: Avoid too many `return` statements within this function. [structure]
2941: Avoid deeply nested control flow statements. [structure]
2985-3462: Function `handlebars` has 459 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2991-3099: Function `anonymous` has 104 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2991: Function `performAction` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3105-3207: Function `parse` has 101 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3147-3149: Avoid deeply nested control flow statements. [structure]
3210-3458: Function `lexer` has 235 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3300-3353: Function `next` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3350-3351: Avoid too many `return` statements within this function. [structure]
3378-3455: Function `anonymous` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3416: Avoid too many `return` statements within this function. [structure]
3430: Avoid too many `return` statements within this function. [structure]
3432: Avoid too many `return` statements within this function. [structure]
3434: Avoid too many `return` statements within this function. [structure]
3436: Avoid too many `return` statements within this function. [structure]
3448: Avoid too many `return` statements within this function. [structure]
3719-3749: Function `equals` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3744: Avoid too many `return` statements within this function. [structure]
3748: Avoid too many `return` statements within this function. [structure]
3817-3855: Function `block` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4131-4170: Function `compile` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4207-4260: Function `createFunctionContext` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4723-4763: Function `replaceStack` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4845-4899: Function `setupParams` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4977-5030: Function `template` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5055: Function `invokePartial` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]
5083: Avoid too many `return` statements within this function. [structure]
5083-5107: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5084: Avoid too many `return` statements within this function. [structure]
5084: Avoid too many `return` statements within this function. [structure]
5084: Avoid too many `return` statements within this function. [structure]
5085: Avoid too many `return` statements within this function. [structure]
5095: Avoid too many `return` statements within this function. [structure]
5114-5145: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
5115: Avoid deeply nested control flow statements. [structure]
5155-5161: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5173-5180: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5174-5179: Function `indexOf` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
5182-5190: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5183-5189: Function `filter` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
5192-5200: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5202-5235: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5202-5235: Function `keys` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5237-5272: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5237-5272: Function `SwaggerApi` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5237-5272: Function `SwaggerApi` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
5274-5313: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5274-5313: Function `build` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring. [structure]
5274-5313: Function `build` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5315-5365: Function `buildFromSpec` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5315-5365: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5315-5365: Function `buildFromSpec` has a Cognitive Complexity of 15 (exceeds 5 allowed). Consider refactoring. [structure]
5367-5412: Function `buildFrom1_1Spec` has a Cognitive Complexity of 16 (exceeds 5 allowed). Consider refactoring. [structure]
5367-5412: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5367-5412: Function `buildFrom1_1Spec` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5414-5431: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5438-5458: Function `setConsolidatedModels` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
5438-5458: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5460-5478: Function `help` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring. [structure]
5460-5478: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5480-5533: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5480-5533: Function `SwaggerResource` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring. [structure]
5480-5533: Function `SwaggerResource` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5535-5558: Function `getAbsoluteBasePath` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
5535-5558: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5556: Avoid too many `return` statements within this function. [structure]
5560-5578: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5560-5578: Function `addApiDeclaration` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
5580-5598: Function `addModels` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
5580-5598: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5600-5647: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5600-5647: Function `addOperations` has a Cognitive Complexity of 30 (exceeds 5 allowed). Consider refactoring. [structure]
5600-5647: Function `addOperations` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5649-5656: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5658-5672: Function `help` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
5658-5672: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5674-5690: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5674-5690: Function `SwaggerModel` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring. [structure]
5692-5705: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5707-5731: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5733-5748: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5750-5780: Function `SwaggerModelProperty` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
5750-5780: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5750-5780: Function `SwaggerModelProperty` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5782-5798: Function `getSampleValue` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
5782-5798: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5800-5816: Function `toSampleValue` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
5800-5816: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5818-5832: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5834-5942: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5834: Function `SwaggerOperation` has 12 arguments (exceeds 4 allowed). Consider refactoring. [structure]
5834-5942: Function `SwaggerOperation` has 96 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5834-5942: Function `SwaggerOperation` has a Cognitive Complexity of 48 (exceeds 5 allowed). Consider refactoring. [structure]
5915-5931: Avoid deeply nested control flow statements. [structure]
5944-5950: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
5952-5965: Function `getSignature` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
5952-5965: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5967-5991: Function `getSampleJSON` has a Cognitive Complexity of 19 (exceeds 5 allowed). Consider refactoring. [structure]
5967-5991: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
5993-6068: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6078-6092: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6094-6125: Function `urlify` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6094-6125: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6094-6125: Function `urlify` has a Cognitive Complexity of 17 (exceeds 5 allowed). Consider refactoring. [structure]
6143-6158: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6160-6170: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6173-6244: Function `formatXml` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6246-6353: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6246-6353: Function `SwaggerRequest` has 97 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6246-6353: Function `SwaggerRequest` has a Cognitive Complexity of 43 (exceeds 5 allowed). Consider refactoring. [structure]
6246: Function `SwaggerRequest` has 8 arguments (exceeds 4 allowed). Consider refactoring. [structure]
6287-6288: Avoid deeply nested control flow statements. [structure]
6301-6306: Avoid deeply nested control flow statements. [structure]
6355-6424: Function `setHeaders` has a Cognitive Complexity of 32 (exceeds 5 allowed). Consider refactoring. [structure]
6355-6424: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6355-6424: Function `setHeaders` has 58 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6426-6435: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6442-6452: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6454-6466: Function `isIE8` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
6454-6466: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6480-6554: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6480-6554: Function `execute` has a Cognitive Complexity of 35 (exceeds 5 allowed). Consider refactoring. [structure]
6480-6554: Function `execute` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6506-6550: Function `complete` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6559-6572: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6574-6577: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6579-6598: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6600-6675: Function `execute` has a Cognitive Complexity of 28 (exceeds 5 allowed). Consider refactoring. [structure]
6600-6675: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6600-6675: Function `execute` has 61 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
6693-6720: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6693-6720: Function `apply` has a Cognitive Complexity of 21 (exceeds 5 allowed). Consider refactoring. [structure]
6712-6713: Avoid deeply nested control flow statements. [structure]
6725-6730: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6732-6748: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6732-6748: Function `apply` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
6754-6758: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6763-6772: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6774-6778: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6801-6852: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
6854-6862: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6865-6871: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6874-6880: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6882-6988: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
6988-7029: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
7031-7111: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7113-7295: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7297-7429: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7431-7555: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7557-7623: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
7625-7691: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
7693-7836: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7838-7879: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
7881-7946: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
7948-7989: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
7991-8010: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
8012-8031: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
8036-9196: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
8059-8087: Function `initialize` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8336-8363: Function `render` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8408-8436: Function `mouseEnter` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8442-8513: Function `render` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8535-8595: Function `submitOperation` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8601-8669: Function `handleFileUpload` has 67 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8714-8785: Function `formatXml` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8787-8833: Function `showStatus` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
8978-9023: Function `render` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
9039: Avoid too many `return` statements within this function. [structure]
9197: Function `hljs` has a Cognitive Complexity of 312 (exceeds 5 allowed). Consider refactoring. [structure]
9197: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/swagger-ui/lib/handlebars-1.0.0-0956895244959df828d613707d3469bcfce07c4cdf9234aa2869fd59eef070a9.js (29 issues) ==
1-2279: File `handlebars-1.0.0-0956895244959df828d613707d3469bcfce07c4cdf9234aa2869fd59eef070a9.js` has 1714 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
28-2277: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
93: Avoid too many `return` statements within this function. [structure]
144: Avoid deeply nested control flow statements. [structure]
188-665: Function `handlebars` has 459 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
194-302: Function `anonymous` has 104 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
194: Function `performAction` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
308-410: Function `parse` has 101 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
350-352: Avoid deeply nested control flow statements. [structure]
413-661: Function `lexer` has 235 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
503-556: Function `next` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
553-554: Avoid too many `return` statements within this function. [structure]
581-658: Function `anonymous` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
619: Avoid too many `return` statements within this function. [structure]
633: Avoid too many `return` statements within this function. [structure]
635: Avoid too many `return` statements within this function. [structure]
637: Avoid too many `return` statements within this function. [structure]
639: Avoid too many `return` statements within this function. [structure]
651: Avoid too many `return` statements within this function. [structure]
922-952: Function `equals` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
947: Avoid too many `return` statements within this function. [structure]
951: Avoid too many `return` statements within this function. [structure]
1020-1058: Function `block` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1334-1373: Function `compile` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1410-1463: Function `createFunctionContext` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1926-1966: Function `replaceStack` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2048-2102: Function `setupParams` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2180-2233: Function `template` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2258: Function `invokePartial` has 6 arguments (exceeds 4 allowed). Consider refactoring. [structure]

== public/assets/swagger-ui/lib/jquery.wiggle.min-039164bf6151e8f188c754158b768f9c6c443d0b14126bec33eb509542058465.js (1 issue) ==
8-9: Identical blocks of code found in 5 locations. Consider refactoring. [duplication]

== public/assets/swagger-ui/lib/shred.bundle-ba4e8d9b7bb9bbd363f404fddcb454a31326c6b07f8e381e65062e39305958b2.js (56 issues) ==
1-2766: File `shred.bundle-ba4e8d9b7bb9bbd363f404fddcb454a31326c6b07f8e381e65062e39305958b2.js` has 2029 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
1-9: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
23-105: Function `resolve` has a Cognitive Complexity of 71 (exceeds 5 allowed). Consider refactoring. [structure]
23-105: Function `resolve` has 68 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
23-105: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
69: Avoid deeply nested control flow statements. [structure]
107-134: Function `alias` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
107-134: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
136-165: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
136-165: Function `define` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
169-194: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
198-201: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
205-341: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
343-405: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
411-526: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
446-491: Function `Logger` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
542-767: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
603-644: Function `parse` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
673: Avoid too many `return` statements within this function. [structure]
675: Avoid too many `return` statements within this function. [structure]
678-749: Function `CookieJar` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
682-715: Function `setCookie` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
691-700: Avoid deeply nested control flow statements. [structure]
710: Avoid too many `return` statements within this function. [structure]
713: Avoid too many `return` statements within this function. [structure]
769-1291: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1067-1130: Function `processOptions` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1136-1261: Function `createRequest` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1165-1214: Function `_raw` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1303-1339: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1341-1514: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1365-1415: Function `emit` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1410: Avoid too many `return` statements within this function. [structure]
1413: Avoid too many `return` statements within this function. [structure]
1419-1462: Function `addListener` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1520-1710: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1584-1701: Function `sprintf` has 109 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1600-1648: Function `format` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1612-1614: Avoid deeply nested control flow statements. [structure]
1652-1698: Function `parse` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1667-1677: Avoid deeply nested control flow statements. [structure]
1712-1920: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1741-1835: Function `Response` has 73 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1922-2111: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
2113-2213: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
2219-2426: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2278-2325: Function `singlebyte` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2328-2389: Function `table` has 56 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2432-2545: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2454-2488: Function `xhrHttp` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2547-2611: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2552-2586: Function `exports` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2613-2727: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2629-2658: Function `parseHeaders` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2673-2717: Function `handle` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2729-2761: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/swagger-ui/lib/swagger-706f347bf9491457f5ccfad474b9a086f6b19a4038547e065f06902ce0b787b8.js (105 issues) ==
1-1654: File `swagger-706f347bf9491457f5ccfad474b9a086f6b19a4038547e065f06902ce0b787b8.js` has 1466 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
10-16: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
28-35: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
29-34: Function `indexOf` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
37-45: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
38-44: Function `filter` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
47-55: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
57-90: Function `keys` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
57-90: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
92-127: Function `SwaggerApi` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
92-127: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
92-127: Function `SwaggerApi` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
129-168: Function `build` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
129-168: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
129-168: Function `build` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring. [structure]
170-220: Function `buildFromSpec` has a Cognitive Complexity of 15 (exceeds 5 allowed). Consider refactoring. [structure]
170-220: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
170-220: Function `buildFromSpec` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
222-267: Function `buildFrom1_1Spec` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
222-267: Function `buildFrom1_1Spec` has a Cognitive Complexity of 16 (exceeds 5 allowed). Consider refactoring. [structure]
222-267: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
269-286: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
293-313: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
293-313: Function `setConsolidatedModels` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
315-333: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
315-333: Function `help` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring. [structure]
335-388: Function `SwaggerResource` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
335-388: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
335-388: Function `SwaggerResource` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring. [structure]
390-413: Function `getAbsoluteBasePath` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
390-413: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
411: Avoid too many `return` statements within this function. [structure]
415-433: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
415-433: Function `addApiDeclaration` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
435-453: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
435-453: Function `addModels` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
455-502: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
455-502: Function `addOperations` has a Cognitive Complexity of 30 (exceeds 5 allowed). Consider refactoring. [structure]
455-502: Function `addOperations` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
504-511: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
513-527: Function `help` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
513-527: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
529-545: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
529-545: Function `SwaggerModel` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring. [structure]
547-560: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
562-586: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
588-603: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
605-635: Function `SwaggerModelProperty` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
605-635: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
605-635: Function `SwaggerModelProperty` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
637-653: Function `getSampleValue` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
637-653: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
655-671: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
655-671: Function `toSampleValue` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
673-687: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
689-797: Function `SwaggerOperation` has a Cognitive Complexity of 48 (exceeds 5 allowed). Consider refactoring. [structure]
689-797: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
689-797: Function `SwaggerOperation` has 96 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
689: Function `SwaggerOperation` has 12 arguments (exceeds 4 allowed). Consider refactoring. [structure]
770-786: Avoid deeply nested control flow statements. [structure]
799-805: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
807-820: Function `getSignature` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
807-820: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
822-846: Function `getSampleJSON` has a Cognitive Complexity of 19 (exceeds 5 allowed). Consider refactoring. [structure]
822-846: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
848-923: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
933-947: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
949-980: Function `urlify` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
949-980: Function `urlify` has a Cognitive Complexity of 17 (exceeds 5 allowed). Consider refactoring. [structure]
949-980: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
998-1013: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1015-1025: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1028-1099: Function `formatXml` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1101-1208: Function `SwaggerRequest` has 97 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1101: Function `SwaggerRequest` has 8 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1101-1208: Function `SwaggerRequest` has a Cognitive Complexity of 43 (exceeds 5 allowed). Consider refactoring. [structure]
1101-1208: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1142-1143: Avoid deeply nested control flow statements. [structure]
1156-1161: Avoid deeply nested control flow statements. [structure]
1210-1279: Function `setHeaders` has 58 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1210-1279: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1210-1279: Function `setHeaders` has a Cognitive Complexity of 32 (exceeds 5 allowed). Consider refactoring. [structure]
1281-1290: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1297-1307: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1309-1321: Function `isIE8` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
1309-1321: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1335-1409: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1335-1409: Function `execute` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1335-1409: Function `execute` has a Cognitive Complexity of 35 (exceeds 5 allowed). Consider refactoring. [structure]
1361-1405: Function `complete` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1414-1427: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1429-1432: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1434-1453: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1455-1530: Function `execute` has 61 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1455-1530: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1455-1530: Function `execute` has a Cognitive Complexity of 28 (exceeds 5 allowed). Consider refactoring. [structure]
1548-1575: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1548-1575: Function `apply` has a Cognitive Complexity of 21 (exceeds 5 allowed). Consider refactoring. [structure]
1567-1568: Avoid deeply nested control flow statements. [structure]
1580-1585: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1587-1603: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1587-1603: Function `apply` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
1609-1613: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1618-1627: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
1629-1633: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/swagger-ui/swagger-ui-d0e9d2f99cbb9d174daaec4e0c846c3cfb984dd484e8e93591138b9d2329b010.js (30 issues) ==
1-2399: File `swagger-ui-d0e9d2f99cbb9d174daaec4e0c846c3cfb984dd484e8e93591138b9d2329b010.js` has 2053 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
3-54: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
56-64: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
67-73: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
76-82: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
84-190: Identical blocks of code found in 3 locations. Consider refactoring. [duplication]
190-231: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
233-313: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
315-497: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
499-631: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
633-757: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
759-825: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
827-893: Similar blocks of code found in 6 locations. Consider refactoring. [duplication]
895-1038: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1040-1081: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
1083-1148: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1150-1191: Similar blocks of code found in 9 locations. Consider refactoring. [duplication]
1193-1212: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1214-1233: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1238-2398: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1261-1289: Function `initialize` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1538-1565: Function `render` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1610-1638: Function `mouseEnter` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1644-1715: Function `render` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1737-1797: Function `submitOperation` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1803-1871: Function `handleFileUpload` has 67 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1916-1987: Function `formatXml` has 70 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1989-2035: Function `showStatus` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2180-2225: Function `render` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2241: Avoid too many `return` statements within this function. [structure]

== public/assets/swagger-ui/threescale-03e7670104c8bc56283ca613522302b083bd6dbe4fd8438510b4d1d5efae19ef.js (6 issues) ==
4-7: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
11-23: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
67-74: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
82-89: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
111-115: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
121-129: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/swagger-ui2/api_docs_proxy-8cc9e8371c7b0a9276c122e162499e45aa47c31056ee30b5e27b95871f664554.js (5 issues) ==
4-7: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
22-29: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
37-44: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
58-62: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
77-85: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/swagger-ui2/autocomplete-d8816d391adb687fb4d221c7f6bf54f52e4ebd69a8681843499726e9e2e47958.js (6 issues) ==
4-61: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5-51: Function `ThreeScaleAutoComplete` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
63-65: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
67-83: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
93-110: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
118-130: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/assets/swagger-ui2/lib/jquery.wiggle.min-039164bf6151e8f188c754158b768f9c6c443d0b14126bec33eb509542058465.js (1 issue) ==
8-9: Identical blocks of code found in 5 locations. Consider refactoring. [duplication]

== public/assets/swagger-ui2/lib/marked-5b2fa3db4ac5ac253e64dd982bb46394fea2a3d4a7748e649fc36c9516cb1319.js (29 issues) ==
1-1274: File `marked-5b2fa3db4ac5ac253e64dd982bb46394fea2a3d4a7748e649fc36c9516cb1319.js` has 901 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
108-114: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
150-443: Function `token` has 213 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
212-217: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
219-229: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
320-323: Avoid deeply nested control flow statements. [structure]
332: Avoid deeply nested control flow statements. [structure]
383-388: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
390-400: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
531-539: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
552-555: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
561-693: Function `output` has 105 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
645-649: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
652-656: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
910-913: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
965-1071: Function `tok` has 92 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1017: Avoid too many `return` statements within this function. [structure]
1019-1027: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1026: Avoid too many `return` statements within this function. [structure]
1036: Avoid too many `return` statements within this function. [structure]
1047: Avoid too many `return` statements within this function. [structure]
1049-1057: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1056: Avoid too many `return` statements within this function. [structure]
1062: Avoid too many `return` statements within this function. [structure]
1065: Avoid too many `return` statements within this function. [structure]
1068: Avoid too many `return` statements within this function. [structure]
1136-1218: Function `marked` has 67 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1208: Avoid too many `return` statements within this function. [structure]
1212-1214: Avoid too many `return` statements within this function. [structure]

== public/assets/swagger-ui2/lib/shred.bundle-628e10459050b0b2d6911c599da96c6b0271576f91942ff846000877011bde11.js (54 issues) ==
1-2766: File `shred.bundle-628e10459050b0b2d6911c599da96c6b0271576f91942ff846000877011bde11.js` has 2025 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
1-9: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
23-105: Function `resolve` has a Cognitive Complexity of 71 (exceeds 5 allowed). Consider refactoring. [structure]
23-105: Function `resolve` has 68 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
23-105: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
69: Avoid deeply nested control flow statements. [structure]
107-134: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
107-134: Function `alias` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
136-165: Function `define` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
136-165: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
169-194: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
198-201: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
205-341: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
343-405: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
411-526: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
446-491: Function `Logger` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
542-767: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
603-644: Function `parse` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
673: Avoid too many `return` statements within this function. [structure]
675: Avoid too many `return` statements within this function. [structure]
678-749: Function `CookieJar` has 65 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
682-715: Function `setCookie` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
691-700: Avoid deeply nested control flow statements. [structure]
710: Avoid too many `return` statements within this function. [structure]
713: Avoid too many `return` statements within this function. [structure]
769-1291: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1067-1130: Function `processOptions` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1136-1261: Function `createRequest` has 72 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1165-1214: Function `_raw` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1303-1339: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1341-1514: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1365-1415: Function `emit` has 41 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1410: Avoid too many `return` statements within this function. [structure]
1413: Avoid too many `return` statements within this function. [structure]
1419-1462: Function `addListener` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1520-1710: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
1584-1701: Function `sprintf` has 109 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1600-1648: Function `format` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1612-1614: Avoid deeply nested control flow statements. [structure]
1652-1698: Function `parse` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1667-1677: Avoid deeply nested control flow statements. [structure]
1741-1835: Function `Response` has 73 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1922-2111: Identical blocks of code found in 4 locations. Consider refactoring. [duplication]
2219-2426: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2278-2325: Function `singlebyte` has 37 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2328-2389: Function `table` has 56 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2432-2545: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2454-2488: Function `xhrHttp` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2547-2611: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2552-2586: Function `exports` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2613-2727: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]
2629-2658: Function `parseHeaders` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2673-2717: Function `handle` has 40 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2729-2761: Similar blocks of code found in 4 locations. Consider refactoring. [duplication]

== public/assets/switch-891993420210d2d65a0a744aec80096a2211e29678ad004189c119ccace40a88.js (1 issue) ==
1-18: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]

== public/assets/threescale-1c08f72c35e5a370de20c23763e80d5447e32726a4a0f1fe59a582fe3d1726c9.js (4 issues) ==
28-171: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
32-42: Function `numberPadding` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
112-169: Function `dateFormat` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
112-169: Function `dateFormat` has 33 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/packs/js/0-9493fd89a91722248c69.chunk.js (1 issue) ==
57-81: Function `./node_modules/css-loader/dist/runtime/url-escape.js` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]

== public/packs/js/OAS3Autocomplete-90347e26507839a5f5b6.js (181 issues) ==
1-6026: File `OAS3Autocomplete-90347e26507839a5f5b6.js` has 3441 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
87-6025: `` has 87 functions (exceeds 20 allowed). Consider refactoring. [structure]
94-239: Function `./app/javascript/packs/OAS3Autocomplete.js` has a Cognitive Complexity of 48 (exceeds 5 allowed). Consider refactoring. [structure]
94-239: Function `./app/javascript/packs/OAS3Autocomplete.js` has 106 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
113: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
115: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
125-142: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
162-165: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
170-174: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
178-186: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
194-237: Function `autocompleteOAS3` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
194-237: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
195-232: Function `_callee` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
197-231: Function `_callee$` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
241-289: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
246-289: Function `./app/javascript/src/utilities/utils.js` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
291-310: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
312-327: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
329-374: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
334-374: Function `./node_modules/@babel/runtime/helpers/asyncToGenerator.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
336: Function `asyncGeneratorStep` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
376-400: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
402-415: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
417-430: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
432-453: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
455-475: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
460-475: Function `./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring. [structure]
489-503: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
505-518: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
520-536: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
538-552: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
554-568: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
570-602: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
575-602: Function `./node_modules/core-js/modules/_array-includes.js` has a Cognitive Complexity of 29 (exceeds 5 allowed). Consider refactoring. [structure]
604-636: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
609-636: Function `./node_modules/core-js/modules/_classof.js` has a Cognitive Complexity of 22 (exceeds 5 allowed). Consider refactoring. [structure]
638-652: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
654-665: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
667-696: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
698-712: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
714-727: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
729-745: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
762-814: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
767-814: Function `./node_modules/core-js/modules/_export.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
767-814: Function `./node_modules/core-js/modules/_export.js` has a Cognitive Complexity of 32 (exceeds 5 allowed). Consider refactoring. [structure]
816-832: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
834-868: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
839-868: Function `./node_modules/core-js/modules/_for-of.js` has a Cognitive Complexity of 27 (exceeds 5 allowed). Consider refactoring. [structure]
849: Function `exports` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
870-880: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
882-897: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
899-912: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
914-931: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
933-944: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
946-958: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
960-985: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
965-985: Function `./node_modules/core-js/modules/_invoke.js` has a Cognitive Complexity of 17 (exceeds 5 allowed). Consider refactoring. [structure]
987-1002: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1004-1021: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1023-1035: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1037-1058: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1042-1058: Function `./node_modules/core-js/modules/_iter-call.js` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
1060-1083: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1085-1164: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1090-1164: Function `./node_modules/core-js/modules/_iter-define.js` has a Cognitive Complexity of 54 (exceeds 5 allowed). Consider refactoring. [structure]
1090-1164: Function `./node_modules/core-js/modules/_iter-define.js` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1110-1161: Function `exports` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1110: Function `exports` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1166-1197: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1171-1197: Function `./node_modules/core-js/modules/_iter-detect.js` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
1199-1211: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1237-1315: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1242-1315: Function `./node_modules/core-js/modules/_microtask.js` has a Cognitive Complexity of 25 (exceeds 5 allowed). Consider refactoring. [structure]
1242-1315: Function `./node_modules/core-js/modules/_microtask.js` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1251-1312: Function `exports` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1317-1345: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1347-1397: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1352-1397: Function `./node_modules/core-js/modules/_object-create.js` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
1352-1397: Function `./node_modules/core-js/modules/_object-create.js` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1399-1424: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1404-1424: Function `./node_modules/core-js/modules/_object-dp.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
1426-1448: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1450-1472: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1455-1472: Function `./node_modules/core-js/modules/_object-gpo.js` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
1474-1500: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1479-1500: Function `./node_modules/core-js/modules/_object-keys-internal.js` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring. [structure]
1502-1518: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1520-1536: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1538-1559: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1561-1578: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1580-1594: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1596-1636: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1601-1636: Function `./node_modules/core-js/modules/_redefine.js` has a Cognitive Complexity of 17 (exceeds 5 allowed). Consider refactoring. [structure]
1638-1661: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1663-1679: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1681-1695: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1697-1718: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1720-1738: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1740-1766: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1745-1766: Function `./node_modules/core-js/modules/_string-at.js` has a Cognitive Complexity of 18 (exceeds 5 allowed). Consider refactoring. [structure]
1768-1861: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1773-1861: Function `./node_modules/core-js/modules/_task.js` has 68 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1773-1861: Function `./node_modules/core-js/modules/_task.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
1863-1879: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1881-1896: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1898-1913: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1915-1930: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1932-1946: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1948-1969: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1953-1969: Function `./node_modules/core-js/modules/_to-primitive.js` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
1971-1985: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1987-2000: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2002-2022: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2024-2041: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2043-2087: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2089-2109: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2111-2407: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2116-2407: Function `./node_modules/core-js/modules/es6.promise.js` has 239 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2116-2407: Function `./node_modules/core-js/modules/es6.promise.js` has a Cognitive Complexity of 65 (exceeds 5 allowed). Consider refactoring. [structure]
2170-2215: Function `notify` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2178-2209: Function `run` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2409-2436: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2438-2505: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2443-2505: Function `./node_modules/core-js/modules/web.dom.iterable.js` has a Cognitive Complexity of 22 (exceeds 5 allowed). Consider refactoring. [structure]
2443-2505: Function `./node_modules/core-js/modules/web.dom.iterable.js` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2500: Avoid deeply nested control flow statements. [structure]
2507-2611: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2512-2611: Function `./node_modules/object-assign/index.js` has a Cognitive Complexity of 43 (exceeds 5 allowed). Consider refactoring. [structure]
2512-2611: Function `./node_modules/object-assign/index.js` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2535-2581: Function `shouldUseNative` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2576: Avoid too many `return` statements within this function. [structure]
2579: Avoid too many `return` statements within this function. [structure]
2613-2719: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2618-2719: Function `./node_modules/prop-types/checkPropTypes.js` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2618-2719: Function `./node_modules/prop-types/checkPropTypes.js` has a Cognitive Complexity of 62 (exceeds 5 allowed). Consider refactoring. [structure]
2667: Function `checkPropTypes` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2721-2740: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2742-4629: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2747-4629: Function `./node_modules/react/cjs/react.development.js` has 1210 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2747-4629: Function `./node_modules/react/cjs/react.development.js` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
2762-4627: Consider simplifying this complex logical expression. [structure]
2859-2862: Avoid deeply nested control flow statements. [structure]
2885-2957: Function `getComponentName` has 52 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2956: Avoid too many `return` statements within this function. [structure]
3403-3453: Function `ReactElement` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3403: Function `ReactElement` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3460-3537: Function `createElement` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3549-3619: Function `cloneElement` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3592-3597: Avoid deeply nested control flow statements. [structure]
3710-3796: Function `traverseAllChildrenImpl` has 69 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3765-3767: Avoid deeply nested control flow statements. [structure]
3894: Function `mapIntoWithKeyPrefixInternal` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3986-4087: Function `createContext` has 84 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4089-4133: Function `lazy` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4367-4403: Function `validateChildKeys` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4388-4401: Avoid deeply nested control flow statements. [structure]
4412-4446: Function `validatePropTypes` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4475-4537: Function `createElementWithValidation` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4631-4645: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4647-5404: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4652-5404: Function `./node_modules/regenerator-runtime/runtime.js` has 495 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4652-5404: Function `./node_modules/regenerator-runtime/runtime.js` has a Cognitive Complexity of 302 (exceeds 5 allowed). Consider refactoring. [structure]
4661-5380: Function `runtime` has 485 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4805-4870: Function `AsyncIterator` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4881: Function `async` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4896-4972: Function `makeInvokeMethod` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4899-4971: Function `invoke` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4978-5055: Function `maybeInvokeDelegate` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5048: Avoid too many `return` statements within this function. [structure]
5054: Avoid too many `return` statements within this function. [structure]
5215-5273: Function `dispatchException` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5259-5261: Avoid deeply nested control flow statements. [structure]
5263-5270: Avoid deeply nested control flow statements. [structure]
5265: Avoid too many `return` statements within this function. [structure]
5406-6023: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5411-6023: Function `./node_modules/whatwg-fetch/fetch.js` has 484 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5411-6023: Function `./node_modules/whatwg-fetch/fetch.js` has a Cognitive Complexity of 163 (exceeds 5 allowed). Consider refactoring. [structure]
5624-5739: Function `Body` has 88 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5627-5670: Function `_initBody` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5749-5813: Function `Request` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5921-6013: Function `fetch` has 75 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/packs/js/OAS3Autocomplete-c82318df04089118a55e.js (179 issues) ==
1-6027: File `OAS3Autocomplete-c82318df04089118a55e.js` has 3440 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
87-6026: `` has 87 functions (exceeds 20 allowed). Consider refactoring. [structure]
94-240: Function `./app/javascript/packs/OAS3Autocomplete.js` has 105 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
94-240: Function `./app/javascript/packs/OAS3Autocomplete.js` has a Cognitive Complexity of 50 (exceeds 5 allowed). Consider refactoring. [structure]
113: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
115: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
125-142: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
179-187: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
195-238: Function `autocompleteOAS3` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
195-238: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]
196-233: Function `_callee` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
198-232: Function `_callee$` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
242-290: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
247-290: Function `./app/javascript/src/utilities/utils.js` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
292-311: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
313-328: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
330-375: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
335-375: Function `./node_modules/@babel/runtime/helpers/asyncToGenerator.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
337: Function `asyncGeneratorStep` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
377-401: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
403-416: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
418-431: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
433-454: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
456-476: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
461-476: Function `./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring. [structure]
490-504: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
506-519: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
521-537: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
539-553: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
555-569: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
571-603: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
576-603: Function `./node_modules/core-js/modules/_array-includes.js` has a Cognitive Complexity of 29 (exceeds 5 allowed). Consider refactoring. [structure]
605-637: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
610-637: Function `./node_modules/core-js/modules/_classof.js` has a Cognitive Complexity of 22 (exceeds 5 allowed). Consider refactoring. [structure]
639-653: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
655-666: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
668-697: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
699-713: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
715-728: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
730-746: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
763-815: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
768-815: Function `./node_modules/core-js/modules/_export.js` has a Cognitive Complexity of 32 (exceeds 5 allowed). Consider refactoring. [structure]
768-815: Function `./node_modules/core-js/modules/_export.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
817-833: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
835-869: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
840-869: Function `./node_modules/core-js/modules/_for-of.js` has a Cognitive Complexity of 27 (exceeds 5 allowed). Consider refactoring. [structure]
850: Function `exports` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
871-881: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
883-898: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
900-913: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
915-932: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
934-945: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
947-959: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
961-986: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
966-986: Function `./node_modules/core-js/modules/_invoke.js` has a Cognitive Complexity of 17 (exceeds 5 allowed). Consider refactoring. [structure]
988-1003: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1005-1022: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1024-1036: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1038-1059: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1043-1059: Function `./node_modules/core-js/modules/_iter-call.js` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
1061-1084: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1086-1165: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1091-1165: Function `./node_modules/core-js/modules/_iter-define.js` has a Cognitive Complexity of 54 (exceeds 5 allowed). Consider refactoring. [structure]
1091-1165: Function `./node_modules/core-js/modules/_iter-define.js` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1111: Function `exports` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1111-1162: Function `exports` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1167-1198: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1172-1198: Function `./node_modules/core-js/modules/_iter-detect.js` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
1200-1212: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1238-1316: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1243-1316: Function `./node_modules/core-js/modules/_microtask.js` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1243-1316: Function `./node_modules/core-js/modules/_microtask.js` has a Cognitive Complexity of 25 (exceeds 5 allowed). Consider refactoring. [structure]
1252-1313: Function `exports` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1318-1346: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1348-1398: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1353-1398: Function `./node_modules/core-js/modules/_object-create.js` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1353-1398: Function `./node_modules/core-js/modules/_object-create.js` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
1400-1425: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1405-1425: Function `./node_modules/core-js/modules/_object-dp.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
1427-1449: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1451-1473: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1456-1473: Function `./node_modules/core-js/modules/_object-gpo.js` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
1475-1501: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1480-1501: Function `./node_modules/core-js/modules/_object-keys-internal.js` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring. [structure]
1503-1519: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1521-1537: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1539-1560: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1562-1579: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1581-1595: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1597-1637: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1602-1637: Function `./node_modules/core-js/modules/_redefine.js` has a Cognitive Complexity of 17 (exceeds 5 allowed). Consider refactoring. [structure]
1639-1662: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1664-1680: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1682-1696: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1698-1719: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1721-1739: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1741-1767: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1746-1767: Function `./node_modules/core-js/modules/_string-at.js` has a Cognitive Complexity of 18 (exceeds 5 allowed). Consider refactoring. [structure]
1769-1862: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1774-1862: Function `./node_modules/core-js/modules/_task.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
1774-1862: Function `./node_modules/core-js/modules/_task.js` has 68 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1864-1880: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1882-1897: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1899-1914: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1916-1931: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1933-1947: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1949-1970: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1954-1970: Function `./node_modules/core-js/modules/_to-primitive.js` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
1972-1986: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1988-2001: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2003-2023: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2025-2042: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2044-2088: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2090-2110: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2112-2408: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2117-2408: Function `./node_modules/core-js/modules/es6.promise.js` has a Cognitive Complexity of 65 (exceeds 5 allowed). Consider refactoring. [structure]
2117-2408: Function `./node_modules/core-js/modules/es6.promise.js` has 239 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2171-2216: Function `notify` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2179-2210: Function `run` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2410-2437: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2439-2506: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2444-2506: Function `./node_modules/core-js/modules/web.dom.iterable.js` has a Cognitive Complexity of 22 (exceeds 5 allowed). Consider refactoring. [structure]
2444-2506: Function `./node_modules/core-js/modules/web.dom.iterable.js` has 49 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2501: Avoid deeply nested control flow statements. [structure]
2508-2612: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2513-2612: Function `./node_modules/object-assign/index.js` has a Cognitive Complexity of 43 (exceeds 5 allowed). Consider refactoring. [structure]
2513-2612: Function `./node_modules/object-assign/index.js` has 63 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2536-2582: Function `shouldUseNative` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2577: Avoid too many `return` statements within this function. [structure]
2580: Avoid too many `return` statements within this function. [structure]
2614-2720: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2619-2720: Function `./node_modules/prop-types/checkPropTypes.js` has 48 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2619-2720: Function `./node_modules/prop-types/checkPropTypes.js` has a Cognitive Complexity of 62 (exceeds 5 allowed). Consider refactoring. [structure]
2668: Function `checkPropTypes` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
2722-2741: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2743-4630: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2748-4630: Function `./node_modules/react/cjs/react.development.js` has 1210 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2748-4630: Function `./node_modules/react/cjs/react.development.js` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring. [structure]
2763-4628: Consider simplifying this complex logical expression. [structure]
2860-2863: Avoid deeply nested control flow statements. [structure]
2886-2958: Function `getComponentName` has 52 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2957: Avoid too many `return` statements within this function. [structure]
3404: Function `ReactElement` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3404-3454: Function `ReactElement` has 34 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3461-3538: Function `createElement` has 59 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3550-3620: Function `cloneElement` has 45 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3593-3598: Avoid deeply nested control flow statements. [structure]
3711-3797: Function `traverseAllChildrenImpl` has 69 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
3766-3768: Avoid deeply nested control flow statements. [structure]
3895: Function `mapIntoWithKeyPrefixInternal` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
3987-4088: Function `createContext` has 84 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4090-4134: Function `lazy` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4368-4404: Function `validateChildKeys` has 28 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4389-4402: Avoid deeply nested control flow statements. [structure]
4413-4447: Function `validatePropTypes` has 27 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4476-4538: Function `createElementWithValidation` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4632-4646: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4648-5405: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
4653-5405: Function `./node_modules/regenerator-runtime/runtime.js` has a Cognitive Complexity of 302 (exceeds 5 allowed). Consider refactoring. [structure]
4653-5405: Function `./node_modules/regenerator-runtime/runtime.js` has 495 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4662-5381: Function `runtime` has 485 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4806-4871: Function `AsyncIterator` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4882: Function `async` has 5 arguments (exceeds 4 allowed). Consider refactoring. [structure]
4897-4973: Function `makeInvokeMethod` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4900-4972: Function `invoke` has 50 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
4979-5056: Function `maybeInvokeDelegate` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5049: Avoid too many `return` statements within this function. [structure]
5055: Avoid too many `return` statements within this function. [structure]
5216-5274: Function `dispatchException` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5260-5262: Avoid deeply nested control flow statements. [structure]
5264-5271: Avoid deeply nested control flow statements. [structure]
5266: Avoid too many `return` statements within this function. [structure]
5407-6024: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
5412-6024: Function `./node_modules/whatwg-fetch/fetch.js` has a Cognitive Complexity of 163 (exceeds 5 allowed). Consider refactoring. [structure]
5412-6024: Function `./node_modules/whatwg-fetch/fetch.js` has 484 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5625-5740: Function `Body` has 88 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5628-5671: Function `_initBody` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5750-5814: Function `Request` has 46 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
5922-6014: Function `fetch` has 75 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/packs/js/PF4Styles/header-1b0d916d0cc2056bee62.js (13 issues) ==
1-782: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1-783: File `header-1b0d916d0cc2056bee62.js` has 380 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
188-277: Function `./node_modules/css-loader/dist/runtime/api.js` has a Cognitive Complexity of 36 (exceeds 5 allowed). Consider refactoring. [structure]
188-277: Function `./node_modules/css-loader/dist/runtime/api.js` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
198-248: Function `exports` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
284-686: Function `./node_modules/style-loader/lib/addStyles.js` has 280 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
284-686: Function `./node_modules/style-loader/lib/addStyles.js` has a Cognitive Complexity of 138 (exceeds 5 allowed). Consider refactoring. [structure]
354-403: Function `exports` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
535-605: Function `addStyle` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
565-586: Consider simplifying this complex logical expression. [structure]
693-780: Function `./node_modules/style-loader/lib/urls.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
693-780: Function `./node_modules/style-loader/lib/urls.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
707-778: Function `exports` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/packs/js/PF4Styles/header-c9806b9741a7217a2966.js (13 issues) ==
1-782: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1-783: File `header-c9806b9741a7217a2966.js` has 379 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
188-277: Function `./node_modules/css-loader/dist/runtime/api.js` has a Cognitive Complexity of 36 (exceeds 5 allowed). Consider refactoring. [structure]
188-277: Function `./node_modules/css-loader/dist/runtime/api.js` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
198-248: Function `exports` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
284-686: Function `./node_modules/style-loader/lib/addStyles.js` has 280 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
284-686: Function `./node_modules/style-loader/lib/addStyles.js` has a Cognitive Complexity of 138 (exceeds 5 allowed). Consider refactoring. [structure]
354-403: Function `exports` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
535-605: Function `addStyle` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
565-586: Consider simplifying this complex logical expression. [structure]
693-780: Function `./node_modules/style-loader/lib/urls.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
693-780: Function `./node_modules/style-loader/lib/urls.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
707-778: Function `exports` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/packs/js/PF4Styles/loginPage-5938b701cde14a44d4a3.js (14 issues) ==
1-943: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1-944: File `loginPage-5938b701cde14a44d4a3.js` has 396 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
318-407: Function `./node_modules/css-loader/dist/runtime/api.js` has a Cognitive Complexity of 36 (exceeds 5 allowed). Consider refactoring. [structure]
318-407: Function `./node_modules/css-loader/dist/runtime/api.js` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
328-378: Function `exports` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
414-438: Function `./node_modules/css-loader/dist/runtime/url-escape.js` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
445-847: Function `./node_modules/style-loader/lib/addStyles.js` has a Cognitive Complexity of 139 (exceeds 5 allowed). Consider refactoring. [structure]
445-847: Function `./node_modules/style-loader/lib/addStyles.js` has 280 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
515-564: Function `exports` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
696-766: Function `addStyle` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
726-747: Consider simplifying this complex logical expression. [structure]
854-941: Function `./node_modules/style-loader/lib/urls.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
854-941: Function `./node_modules/style-loader/lib/urls.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
868-939: Function `exports` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/packs/js/PF4Styles/loginPage-6e99995fab146fd55c83.js (14 issues) ==
1-943: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1-944: File `loginPage-6e99995fab146fd55c83.js` has 402 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
318-407: Function `./node_modules/css-loader/dist/runtime/api.js` has a Cognitive Complexity of 36 (exceeds 5 allowed). Consider refactoring. [structure]
318-407: Function `./node_modules/css-loader/dist/runtime/api.js` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
328-378: Function `exports` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
414-438: Function `./node_modules/css-loader/dist/runtime/url-escape.js` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
445-847: Function `./node_modules/style-loader/lib/addStyles.js` has a Cognitive Complexity of 139 (exceeds 5 allowed). Consider refactoring. [structure]
445-847: Function `./node_modules/style-loader/lib/addStyles.js` has 280 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
515-564: Function `exports` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
696-766: Function `addStyle` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
726-747: Consider simplifying this complex logical expression. [structure]
854-941: Function `./node_modules/style-loader/lib/urls.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
854-941: Function `./node_modules/style-loader/lib/urls.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
868-939: Function `exports` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/packs/js/PF4Styles/popover-dd854de81d6db178e298.js (12 issues) ==
1-767: File `popover-dd854de81d6db178e298.js` has 379 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
172-261: Function `./node_modules/css-loader/dist/runtime/api.js` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
172-261: Function `./node_modules/css-loader/dist/runtime/api.js` has a Cognitive Complexity of 36 (exceeds 5 allowed). Consider refactoring. [structure]
182-232: Function `exports` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
268-670: Function `./node_modules/style-loader/lib/addStyles.js` has a Cognitive Complexity of 138 (exceeds 5 allowed). Consider refactoring. [structure]
268-670: Function `./node_modules/style-loader/lib/addStyles.js` has 280 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
338-387: Function `exports` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
519-589: Function `addStyle` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
549-570: Consider simplifying this complex logical expression. [structure]
677-764: Function `./node_modules/style-loader/lib/urls.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
677-764: Function `./node_modules/style-loader/lib/urls.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
691-762: Function `exports` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/packs/js/apiap_wizard_backend_api-ab1ad26afd9d05c0d0a2.js (1 issue) ==
101-108: Identical blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/packs/js/dashboard_backends_widget-52715c67f8353ecf7f12.js (1 issue) ==
1-102: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/packs/js/dashboard_products_widget-51fe1d3d33aef3209e96.js (1 issue) ==
1-102: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/packs/js/plans-metrics-807ca0d471b71205e660.js (2 issues) ==
94-154: Function `./app/javascript/packs/plans-metrics.js` has a Cognitive Complexity of 38 (exceeds 5 allowed). Consider refactoring. [structure]
94-154: Function `./app/javascript/packs/plans-metrics.js` has 42 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/packs/js/services-c15f4c973fd02b127509.js (107 issues) ==
1-2613: File `services-c15f4c973fd02b127509.js` has 970 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
87-2612: `` has 93 functions (exceeds 20 allowed). Consider refactoring. [structure]
111-136: Function `./app/javascript/src/services/index.jsx` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
143-203: Function `./app/javascript/src/services/migrate.jsx` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring. [structure]
143-203: Function `./app/javascript/src/services/migrate.jsx` has 36 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
191-200: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
210-341: Function `./app/javascript/src/utilities/toggle.jsx` has a Cognitive Complexity of 15 (exceeds 5 allowed). Consider refactoring. [structure]
210-341: Function `./app/javascript/src/utilities/toggle.jsx` has 60 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
276-284: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
292-299: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
319-331: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
343-367: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
374-394: Function `./node_modules/@babel/runtime/helpers/typeof.js` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
396-407: Similar blocks of code found in 5 locations. Consider refactoring. [duplication]
423-434: Similar blocks of code found in 5 locations. Consider refactoring. [duplication]
436-447: Similar blocks of code found in 5 locations. Consider refactoring. [duplication]
449-460: Similar blocks of code found in 5 locations. Consider refactoring. [duplication]
462-473: Similar blocks of code found in 5 locations. Consider refactoring. [duplication]
475-489: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
491-504: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
506-522: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
524-538: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
540-572: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
545-572: Function `./node_modules/core-js/modules/_array-includes.js` has a Cognitive Complexity of 29 (exceeds 5 allowed). Consider refactoring. [structure]
579-627: Function `./node_modules/core-js/modules/_array-methods.js` has 32 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
593-624: Function `exports` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
614-619: Avoid deeply nested control flow statements. [structure]
619: Avoid deeply nested control flow statements. [structure]
634-654: Function `./node_modules/core-js/modules/_array-species-constructor.js` has a Cognitive Complexity of 16 (exceeds 5 allowed). Consider refactoring. [structure]
673-705: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
678-705: Function `./node_modules/core-js/modules/_classof.js` has a Cognitive Complexity of 23 (exceeds 5 allowed). Consider refactoring. [structure]
707-721: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
723-734: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
756-785: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
787-801: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
803-816: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
818-834: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
856-875: Function `./node_modules/core-js/modules/_enum-keys.js` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
877-929: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
882-929: Function `./node_modules/core-js/modules/_export.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
882-929: Function `./node_modules/core-js/modules/_export.js` has a Cognitive Complexity of 32 (exceeds 5 allowed). Consider refactoring. [structure]
954-970: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
972-982: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
984-999: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1001-1014: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1016-1033: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1035-1046: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1048-1060: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1062-1077: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1079-1096: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1114-1126: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1147-1168: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1152-1168: Function `./node_modules/core-js/modules/_iter-call.js` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
1170-1193: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1195-1274: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1200-1274: Function `./node_modules/core-js/modules/_iter-define.js` has a Cognitive Complexity of 53 (exceeds 5 allowed). Consider refactoring. [structure]
1200-1274: Function `./node_modules/core-js/modules/_iter-define.js` has 51 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1220-1271: Function `exports` has 44 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1220: Function `exports` has 7 arguments (exceeds 4 allowed). Consider refactoring. [structure]
1276-1307: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1281-1307: Function `./node_modules/core-js/modules/_iter-detect.js` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
1309-1321: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1352-1409: Function `./node_modules/core-js/modules/_meta.js` has a Cognitive Complexity of 29 (exceeds 5 allowed). Consider refactoring. [structure]
1352-1409: Function `./node_modules/core-js/modules/_meta.js` has 38 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1416-1459: Function `./node_modules/core-js/modules/_object-assign.js` has a Cognitive Complexity of 18 (exceeds 5 allowed). Consider refactoring. [structure]
1416-1459: Function `./node_modules/core-js/modules/_object-assign.js` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1461-1511: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1466-1511: Function `./node_modules/core-js/modules/_object-create.js` has 26 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
1466-1511: Function `./node_modules/core-js/modules/_object-create.js` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
1513-1538: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1518-1538: Function `./node_modules/core-js/modules/_object-dp.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
1540-1562: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1569-1589: Function `./node_modules/core-js/modules/_object-gopd.js` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring. [structure]
1596-1619: Function `./node_modules/core-js/modules/_object-gopn-ext.js` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
1651-1673: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1656-1673: Function `./node_modules/core-js/modules/_object-gpo.js` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring. [structure]
1675-1701: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1680-1701: Function `./node_modules/core-js/modules/_object-keys-internal.js` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring. [structure]
1703-1719: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1733-1750: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1752-1792: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1757-1792: Function `./node_modules/core-js/modules/_redefine.js` has a Cognitive Complexity of 16 (exceeds 5 allowed). Consider refactoring. [structure]
1794-1810: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1799-1810: Function `./node_modules/core-js/modules/_set-to-string-tag.js` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
1812-1826: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1828-1849: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1851-1877: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1856-1877: Function `./node_modules/core-js/modules/_string-at.js` has a Cognitive Complexity of 18 (exceeds 5 allowed). Consider refactoring. [structure]
1898-1914: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1916-1931: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1933-1948: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1950-1965: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1967-1981: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1983-2004: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
1988-2004: Function `./node_modules/core-js/modules/_to-primitive.js` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. [structure]
2006-2020: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2027-2040: Function `./node_modules/core-js/modules/_wks-define.js` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring. [structure]
2054-2074: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2076-2093: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2111-2115: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
2126-2168: Function `./node_modules/core-js/modules/es6.array.from.js` has a Cognitive Complexity of 27 (exceeds 5 allowed). Consider refactoring. [structure]
2170-2214: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2231-2251: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2277-2304: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
2311-2562: Function `./node_modules/core-js/modules/es6.symbol.js` has a Cognitive Complexity of 90 (exceeds 5 allowed). Consider refactoring. [structure]
2311-2562: Function `./node_modules/core-js/modules/es6.symbol.js` has 174 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
2577-2581: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]

== public/packs/js/settings-565ac278991d2cd0bff6.js (21 issues) ==
1-992: File `settings-565ac278991d2cd0bff6.js` has 512 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
111-234: Function `./app/javascript/src/Settings/authentication-widget.jsx` has 97 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
111-234: Function `./app/javascript/src/Settings/authentication-widget.jsx` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring. [structure]
186-232: Function `initialize` has 39 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
266-285: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
302-315: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
317-330: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
332-353: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
355-375: Similar blocks of code found in 3 locations. Consider refactoring. [duplication]
360-375: Function `./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring. [structure]
397-486: Function `./node_modules/css-loader/dist/runtime/api.js` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
397-486: Function `./node_modules/css-loader/dist/runtime/api.js` has a Cognitive Complexity of 35 (exceeds 5 allowed). Consider refactoring. [structure]
407-457: Function `exports` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
493-895: Function `./node_modules/style-loader/lib/addStyles.js` has 280 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
493-895: Function `./node_modules/style-loader/lib/addStyles.js` has a Cognitive Complexity of 138 (exceeds 5 allowed). Consider refactoring. [structure]
563-612: Function `exports` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
744-814: Function `addStyle` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
774-795: Consider simplifying this complex logical expression. [structure]
902-989: Function `./node_modules/style-loader/lib/urls.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
902-989: Function `./node_modules/style-loader/lib/urls.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
916-987: Function `exports` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/packs/js/settingsPageStyles-9301b600716f5d71971f.js (13 issues) ==
1-862: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1-863: File `settingsPageStyles-9301b600716f5d71971f.js` has 385 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
268-357: Function `./node_modules/css-loader/dist/runtime/api.js` has a Cognitive Complexity of 36 (exceeds 5 allowed). Consider refactoring. [structure]
268-357: Function `./node_modules/css-loader/dist/runtime/api.js` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
278-328: Function `exports` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
364-766: Function `./node_modules/style-loader/lib/addStyles.js` has 280 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
364-766: Function `./node_modules/style-loader/lib/addStyles.js` has a Cognitive Complexity of 138 (exceeds 5 allowed). Consider refactoring. [structure]
434-483: Function `exports` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
615-685: Function `addStyle` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
645-666: Consider simplifying this complex logical expression. [structure]
773-860: Function `./node_modules/style-loader/lib/urls.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
773-860: Function `./node_modules/style-loader/lib/urls.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
787-858: Function `exports` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== public/packs/js/settingsPageStyles-a4015ece9b3d98c794f5.js (13 issues) ==
1-862: Similar blocks of code found in 2 locations. Consider refactoring. [duplication]
1-863: File `settingsPageStyles-a4015ece9b3d98c794f5.js` has 380 lines of code (exceeds 250 allowed). Consider refactoring. [structure]
268-357: Function `./node_modules/css-loader/dist/runtime/api.js` has a Cognitive Complexity of 36 (exceeds 5 allowed). Consider refactoring. [structure]
268-357: Function `./node_modules/css-loader/dist/runtime/api.js` has 55 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
278-328: Function `exports` has 35 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
364-766: Function `./node_modules/style-loader/lib/addStyles.js` has 280 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
364-766: Function `./node_modules/style-loader/lib/addStyles.js` has a Cognitive Complexity of 138 (exceeds 5 allowed). Consider refactoring. [structure]
434-483: Function `exports` has 30 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
615-685: Function `addStyle` has 53 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
645-666: Consider simplifying this complex logical expression. [structure]
773-860: Function `./node_modules/style-loader/lib/urls.js` has 31 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
773-860: Function `./node_modules/style-loader/lib/urls.js` has a Cognitive Complexity of 14 (exceeds 5 allowed). Consider refactoring. [structure]
787-858: Function `exports` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]

== script/detect-invalid-data.rb (10 issues) ==
11-49: Method `search` has a Cognitive Complexity of 22 (exceeds 5 allowed). Consider refactoring. [structure]
11: InvalidDataDetector#search has approx 12 statements [reek]
15: InvalidDataDetector#search has the variable name 'p' [reek]
16-43: InvalidDataDetector#search calls 'p.id' 3 times [reek]
22-26: InvalidDataDetector#search calls 'p.settings' 2 times [reek]
22-26: InvalidDataDetector#search calls 'p.billing_strategy' 2 times [reek]
22-26: InvalidDataDetector#search calls 'p.settings.finance' 2 times [reek]
26-31: InvalidDataDetector#search performs a nil-check [reek]
30: InvalidDataDetector#search contains iterators nested 2 deep [reek]
43: InvalidDataDetector#search calls '@invalid[p.id]' 2 times [reek]

== script/hyper_mega_profiler.rb (14 issues) ==
20: HyperMegaProfiler#puts_diff has approx 8 statements [reek]
25: HyperMegaProfiler#puts_diff has the variable name 'v' [reek]
25: HyperMegaProfiler#puts_diff has the variable name 'k' [reek]
26: HyperMegaProfiler#puts_diff calls 'old[k]' 2 times [reek]
26: HyperMegaProfiler#puts_diff refers to 'old' more than self (maybe move it to another class?) [reek]
27-30: HyperMegaProfiler#puts_diff refers to 'diff' more than self (maybe move it to another class?) [reek]
34-67: Method `count_objects` has a Cognitive Complexity of 10 (exceeds 5 allowed). Consider refactoring. [structure]
34: HyperMegaProfiler#count_objects has approx 9 statements [reek]
34: HyperMegaProfiler#count_objects doesn't depend on instance state (maybe move it to another class?) [reek]
50: HyperMegaProfiler#count_objects has the variable name 'o' [reek]
55-60: HyperMegaProfiler#count_objects calls 'ObjectSpace.memsize_of(o)' 2 times [reek]
56-61: HyperMegaProfiler#count_objects calls 'o.org_name' 2 times [reek]
56-61: HyperMegaProfiler#count_objects calls 'o.respond_to?(:org_name)' 2 times [reek]
56-61: HyperMegaProfiler#count_objects manually dispatches method call [reek]

== script/proxy_env.sh (1 issue) ==
4: PROXY_ENV appears unused. Verify it or export it. [shellcheck]

== script/runner (6 issues) ==
6: Double quote to prevent globbing and word splitting. [shellcheck]
6: Quote this to prevent word splitting. [shellcheck]
6: Quote this to prevent word splitting. [shellcheck]
6: Double quote to prevent globbing and word splitting. [shellcheck]
6: Use "$@" (with quotes) to prevent whitespace problems. [shellcheck]
6: Double quote to prevent globbing and word splitting. [shellcheck]

== script/stress-test.rb (4 issues) ==
22: StressTest#signup has the variable name 'i' [reek]
43: StressTest#provider has approx 22 statements [reek]
43-78: Method `provider` has 29 lines of code (exceeds 25 allowed). Consider refactoring. [structure]
64: StressTest#provider has the variable name 'i' [reek]

== script/stress-test/api_hitting.rb (11 issues) ==
8: APIHitting has at least 5 instance variables [reek]
8: APIHitting assumes too much for instance variable '@accounts' [reek]
8: APIHitting assumes too much for instance variable '@plans' [reek]
37-54: APIHitting tests '@accounts' at least 3 times [reek]
72-74: APIHitting#signup calls 'SecureRandom.uuid' 4 times [reek]
78: APIHitting has missing safe method 'perform!' [reek]
96-103: APIHitting::Client#method_missing calls 'Time.now' 4 times [reek]
99-103: APIHitting::Client#method_missing calls 'method.to_s.upcase' 3 times [reek]
99-103: APIHitting::Client#method_missing calls 'method.to_s' 3 times [reek]
99-103: APIHitting::Client#method_missing calls 'Time.now - start' 3 times [reek]
99-103: APIHitting::Client#method_missing calls 'params.to_query' 3 times [reek]

== script/stress-test/provider_clicking.rb (9 issues) ==
8: ProviderClicking has at least 6 instance variables [reek]
8: ProviderClicking has at least 17 methods [reek]
8: ProviderClicking assumes too much for instance variable '@dashboard' [reek]
23: ProviderClicking has missing safe method 'perform!' [reek]
42-44: ProviderClicking#create_app refers to 'form' more than self (maybe move it to another class?) [reek]
51: ProviderClicking#create_account has approx 8 statements [reek]
55-62: ProviderClicking#create_account refers to 'form' more than self (maybe move it to another class?) [reek]
99: ProviderClicking has missing safe method 'log_in!' [reek]
104-110: ProviderClicking#log_in! calls '@agent.submit(form)' 2 times [reek]

Analysis complete! Found 16,754 issues.
